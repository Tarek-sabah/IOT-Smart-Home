
SmartHomeECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031c  00800060  00006afe  00006b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015f  0080037c  0080037c  00006eae  2**0
                  ALLOC
  3 .stab         0000765c  00000000  00000000  00006eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000062dc  00000000  00000000  0000e50c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000147e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00014988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00014b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00016f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001830b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000194e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000196a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001999a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_1>
       8:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__vector_2>
       c:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_9>
      28:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__vector_10>
      2c:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fa e6       	ldi	r31, 0x6A	; 106
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 31 	call	0x6346	; 0x6346 <main>
      8a:	0c 94 7d 35 	jmp	0x6afa	; 0x6afa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 32 	jmp	0x6486	; 0x6486 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e2       	ldi	r26, 0x27	; 39
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 32 	jmp	0x64be	; 0x64be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 32 	jmp	0x649e	; 0x649e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 32 	jmp	0x64d6	; 0x64d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 32 	jmp	0x649e	; 0x649e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 32 	jmp	0x64d6	; 0x64d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 32 	jmp	0x6486	; 0x6486 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e2       	ldi	r24, 0x27	; 39
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 32 	jmp	0x64be	; 0x64be <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 32 	jmp	0x6496	; 0x6496 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e2       	ldi	r22, 0x27	; 39
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 67 32 	jmp	0x64ce	; 0x64ce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4f 32 	jmp	0x649e	; 0x649e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6b 32 	jmp	0x64d6	; 0x64d6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4f 32 	jmp	0x649e	; 0x649e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6b 32 	jmp	0x64d6	; 0x64d6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4f 32 	jmp	0x649e	; 0x649e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6b 32 	jmp	0x64d6	; 0x64d6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 53 32 	jmp	0x64a6	; 0x64a6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6f 32 	jmp	0x64de	; 0x64de <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4b 32 	jmp	0x6496	; 0x6496 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 67 32 	jmp	0x64ce	; 0x64ce <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 5d       	subi	r30, 0xD1	; 209
     aca:	fd 4f       	sbci	r31, 0xFD	; 253
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:
static void (*UARTRI_CallBack)(void)=NULL;



void UART_Init(const UART_ConfigType *copy_UART_Config)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_Init+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue=0;						//We must set the UCSRCA one time
     e3e:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_u8UCSRCValue,URSEL_UCSRC)	;		//Register select
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	89 83       	std	Y+1, r24	; 0x01

/*******************************UCSRC INIT******************************************/

	// 1 Stop Bit
	CLR_BIT(Local_u8UCSRCValue,USBS_UCSRC);
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	89 83       	std	Y+1, r24	; 0x01

	Local_u8UCSRCValue |= copy_UART_Config->SELECT_STOP_BIT;
     e4c:	ea 81       	ldd	r30, Y+2	; 0x02
     e4e:	fb 81       	ldd	r31, Y+3	; 0x03
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	89 2b       	or	r24, r25
     e56:	89 83       	std	Y+1, r24	; 0x01
	// No parity
	// 8 Data Bits
	if(copy_UART_Config->SELECT_DATA_SIZE == 0x0E)
     e58:	ea 81       	ldd	r30, Y+2	; 0x02
     e5a:	fb 81       	ldd	r31, Y+3	; 0x03
     e5c:	80 81       	ld	r24, Z
     e5e:	8e 30       	cpi	r24, 0x0E	; 14
     e60:	59 f4       	brne	.+22     	; 0xe78 <UART_Init+0x4a>
	{
		Local_u8UCSRCValue|=0x06;
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	86 60       	ori	r24, 0x06	; 6
     e66:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB_REG,UCSZ2_UCSRB);
     e68:	aa e2       	ldi	r26, 0x2A	; 42
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e2       	ldi	r30, 0x2A	; 42
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	8c 93       	st	X, r24
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <UART_Init+0x56>
	}
	else
		Local_u8UCSRCValue |=copy_UART_Config->SELECT_DATA_SIZE;
     e78:	ea 81       	ldd	r30, Y+2	; 0x02
     e7a:	fb 81       	ldd	r31, Y+3	; 0x03
     e7c:	90 81       	ld	r25, Z
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	89 2b       	or	r24, r25
     e82:	89 83       	std	Y+1, r24	; 0x01

	//INterrupt
	SET_BIT(UCSRB_REG,RXCIE_UCSRB);
     e84:	aa e2       	ldi	r26, 0x2A	; 42
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ea e2       	ldi	r30, 0x2A	; 42
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	8c 93       	st	X, r24

	//Asynchronous

	Local_u8UCSRCValue |=copy_UART_Config->SELECT_SYNCHORINZATION;
     e92:	ea 81       	ldd	r30, Y+2	; 0x02
     e94:	fb 81       	ldd	r31, Y+3	; 0x03
     e96:	92 81       	ldd	r25, Z+2	; 0x02
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	89 2b       	or	r24, r25
     e9c:	89 83       	std	Y+1, r24	; 0x01

/************************************************************************/
	UCSRC_REG = Local_u8UCSRCValue;
     e9e:	e0 e4       	ldi	r30, 0x40	; 64
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	80 83       	st	Z, r24
	if(copy_UART_Config->BAUD_RATE==9600)
	{
		//Baud Rate 9600 bit/sec
//		UBRRL_REG = 8;
	}
	UBRRL_REG = 8;
     ea6:	e9 e2       	ldi	r30, 0x29	; 41
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	88 e0       	ldi	r24, 0x08	; 8
     eac:	80 83       	st	Z, r24


	/*Enable TX RX*/
	SET_BIT(UCSRB_REG,TXEN_UCSRB);
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,RXEN_UCSRB);
     ebc:	aa e2       	ldi	r26, 0x2A	; 42
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ea e2       	ldi	r30, 0x2A	; 42
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 61       	ori	r24, 0x10	; 16
     ec8:	8c 93       	st	X, r24

}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <UART_sendByte>:

void UART_sendByte(u8 copy_Data)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	89 83       	std	Y+1, r24	; 0x01
	//Sending
	while((GET_BIT(UCSRA_REG,UDRE_UCSRA))==0);		//Polling until the transmit data is empty
     ee2:	eb e2       	ldi	r30, 0x2B	; 43
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 95       	swap	r24
     eea:	86 95       	lsr	r24
     eec:	87 70       	andi	r24, 0x07	; 7
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	81 70       	andi	r24, 0x01	; 1
     ef4:	90 70       	andi	r25, 0x00	; 0
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	a1 f3       	breq	.-24     	; 0xee2 <UART_sendByte+0xc>
	UDR_REG=copy_Data;
     efa:	ec e2       	ldi	r30, 0x2C	; 44
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	80 83       	st	Z, r24
	while((GET_BIT(UCSRA_REG,TXC_UCSRA))==0);
     f02:	eb e2       	ldi	r30, 0x2B	; 43
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 95       	swap	r24
     f0a:	86 95       	lsr	r24
     f0c:	86 95       	lsr	r24
     f0e:	83 70       	andi	r24, 0x03	; 3
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	99 f3       	breq	.-26     	; 0xf02 <UART_sendByte+0x2c>
	SET_BIT(UCSRA_REG,TXC_UCSRA);
     f1c:	ab e2       	ldi	r26, 0x2B	; 43
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	eb e2       	ldi	r30, 0x2B	; 43
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 64       	ori	r24, 0x40	; 64
     f28:	8c 93       	st	X, r24
}
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <UART_sendString>:
void UART_sendString(u8 *copy_Str)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <UART_sendString+0x6>
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9b 83       	std	Y+3, r25	; 0x03
     f40:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	0e c0       	rjmp	.+28     	; 0xf62 <UART_sendString+0x30>
	while(copy_Str[i]!='\0')
	{
		UART_sendByte(copy_Str[i]);
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	fc 01       	movw	r30, r24
     f52:	e2 0f       	add	r30, r18
     f54:	f3 1f       	adc	r31, r19
     f56:	80 81       	ld	r24, Z
     f58:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_sendByte>
		i++;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRA_REG,TXC_UCSRA);
}
void UART_sendString(u8 *copy_Str)
{
	u8 i=0;
	while(copy_Str[i]!='\0')
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	fc 01       	movw	r30, r24
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	80 81       	ld	r24, Z
     f74:	88 23       	and	r24, r24
     f76:	39 f7       	brne	.-50     	; 0xf46 <UART_sendString+0x14>
	{
		UART_sendByte(copy_Str[i]);
		i++;
	}
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <UART_receiveByteSynchNonBlocking>:


u8 UART_receiveByteSynchNonBlocking()
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	//Get Data
	while((GET_BIT(UCSRA_REG,RXC_UCSRA))==0);		//Polling until the Receive is complete
     f8c:	eb e2       	ldi	r30, 0x2B	; 43
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 23       	and	r24, r24
     f94:	dc f7       	brge	.-10     	; 0xf8c <UART_receiveByteSynchNonBlocking+0x8>
	return UDR_REG;
     f96:	ec e2       	ldi	r30, 0x2C	; 44
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <UART_receiveByteAsynchCallBack>:


void UART_receiveByteAsynchCallBack(void (*ptr) (void))
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <UART_receiveByteAsynchCallBack+0x6>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01

	if(ptr != NULL)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <UART_receiveByteAsynchCallBack+0x22>
	{
		UARTRI_CallBack = ptr;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	90 93 7d 03 	sts	0x037D, r25
     fc0:	80 93 7c 03 	sts	0x037C, r24
	}
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <UART_receiveByteInterrupt>:

void UART_receiveByteInterrupt(u8 *Data)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <UART_receiveByteInterrupt+0x6>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	89 83       	std	Y+1, r24	; 0x01
	*Data = UDR_REG;
     fdc:	ec e2       	ldi	r30, 0x2C	; 44
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	80 83       	st	Z, r24
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <__vector_13>:


void __vector_13 (void)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	UARTRI_CallBack();
    101c:	e0 91 7c 03 	lds	r30, 0x037C
    1020:	f0 91 7d 03 	lds	r31, 0x037D
    1024:	09 95       	icall
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <M_TIMER1_void_Timer_Init>:
/*****************************************
 *            TIMER 1 DRIVER
 *
 * ****************************************/
void M_TIMER1_void_Timer_Init(const TIMER1_SETTINGS_CONFIG *TIMER1_SETTINGS)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <M_TIMER1_void_Timer_Init+0x6>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A &= TCCR1A_WGM_MASK;
    105a:	af e4       	ldi	r26, 0x4F	; 79
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8c 7f       	andi	r24, 0xFC	; 252
    1066:	8c 93       	st	X, r24
	TCCR1B &= TCCR1B_WGM_MASK;
    1068:	ae e4       	ldi	r26, 0x4E	; 78
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ee e4       	ldi	r30, 0x4E	; 78
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	87 7e       	andi	r24, 0xE7	; 231
    1074:	8c 93       	st	X, r24
	if(TIMER1_SETTINGS->WGM>3)
    1076:	e9 81       	ldd	r30, Y+1	; 0x01
    1078:	fa 81       	ldd	r31, Y+2	; 0x02
    107a:	81 81       	ldd	r24, Z+1	; 0x01
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	a0 f0       	brcs	.+40     	; 0x10a8 <M_TIMER1_void_Timer_Init+0x5c>
	{
		TCCR1A |= ((TIMER1_SETTINGS->WGM) & 3);
    1080:	af e4       	ldi	r26, 0x4F	; 79
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ef e4       	ldi	r30, 0x4F	; 79
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	98 2f       	mov	r25, r24
    108c:	e9 81       	ldd	r30, Y+1	; 0x01
    108e:	fa 81       	ldd	r31, Y+2	; 0x02
    1090:	81 81       	ldd	r24, Z+1	; 0x01
    1092:	83 70       	andi	r24, 0x03	; 3
    1094:	89 2b       	or	r24, r25
    1096:	8c 93       	st	X, r24
		SET_BIT(TCCR1B ,3);						//WGM12
    1098:	ae e4       	ldi	r26, 0x4E	; 78
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ee e4       	ldi	r30, 0x4E	; 78
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 60       	ori	r24, 0x08	; 8
    10a4:	8c 93       	st	X, r24
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <M_TIMER1_void_Timer_Init+0x70>
	}
	else
	{
		TCCR1A |= TIMER1_SETTINGS->WGM;
    10a8:	af e4       	ldi	r26, 0x4F	; 79
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ef e4       	ldi	r30, 0x4F	; 79
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	90 81       	ld	r25, Z
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	89 2b       	or	r24, r25
    10ba:	8c 93       	st	X, r24
	}

	TCCR1A &= TCCR1_COM1A_MASK;
    10bc:	af e4       	ldi	r26, 0x4F	; 79
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ef e4       	ldi	r30, 0x4F	; 79
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 73       	andi	r24, 0x3F	; 63
    10c8:	8c 93       	st	X, r24
	TCCR1A |=TIMER1_SETTINGS->COM_1A;
    10ca:	af e4       	ldi	r26, 0x4F	; 79
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ef e4       	ldi	r30, 0x4F	; 79
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	90 81       	ld	r25, Z
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	89 2b       	or	r24, r25
    10dc:	8c 93       	st	X, r24
	TCCR1A &=TCCR1_COM1B_MASK;
    10de:	af e4       	ldi	r26, 0x4F	; 79
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ef e4       	ldi	r30, 0x4F	; 79
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7c       	andi	r24, 0xCF	; 207
    10ea:	8c 93       	st	X, r24
	TCCR1A |=TIMER1_SETTINGS->COM_1B;
    10ec:	af e4       	ldi	r26, 0x4F	; 79
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ef e4       	ldi	r30, 0x4F	; 79
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	90 81       	ld	r25, Z
    10f6:	e9 81       	ldd	r30, Y+1	; 0x01
    10f8:	fa 81       	ldd	r31, Y+2	; 0x02
    10fa:	83 81       	ldd	r24, Z+3	; 0x03
    10fc:	89 2b       	or	r24, r25
    10fe:	8c 93       	st	X, r24

	TCCR1B &= TCCR1B_CS_MASK;
    1100:	ae e4       	ldi	r26, 0x4E	; 78
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ee e4       	ldi	r30, 0x4E	; 78
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 7f       	andi	r24, 0xF8	; 248
    110c:	8c 93       	st	X, r24
	TCCR1B|= TIMER1_SETTINGS->CLK_SOURCE_TIMER1;
    110e:	ae e4       	ldi	r26, 0x4E	; 78
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ee e4       	ldi	r30, 0x4E	; 78
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	90 81       	ld	r25, Z
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	80 81       	ld	r24, Z
    111e:	89 2b       	or	r24, r25
    1120:	8c 93       	st	X, r24
//	TCNT1H_REG&=0X00;
//	TCNT1L_REG=0x00;
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <M_TIMER1_void_Timer_start>:

void M_TIMER1_void_Timer_start()
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62

//	TCNT1H_REG=(TIMER1_REQUIRED_REMINDER_COUNTS>>2);
//	TCNT1L_REG=(TIMER1_REQUIRED_REMINDER_COUNTS & 0xFF);


	TCNT1LH = (u16)TIMER1_START_COUNTS;
    1134:	ec e4       	ldi	r30, 0x4C	; 76
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 91 89 03 	lds	r24, 0x0389
    113c:	90 91 8a 03 	lds	r25, 0x038A
    1140:	a0 91 8b 03 	lds	r26, 0x038B
    1144:	b0 91 8c 03 	lds	r27, 0x038C
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
	TCCR1B =0x04;
    114c:	ee e4       	ldi	r30, 0x4E	; 78
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	84 e0       	ldi	r24, 0x04	; 4
    1152:	80 83       	st	Z, r24
}
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <M_TIMER1_void_Timer_stop>:
void M_TIMER1_void_Timer_stop(void)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
    1162:	ee e4       	ldi	r30, 0x4E	; 78
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	10 82       	st	Z, r1
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <M_TIMER1_void_Timer_setDelayTimeMilliSec>:

void M_TIMER1_void_Timer_setDelayTimeMilliSec(u16 Delay_Time_ms)
{
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	2a 97       	sbiw	r28, 0x0a	; 10
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	9a 87       	std	Y+10, r25	; 0x0a
    118c:	89 87       	std	Y+9, r24	; 0x09
	f32 Tick_Time = (f32) (256)/16000000;
    118e:	8d eb       	ldi	r24, 0xBD	; 189
    1190:	97 e3       	ldi	r25, 0x37	; 55
    1192:	a6 e8       	ldi	r26, 0x86	; 134
    1194:	b7 e3       	ldi	r27, 0x37	; 55
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	9e 83       	std	Y+6, r25	; 0x06
    119a:	af 83       	std	Y+7, r26	; 0x07
    119c:	b8 87       	std	Y+8, r27	; 0x08
	u32 Desired_Ticks = (u32)(Delay_Time_ms/1000) / Tick_Time;
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	28 ee       	ldi	r18, 0xE8	; 232
    11a4:	33 e0       	ldi	r19, 0x03	; 3
    11a6:	b9 01       	movw	r22, r18
    11a8:	0e 94 df 31 	call	0x63be	; 0x63be <__udivmodhi4>
    11ac:	cb 01       	movw	r24, r22
    11ae:	cc 01       	movw	r24, r24
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	2d 81       	ldd	r18, Y+5	; 0x05
    11c6:	3e 81       	ldd	r19, Y+6	; 0x06
    11c8:	4f 81       	ldd	r20, Y+7	; 0x07
    11ca:	58 85       	ldd	r21, Y+8	; 0x08
    11cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	ab 83       	std	Y+3, r26	; 0x03
    11e6:	bc 83       	std	Y+4, r27	; 0x04

	TIMER1_START_COUNTS = 65536 - Desired_Ticks;
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	ab 81       	ldd	r26, Y+3	; 0x03
    11f6:	bc 81       	ldd	r27, Y+4	; 0x04
    11f8:	79 01       	movw	r14, r18
    11fa:	8a 01       	movw	r16, r20
    11fc:	e8 1a       	sub	r14, r24
    11fe:	f9 0a       	sbc	r15, r25
    1200:	0a 0b       	sbc	r16, r26
    1202:	1b 0b       	sbc	r17, r27
    1204:	d8 01       	movw	r26, r16
    1206:	c7 01       	movw	r24, r14
    1208:	80 93 89 03 	sts	0x0389, r24
    120c:	90 93 8a 03 	sts	0x038A, r25
    1210:	a0 93 8b 03 	sts	0x038B, r26
    1214:	b0 93 8c 03 	sts	0x038C, r27
//	TIMER1_REQUIRED_OVERFLOW_COUNTS = Desired_Ticks / 65536;
//	TIMER1_REQUIRED_REMINDER_COUNTS = Desired_Ticks % 65536;



}
    1218:	2a 96       	adiw	r28, 0x0a	; 10
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	08 95       	ret

00001232 <M_TIMER1_void_EnableInt>:

void M_TIMER1_void_EnableInt()
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE1_BIT);
    123a:	a9 e5       	ldi	r26, 0x59	; 89
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e9 e5       	ldi	r30, 0x59	; 89
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	84 60       	ori	r24, 0x04	; 4
    1246:	8c 93       	st	X, r24
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <M_TIMER1_void_DisableInt>:

void M_TIMER1_void_DisableInt(void)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1_BIT);
    1256:	a9 e5       	ldi	r26, 0x59	; 89
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e9 e5       	ldi	r30, 0x59	; 89
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8f 7d       	andi	r24, 0xDF	; 223
    1262:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,TIMSK_OCIE1A_BIT);
    1264:	a9 e5       	ldi	r26, 0x59	; 89
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e9 e5       	ldi	r30, 0x59	; 89
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 7e       	andi	r24, 0xEF	; 239
    1270:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,TIMSK_OCIE1B_BIT);
    1272:	a9 e5       	ldi	r26, 0x59	; 89
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e9 e5       	ldi	r30, 0x59	; 89
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	87 7f       	andi	r24, 0xF7	; 247
    127e:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,TIMSK_TOIE1_BIT);
    1280:	a9 e5       	ldi	r26, 0x59	; 89
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e9 e5       	ldi	r30, 0x59	; 89
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8b 7f       	andi	r24, 0xFB	; 251
    128c:	8c 93       	st	X, r24
}
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <M_TIMER1_void_OVF_setCallBack>:
//		TIMER1_COMP_CallBack = ptr_APP1;
//	}
//
//}
void M_TIMER1_void_OVF_setCallBack(void (*ptr_APP1)(void),void (*ptr_APP2)(void),void (*ptr_APP3)(void))
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <M_TIMER1_void_OVF_setCallBack+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <M_TIMER1_void_OVF_setCallBack+0x8>
    129c:	00 d0       	rcall	.+0      	; 0x129e <M_TIMER1_void_OVF_setCallBack+0xa>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	7c 83       	std	Y+4, r23	; 0x04
    12a8:	6b 83       	std	Y+3, r22	; 0x03
    12aa:	5e 83       	std	Y+6, r21	; 0x06
    12ac:	4d 83       	std	Y+5, r20	; 0x05
	if(ptr_APP1 != NULL)
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	31 f0       	breq	.+12     	; 0x12c2 <M_TIMER1_void_OVF_setCallBack+0x2e>
	{
		TIMER1_OVF_APP1_CallBack = ptr_APP1;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	90 93 7f 03 	sts	0x037F, r25
    12be:	80 93 7e 03 	sts	0x037E, r24
	}
	if(ptr_APP2 != NULL)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <M_TIMER1_void_OVF_setCallBack+0x42>
	{
		TIMER1_OVF_APP2_CallBack = ptr_APP2;
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	90 93 81 03 	sts	0x0381, r25
    12d2:	80 93 80 03 	sts	0x0380, r24
	}
	if(ptr_APP3 != NULL)
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	31 f0       	breq	.+12     	; 0x12ea <M_TIMER1_void_OVF_setCallBack+0x56>
	{
		TIMER1_OVF_APP3_CallBack = ptr_APP3;
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	90 93 83 03 	sts	0x0383, r25
    12e6:	80 93 82 03 	sts	0x0382, r24
	}



}
    12ea:	26 96       	adiw	r28, 0x06	; 6
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <M_TIMER1_void_setFastPWM>:

void M_TIMER1_void_setFastPWM(u32 Frequency ,u8 Duty)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <M_TIMER1_void_setFastPWM+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <M_TIMER1_void_setFastPWM+0x8>
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	69 83       	std	Y+1, r22	; 0x01
    130c:	7a 83       	std	Y+2, r23	; 0x02
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	4d 83       	std	Y+5, r20	; 0x05
	if (Duty == 0)
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	88 23       	and	r24, r24
    1318:	21 f4       	brne	.+8      	; 0x1322 <M_TIMER1_void_setFastPWM+0x26>
	{
		OCR1BL = 0;
    131a:	e8 e4       	ldi	r30, 0x48	; 72
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	10 82       	st	Z, r1
    1320:	16 c0       	rjmp	.+44     	; 0x134e <M_TIMER1_void_setFastPWM+0x52>
		return;
	}
	OCR1BL=(u8)(256*Duty/100)-1;
    1322:	e8 e4       	ldi	r30, 0x48	; 72
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	98 2f       	mov	r25, r24
    132e:	88 27       	eor	r24, r24
    1330:	24 e6       	ldi	r18, 0x64	; 100
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__divmodhi4>
    133a:	cb 01       	movw	r24, r22
    133c:	81 50       	subi	r24, 0x01	; 1
    133e:	80 83       	st	Z, r24

	TCCR1B |=2;
    1340:	ae e4       	ldi	r26, 0x4E	; 78
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ee e4       	ldi	r30, 0x4E	; 78
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	8c 93       	st	X, r24

}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <__vector_9>:
//
//


void __vector_9 (void)
{
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	6f 93       	push	r22
    1372:	7f 93       	push	r23
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	ef 93       	push	r30
    137e:	ff 93       	push	r31
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62

//	TIMER1_OVF_CallBack();
	TCNT1LH = (u16)TIMER1_START_COUNTS;
    1388:	ec e4       	ldi	r30, 0x4C	; 76
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 91 89 03 	lds	r24, 0x0389
    1390:	90 91 8a 03 	lds	r25, 0x038A
    1394:	a0 91 8b 03 	lds	r26, 0x038B
    1398:	b0 91 8c 03 	lds	r27, 0x038C
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
	TIMER1_OVERFLOW_COUNTER++;
    13a0:	80 91 84 03 	lds	r24, 0x0384
    13a4:	90 91 85 03 	lds	r25, 0x0385
    13a8:	a0 91 86 03 	lds	r26, 0x0386
    13ac:	b0 91 87 03 	lds	r27, 0x0387
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	a1 1d       	adc	r26, r1
    13b4:	b1 1d       	adc	r27, r1
    13b6:	80 93 84 03 	sts	0x0384, r24
    13ba:	90 93 85 03 	sts	0x0385, r25
    13be:	a0 93 86 03 	sts	0x0386, r26
    13c2:	b0 93 87 03 	sts	0x0387, r27
	if(TIMER1_OVERFLOW_COUNTER%2 == 0)						//2*500ms = 1 second
    13c6:	80 91 84 03 	lds	r24, 0x0384
    13ca:	90 91 85 03 	lds	r25, 0x0385
    13ce:	a0 91 86 03 	lds	r26, 0x0386
    13d2:	b0 91 87 03 	lds	r27, 0x0387
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	90 70       	andi	r25, 0x00	; 0
    13da:	a0 70       	andi	r26, 0x00	; 0
    13dc:	b0 70       	andi	r27, 0x00	; 0
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	a1 05       	cpc	r26, r1
    13e2:	b1 05       	cpc	r27, r1
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <__vector_9+0x92>
	{
		TIMER1_OVF_APP1_CallBack();
    13e6:	e0 91 7e 03 	lds	r30, 0x037E
    13ea:	f0 91 7f 03 	lds	r31, 0x037F
    13ee:	09 95       	icall
	}
	if(TIMER1_OVERFLOW_COUNTER % 6 == 0)						//6*500ms = 3 seconds
    13f0:	80 91 84 03 	lds	r24, 0x0384
    13f4:	90 91 85 03 	lds	r25, 0x0385
    13f8:	a0 91 86 03 	lds	r26, 0x0386
    13fc:	b0 91 87 03 	lds	r27, 0x0387
    1400:	26 e0       	ldi	r18, 0x06	; 6
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 06 32 	call	0x640c	; 0x640c <__udivmodsi4>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	a1 05       	cpc	r26, r1
    1418:	b1 05       	cpc	r27, r1
    141a:	29 f4       	brne	.+10     	; 0x1426 <__vector_9+0xc8>
	{
		TIMER1_OVF_APP3_CallBack();
    141c:	e0 91 82 03 	lds	r30, 0x0382
    1420:	f0 91 83 03 	lds	r31, 0x0383
    1424:	09 95       	icall
	}
	if(BLUE_State==1)
    1426:	80 91 88 03 	lds	r24, 0x0388
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	39 f4       	brne	.+14     	; 0x143c <__vector_9+0xde>
	{
		TIMER1_OVF_APP2_CallBack();
    142e:	e0 91 80 03 	lds	r30, 0x0380
    1432:	f0 91 81 03 	lds	r31, 0x0381
    1436:	09 95       	icall
		BLUE_State=0;
    1438:	10 92 88 03 	sts	0x0388, r1
	}
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <getIndexOfClosestPrescaler>:
static void (*pf_ovf)(void);
static void (*pf_oc)(void);
static u16 prescaler[5] = {1, 8, 64, 256, 1024};

static u8 getIndexOfClosestPrescaler(u16 value)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <getIndexOfClosestPrescaler+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <getIndexOfClosestPrescaler+0x8>
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	9b 83       	std	Y+3, r25	; 0x03
    1470:	8a 83       	std	Y+2, r24	; 0x02
	if (value > prescaler[4]) return 4;
    1472:	20 91 37 03 	lds	r18, 0x0337
    1476:	30 91 38 03 	lds	r19, 0x0338
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	9b 81       	ldd	r25, Y+3	; 0x03
    147e:	28 17       	cp	r18, r24
    1480:	39 07       	cpc	r19, r25
    1482:	18 f4       	brcc	.+6      	; 0x148a <getIndexOfClosestPrescaler+0x28>
    1484:	64 e0       	ldi	r22, 0x04	; 4
    1486:	6c 83       	std	Y+4, r22	; 0x04
    1488:	45 c0       	rjmp	.+138    	; 0x1514 <getIndexOfClosestPrescaler+0xb2>
	for (u8 i = 0; i < 5; i++)
    148a:	19 82       	std	Y+1, r1	; 0x01
    148c:	3d c0       	rjmp	.+122    	; 0x1508 <getIndexOfClosestPrescaler+0xa6>
	{
		if (value < prescaler[i])
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	fc 01       	movw	r30, r24
    149a:	e1 5d       	subi	r30, 0xD1	; 209
    149c:	fc 4f       	sbci	r31, 0xFC	; 252
    149e:	20 81       	ld	r18, Z
    14a0:	31 81       	ldd	r19, Z+1	; 0x01
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	82 17       	cp	r24, r18
    14a8:	93 07       	cpc	r25, r19
    14aa:	58 f5       	brcc	.+86     	; 0x1502 <getIndexOfClosestPrescaler+0xa0>
		{
			if (value - prescaler[i - 1] < prescaler[i] - value)
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	fc 01       	movw	r30, r24
    14ba:	e1 5d       	subi	r30, 0xD1	; 209
    14bc:	fc 4f       	sbci	r31, 0xFC	; 252
    14be:	20 81       	ld	r18, Z
    14c0:	31 81       	ldd	r19, Z+1	; 0x01
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	9b 81       	ldd	r25, Y+3	; 0x03
    14c6:	ac 01       	movw	r20, r24
    14c8:	42 1b       	sub	r20, r18
    14ca:	53 0b       	sbc	r21, r19
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	fc 01       	movw	r30, r24
    14d8:	e1 5d       	subi	r30, 0xD1	; 209
    14da:	fc 4f       	sbci	r31, 0xFC	; 252
    14dc:	20 81       	ld	r18, Z
    14de:	31 81       	ldd	r19, Z+1	; 0x01
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	b9 01       	movw	r22, r18
    14e6:	68 1b       	sub	r22, r24
    14e8:	79 0b       	sbc	r23, r25
    14ea:	cb 01       	movw	r24, r22
    14ec:	48 17       	cp	r20, r24
    14ee:	59 07       	cpc	r21, r25
    14f0:	28 f4       	brcc	.+10     	; 0x14fc <getIndexOfClosestPrescaler+0x9a>
				return i - 1;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	78 2f       	mov	r23, r24
    14f6:	71 50       	subi	r23, 0x01	; 1
    14f8:	7c 83       	std	Y+4, r23	; 0x04
    14fa:	0c c0       	rjmp	.+24     	; 0x1514 <getIndexOfClosestPrescaler+0xb2>
			else
				return i;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	8c 83       	std	Y+4, r24	; 0x04
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <getIndexOfClosestPrescaler+0xb2>
static u16 prescaler[5] = {1, 8, 64, 256, 1024};

static u8 getIndexOfClosestPrescaler(u16 value)
{
	if (value > prescaler[4]) return 4;
	for (u8 i = 0; i < 5; i++)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	85 30       	cpi	r24, 0x05	; 5
    150c:	08 f4       	brcc	.+2      	; 0x1510 <getIndexOfClosestPrescaler+0xae>
    150e:	bf cf       	rjmp	.-130    	; 0x148e <getIndexOfClosestPrescaler+0x2c>
				return i - 1;
			else
				return i;
		}
	}
	return 5;
    1510:	95 e0       	ldi	r25, 0x05	; 5
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <M_Timer0_void_Init>:
void M_Timer0_void_Init(timer0_config_t* copy_timer0_configs)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <M_Timer0_void_Init+0x6>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
	timer0_configs = *copy_timer0_configs;
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	a2 81       	ldd	r26, Z+2	; 0x02
    153c:	b3 81       	ldd	r27, Z+3	; 0x03
    153e:	80 93 95 03 	sts	0x0395, r24
    1542:	90 93 96 03 	sts	0x0396, r25
    1546:	a0 93 97 03 	sts	0x0397, r26
    154a:	b0 93 98 03 	sts	0x0398, r27
	CLR_N_BITS(TCCR0, 4, 3);
    154e:	a3 e5       	ldi	r26, 0x53	; 83
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e3 e5       	ldi	r30, 0x53	; 83
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	87 78       	andi	r24, 0x87	; 135
    155a:	8c 93       	st	X, r24
	TCCR0 += (timer0_configs.oc_mode_configs << 4) +
    155c:	a3 e5       	ldi	r26, 0x53	; 83
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e3 e5       	ldi	r30, 0x53	; 83
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	20 81       	ld	r18, Z
    1566:	80 91 96 03 	lds	r24, 0x0396
    156a:	98 2f       	mov	r25, r24
    156c:	92 95       	swap	r25
    156e:	90 7f       	andi	r25, 0xF0	; 240
    1570:	80 91 95 03 	lds	r24, 0x0395
    1574:	88 0f       	add	r24, r24
    1576:	88 0f       	add	r24, r24
    1578:	88 0f       	add	r24, r24
    157a:	89 0f       	add	r24, r25
    157c:	82 0f       	add	r24, r18
    157e:	8c 93       	st	X, r24
			 (timer0_configs.timer_mode << 3);
	OCR0 = timer0_configs.value_of_OCR0;
    1580:	ec e5       	ldi	r30, 0x5C	; 92
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 91 98 03 	lds	r24, 0x0398
    1588:	80 83       	st	Z, r24
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <M_Timer0_void_start>:

void M_Timer0_void_start(void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
	CLR_N_BITS(TCCR0, 3, 0);
    159c:	a3 e5       	ldi	r26, 0x53	; 83
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e3 e5       	ldi	r30, 0x53	; 83
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	88 7f       	andi	r24, 0xF8	; 248
    15a8:	8c 93       	st	X, r24
	TCCR0 += timer0_configs.prescaler;
    15aa:	a3 e5       	ldi	r26, 0x53	; 83
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e3 e5       	ldi	r30, 0x53	; 83
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	90 81       	ld	r25, Z
    15b4:	80 91 97 03 	lds	r24, 0x0397
    15b8:	89 0f       	add	r24, r25
    15ba:	8c 93       	st	X, r24
}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <M_Timer0_void_stop>:

void M_Timer0_void_stop(void)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
	CLR_N_BITS(TCCR0, 3, 0);
    15ca:	a3 e5       	ldi	r26, 0x53	; 83
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e3 e5       	ldi	r30, 0x53	; 83
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	8c 93       	st	X, r24
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <M_u8_Timer_GetCounts>:

u8 M_u8_Timer_GetCounts(void)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    15e6:	e2 e5       	ldi	r30, 0x52	; 82
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <M_Timer0_void_EnablOverFloweInt>:

void M_Timer0_void_EnablOverFloweInt(void)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK, 0);
    15fa:	a9 e5       	ldi	r26, 0x59	; 89
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e9 e5       	ldi	r30, 0x59	; 89
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	8c 93       	st	X, r24
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <M_Timer0_void_DisableOverFlowInt>:

void M_Timer0_void_DisableOverFlowInt(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(TIMSK, 0);
    1616:	a9 e5       	ldi	r26, 0x59	; 89
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e9 e5       	ldi	r30, 0x59	; 89
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	8c 93       	st	X, r24
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <M_Timer0_void_EnabOutCompareleInt>:

void M_Timer0_void_EnabOutCompareleInt(void)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 1);
    1632:	a9 e5       	ldi	r26, 0x59	; 89
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e9 e5       	ldi	r30, 0x59	; 89
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	82 60       	ori	r24, 0x02	; 2
    163e:	8c 93       	st	X, r24
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <M_Timer0_void_DisabOutCompareleInt>:

void M_Timer0_void_DisabOutCompareleInt(void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 1);
    164e:	a9 e5       	ldi	r26, 0x59	; 89
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e9 e5       	ldi	r30, 0x59	; 89
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8d 7f       	andi	r24, 0xFD	; 253
    165a:	8c 93       	st	X, r24
}
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <M_Timer0_void_setDelayTimeMilliSec>:

void M_Timer0_void_setDelayTimeMilliSec(u32 delay_value)
{
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	2a 97       	sbiw	r28, 0x0a	; 10
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	6d 83       	std	Y+5, r22	; 0x05
    1680:	7e 83       	std	Y+6, r23	; 0x06
    1682:	8f 83       	std	Y+7, r24	; 0x07
    1684:	98 87       	std	Y+8, r25	; 0x08
	u32 num_of_ticks = (TIMER0_F_CPU_IN_MEGA_HZ * delay_value * 1000) / prescaler[timer0_configs.prescaler - 1];
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	af 81       	ldd	r26, Y+7	; 0x07
    168c:	b8 85       	ldd	r27, Y+8	; 0x08
    168e:	20 e8       	ldi	r18, 0x80	; 128
    1690:	3e e3       	ldi	r19, 0x3E	; 62
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 b4 31 	call	0x6368	; 0x6368 <__mulsi3>
    169e:	7b 01       	movw	r14, r22
    16a0:	8c 01       	movw	r16, r24
    16a2:	80 91 97 03 	lds	r24, 0x0397
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	fc 01       	movw	r30, r24
    16b2:	e1 5d       	subi	r30, 0xD1	; 209
    16b4:	fc 4f       	sbci	r31, 0xFC	; 252
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	9c 01       	movw	r18, r24
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	c8 01       	movw	r24, r16
    16c2:	b7 01       	movw	r22, r14
    16c4:	0e 94 06 32 	call	0x640c	; 0x640c <__udivmodsi4>
    16c8:	da 01       	movw	r26, r20
    16ca:	c9 01       	movw	r24, r18
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	ab 83       	std	Y+3, r26	; 0x03
    16d2:	bc 83       	std	Y+4, r27	; 0x04
	switch(timer0_configs.timer_mode)
    16d4:	80 91 95 03 	lds	r24, 0x0395
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3a 87       	std	Y+10, r19	; 0x0a
    16de:	29 87       	std	Y+9, r18	; 0x09
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <M_Timer0_void_setDelayTimeMilliSec+0x92>
    16e8:	29 85       	ldd	r18, Y+9	; 0x09
    16ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ec:	21 30       	cpi	r18, 0x01	; 1
    16ee:	31 05       	cpc	r19, r1
    16f0:	99 f1       	breq	.+102    	; 0x1758 <M_Timer0_void_setDelayTimeMilliSec+0xf6>
    16f2:	79 c0       	rjmp	.+242    	; 0x17e6 <M_Timer0_void_setDelayTimeMilliSec+0x184>
	{
	case TIMER0_NORMAL_MODE:
		number_of_overflows = num_of_ticks >> 8;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	ab 81       	ldd	r26, Y+3	; 0x03
    16fa:	bc 81       	ldd	r27, Y+4	; 0x04
    16fc:	89 2f       	mov	r24, r25
    16fe:	9a 2f       	mov	r25, r26
    1700:	ab 2f       	mov	r26, r27
    1702:	bb 27       	eor	r27, r27
    1704:	80 93 8d 03 	sts	0x038D, r24
    1708:	90 93 8e 03 	sts	0x038E, r25
    170c:	a0 93 8f 03 	sts	0x038F, r26
    1710:	b0 93 90 03 	sts	0x0390, r27
		remainder = num_of_ticks & 0xff;
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	80 93 99 03 	sts	0x0399, r24
		if (remainder != 0)
    171a:	80 91 99 03 	lds	r24, 0x0399
    171e:	88 23       	and	r24, r24
    1720:	09 f4       	brne	.+2      	; 0x1724 <M_Timer0_void_setDelayTimeMilliSec+0xc2>
    1722:	61 c0       	rjmp	.+194    	; 0x17e6 <M_Timer0_void_setDelayTimeMilliSec+0x184>
		{
			number_of_overflows++;
    1724:	80 91 8d 03 	lds	r24, 0x038D
    1728:	90 91 8e 03 	lds	r25, 0x038E
    172c:	a0 91 8f 03 	lds	r26, 0x038F
    1730:	b0 91 90 03 	lds	r27, 0x0390
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	a1 1d       	adc	r26, r1
    1738:	b1 1d       	adc	r27, r1
    173a:	80 93 8d 03 	sts	0x038D, r24
    173e:	90 93 8e 03 	sts	0x038E, r25
    1742:	a0 93 8f 03 	sts	0x038F, r26
    1746:	b0 93 90 03 	sts	0x0390, r27
			TCNT0 = 256 - remainder;
    174a:	e2 e5       	ldi	r30, 0x52	; 82
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 91 99 03 	lds	r24, 0x0399
    1752:	81 95       	neg	r24
    1754:	80 83       	st	Z, r24
    1756:	47 c0       	rjmp	.+142    	; 0x17e6 <M_Timer0_void_setDelayTimeMilliSec+0x184>
		}
		break;
	case TIMER0_CTC_MODE:
		number_of_overflows = num_of_ticks / timer0_configs.value_of_OCR0;
    1758:	80 91 98 03 	lds	r24, 0x0398
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	ab 81       	ldd	r26, Y+3	; 0x03
    176a:	bc 81       	ldd	r27, Y+4	; 0x04
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 06 32 	call	0x640c	; 0x640c <__udivmodsi4>
    1774:	da 01       	movw	r26, r20
    1776:	c9 01       	movw	r24, r18
    1778:	80 93 8d 03 	sts	0x038D, r24
    177c:	90 93 8e 03 	sts	0x038E, r25
    1780:	a0 93 8f 03 	sts	0x038F, r26
    1784:	b0 93 90 03 	sts	0x0390, r27
		remainder = num_of_ticks % timer0_configs.value_of_OCR0;
    1788:	80 91 98 03 	lds	r24, 0x0398
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	ab 81       	ldd	r26, Y+3	; 0x03
    179a:	bc 81       	ldd	r27, Y+4	; 0x04
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 06 32 	call	0x640c	; 0x640c <__udivmodsi4>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	80 93 99 03 	sts	0x0399, r24
		if (remainder != 0)
    17ac:	80 91 99 03 	lds	r24, 0x0399
    17b0:	88 23       	and	r24, r24
    17b2:	c9 f0       	breq	.+50     	; 0x17e6 <M_Timer0_void_setDelayTimeMilliSec+0x184>
		{
			number_of_overflows++;
    17b4:	80 91 8d 03 	lds	r24, 0x038D
    17b8:	90 91 8e 03 	lds	r25, 0x038E
    17bc:	a0 91 8f 03 	lds	r26, 0x038F
    17c0:	b0 91 90 03 	lds	r27, 0x0390
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	a1 1d       	adc	r26, r1
    17c8:	b1 1d       	adc	r27, r1
    17ca:	80 93 8d 03 	sts	0x038D, r24
    17ce:	90 93 8e 03 	sts	0x038E, r25
    17d2:	a0 93 8f 03 	sts	0x038F, r26
    17d6:	b0 93 90 03 	sts	0x0390, r27
			TCNT0 = 256 - remainder;
    17da:	e2 e5       	ldi	r30, 0x52	; 82
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 91 99 03 	lds	r24, 0x0399
    17e2:	81 95       	neg	r24
    17e4:	80 83       	st	Z, r24
		/* do nothing */
		break;
	}
	//M_Timer0_void_start();

}
    17e6:	2a 96       	adiw	r28, 0x0a	; 10
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	08 95       	ret

00001800 <M_Timer0_void_setOutputCompareCallBack>:

void M_Timer0_void_setOutputCompareCallBack(void(*copy_pf)(void))
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <M_Timer0_void_setOutputCompareCallBack+0x6>
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
		pf_oc = copy_pf;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	90 93 9d 03 	sts	0x039D, r25
    1816:	80 93 9c 03 	sts	0x039C, r24
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <M_Timer0_void_setOverFlowCallBack>:

M_Timer0_void_setOverFlowCallBack(void(*copy_pf)(void))
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <M_Timer0_void_setOverFlowCallBack+0x6>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
	pf_ovf = copy_pf;
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	9a 81       	ldd	r25, Y+2	; 0x02
    1836:	90 93 9b 03 	sts	0x039B, r25
    183a:	80 93 9a 03 	sts	0x039A, r24
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <M_Timer0_void_setFastPWM>:

void M_Timer0_void_setFastPWM(u8 frequency ,u8 duty)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <M_Timer0_void_setFastPWM+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <M_Timer0_void_setFastPWM+0x8>
    1850:	0f 92       	push	r0
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	6b 83       	std	Y+3, r22	; 0x03
	u8 prescaler_index = getIndexOfClosestPrescaler((TIMER0_F_CPU_IN_MEGA_HZ*1000000)/(frequency * 256));
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	98 2f       	mov	r25, r24
    1862:	88 27       	eor	r24, r24
    1864:	9c 01       	movw	r18, r24
    1866:	44 27       	eor	r20, r20
    1868:	37 fd       	sbrc	r19, 7
    186a:	40 95       	com	r20
    186c:	54 2f       	mov	r21, r20
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	94 e2       	ldi	r25, 0x24	; 36
    1872:	a4 ef       	ldi	r26, 0xF4	; 244
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 28 32 	call	0x6450	; 0x6450 <__divmodsi4>
    187e:	da 01       	movw	r26, r20
    1880:	c9 01       	movw	r24, r18
    1882:	0e 94 31 0a 	call	0x1462	; 0x1462 <getIndexOfClosestPrescaler>
    1886:	89 83       	std	Y+1, r24	; 0x01
	timer0_configs.prescaler = prescaler_index + 1;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	80 93 97 03 	sts	0x0397, r24
	switch(timer0_configs.oc_mode_configs)
    1890:	80 91 96 03 	lds	r24, 0x0396
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3d 83       	std	Y+5, r19	; 0x05
    189a:	2c 83       	std	Y+4, r18	; 0x04
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	9d 81       	ldd	r25, Y+5	; 0x05
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	91 05       	cpc	r25, r1
    18a4:	31 f0       	breq	.+12     	; 0x18b2 <M_Timer0_void_setFastPWM+0x6a>
    18a6:	2c 81       	ldd	r18, Y+4	; 0x04
    18a8:	3d 81       	ldd	r19, Y+5	; 0x05
    18aa:	23 30       	cpi	r18, 0x03	; 3
    18ac:	31 05       	cpc	r19, r1
    18ae:	89 f0       	breq	.+34     	; 0x18d2 <M_Timer0_void_setFastPWM+0x8a>
    18b0:	1f c0       	rjmp	.+62     	; 0x18f0 <M_Timer0_void_setFastPWM+0xa8>
	{
	case TIMER0_COMPARE_OUTPUT_FAST_PWM_CLEAR_MODE :
		OCR0 = (256 * duty) / 100 - 1;
    18b2:	ec e5       	ldi	r30, 0x5C	; 92
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	98 2f       	mov	r25, r24
    18be:	88 27       	eor	r24, r24
    18c0:	24 e6       	ldi	r18, 0x64	; 100
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	b9 01       	movw	r22, r18
    18c6:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__divmodhi4>
    18ca:	cb 01       	movw	r24, r22
    18cc:	81 50       	subi	r24, 0x01	; 1
    18ce:	80 83       	st	Z, r24
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <M_Timer0_void_setFastPWM+0xa8>
		break;
	case TIMER0_COMPARE_OUTPUT_FAST_PWM_SET_MODE :
		OCR0 = 255 - (256 * duty) / 100;
    18d2:	ec e5       	ldi	r30, 0x5C	; 92
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	98 2f       	mov	r25, r24
    18de:	88 27       	eor	r24, r24
    18e0:	24 e6       	ldi	r18, 0x64	; 100
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	b9 01       	movw	r22, r18
    18e6:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__divmodhi4>
    18ea:	cb 01       	movw	r24, r22
    18ec:	80 95       	com	r24
    18ee:	80 83       	st	Z, r24
		break;
	default :
		/* error */
		break;
	}
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <M_Timer0_void_setphaseCorrectPWM>:

void M_Timer0_void_setphaseCorrectPWM(u8 frequency ,u8 duty)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <M_Timer0_void_setphaseCorrectPWM+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <M_Timer0_void_setphaseCorrectPWM+0x8>
    1908:	0f 92       	push	r0
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	6b 83       	std	Y+3, r22	; 0x03
	u8 prescaler_index = getIndexOfClosestPrescaler((TIMER0_F_CPU_IN_MEGA_HZ*1000000)/(frequency * 510));
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8e ef       	ldi	r24, 0xFE	; 254
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	ac 01       	movw	r20, r24
    191e:	24 9f       	mul	r18, r20
    1920:	c0 01       	movw	r24, r0
    1922:	25 9f       	mul	r18, r21
    1924:	90 0d       	add	r25, r0
    1926:	34 9f       	mul	r19, r20
    1928:	90 0d       	add	r25, r0
    192a:	11 24       	eor	r1, r1
    192c:	9c 01       	movw	r18, r24
    192e:	44 27       	eor	r20, r20
    1930:	37 fd       	sbrc	r19, 7
    1932:	40 95       	com	r20
    1934:	54 2f       	mov	r21, r20
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	94 e2       	ldi	r25, 0x24	; 36
    193a:	a4 ef       	ldi	r26, 0xF4	; 244
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 28 32 	call	0x6450	; 0x6450 <__divmodsi4>
    1946:	da 01       	movw	r26, r20
    1948:	c9 01       	movw	r24, r18
    194a:	0e 94 31 0a 	call	0x1462	; 0x1462 <getIndexOfClosestPrescaler>
    194e:	89 83       	std	Y+1, r24	; 0x01
	timer0_configs.prescaler = prescaler_index + 1;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	80 93 97 03 	sts	0x0397, r24
	switch(timer0_configs.oc_mode_configs)
    1958:	80 91 96 03 	lds	r24, 0x0396
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3d 83       	std	Y+5, r19	; 0x05
    1962:	2c 83       	std	Y+4, r18	; 0x04
    1964:	4c 81       	ldd	r20, Y+4	; 0x04
    1966:	5d 81       	ldd	r21, Y+5	; 0x05
    1968:	42 30       	cpi	r20, 0x02	; 2
    196a:	51 05       	cpc	r21, r1
    196c:	31 f0       	breq	.+12     	; 0x197a <M_Timer0_void_setphaseCorrectPWM+0x7a>
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	e1 f0       	breq	.+56     	; 0x19b0 <M_Timer0_void_setphaseCorrectPWM+0xb0>
    1978:	36 c0       	rjmp	.+108    	; 0x19e6 <M_Timer0_void_setphaseCorrectPWM+0xe6>
	{
	case TIMER0_COMPARE_OUTPUT_PHASE_CORRECT_PWM_CLEAR_MODE :
		OCR0 = (255 * duty) / 100;
    197a:	ec e5       	ldi	r30, 0x5C	; 92
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	48 2f       	mov	r20, r24
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	ca 01       	movw	r24, r20
    1986:	9c 01       	movw	r18, r24
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	c9 01       	movw	r24, r18
    198e:	96 95       	lsr	r25
    1990:	98 2f       	mov	r25, r24
    1992:	88 27       	eor	r24, r24
    1994:	97 95       	ror	r25
    1996:	87 95       	ror	r24
    1998:	82 1b       	sub	r24, r18
    199a:	93 0b       	sbc	r25, r19
    199c:	84 0f       	add	r24, r20
    199e:	95 1f       	adc	r25, r21
    19a0:	24 e6       	ldi	r18, 0x64	; 100
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	b9 01       	movw	r22, r18
    19a6:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__divmodhi4>
    19aa:	cb 01       	movw	r24, r22
    19ac:	80 83       	st	Z, r24
    19ae:	1b c0       	rjmp	.+54     	; 0x19e6 <M_Timer0_void_setphaseCorrectPWM+0xe6>
		break;
	case TIMER0_COMPARE_OUTPUT_PHASE_CORRECT_PWM_SET_MODE :
		OCR0 = 255 - (255 * duty) / 100;
    19b0:	ec e5       	ldi	r30, 0x5C	; 92
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	48 2f       	mov	r20, r24
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	ca 01       	movw	r24, r20
    19bc:	9c 01       	movw	r18, r24
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	c9 01       	movw	r24, r18
    19c4:	96 95       	lsr	r25
    19c6:	98 2f       	mov	r25, r24
    19c8:	88 27       	eor	r24, r24
    19ca:	97 95       	ror	r25
    19cc:	87 95       	ror	r24
    19ce:	82 1b       	sub	r24, r18
    19d0:	93 0b       	sbc	r25, r19
    19d2:	84 0f       	add	r24, r20
    19d4:	95 1f       	adc	r25, r21
    19d6:	24 e6       	ldi	r18, 0x64	; 100
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	b9 01       	movw	r22, r18
    19dc:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__divmodhi4>
    19e0:	cb 01       	movw	r24, r22
    19e2:	80 95       	com	r24
    19e4:	80 83       	st	Z, r24
	default :
		/* error */
		break;
	}

}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	af 93       	push	r26
    1a12:	bf 93       	push	r27
    1a14:	ef 93       	push	r30
    1a16:	ff 93       	push	r31
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	current_number_of_overflows++;
    1a20:	80 91 91 03 	lds	r24, 0x0391
    1a24:	90 91 92 03 	lds	r25, 0x0392
    1a28:	a0 91 93 03 	lds	r26, 0x0393
    1a2c:	b0 91 94 03 	lds	r27, 0x0394
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	a1 1d       	adc	r26, r1
    1a34:	b1 1d       	adc	r27, r1
    1a36:	80 93 91 03 	sts	0x0391, r24
    1a3a:	90 93 92 03 	sts	0x0392, r25
    1a3e:	a0 93 93 03 	sts	0x0393, r26
    1a42:	b0 93 94 03 	sts	0x0394, r27
	if (current_number_of_overflows == number_of_overflows)
    1a46:	20 91 91 03 	lds	r18, 0x0391
    1a4a:	30 91 92 03 	lds	r19, 0x0392
    1a4e:	40 91 93 03 	lds	r20, 0x0393
    1a52:	50 91 94 03 	lds	r21, 0x0394
    1a56:	80 91 8d 03 	lds	r24, 0x038D
    1a5a:	90 91 8e 03 	lds	r25, 0x038E
    1a5e:	a0 91 8f 03 	lds	r26, 0x038F
    1a62:	b0 91 90 03 	lds	r27, 0x0390
    1a66:	28 17       	cp	r18, r24
    1a68:	39 07       	cpc	r19, r25
    1a6a:	4a 07       	cpc	r20, r26
    1a6c:	5b 07       	cpc	r21, r27
    1a6e:	c9 f4       	brne	.+50     	; 0x1aa2 <__vector_11+0xac>
	{
		if(pf_ovf)
    1a70:	80 91 9a 03 	lds	r24, 0x039A
    1a74:	90 91 9b 03 	lds	r25, 0x039B
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	29 f0       	breq	.+10     	; 0x1a86 <__vector_11+0x90>
			pf_ovf();
    1a7c:	e0 91 9a 03 	lds	r30, 0x039A
    1a80:	f0 91 9b 03 	lds	r31, 0x039B
    1a84:	09 95       	icall
		current_number_of_overflows = 0;
    1a86:	10 92 91 03 	sts	0x0391, r1
    1a8a:	10 92 92 03 	sts	0x0392, r1
    1a8e:	10 92 93 03 	sts	0x0393, r1
    1a92:	10 92 94 03 	sts	0x0394, r1
		TCNT0 = 256 - remainder;
    1a96:	e2 e5       	ldi	r30, 0x52	; 82
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 91 99 03 	lds	r24, 0x0399
    1a9e:	81 95       	neg	r24
    1aa0:	80 83       	st	Z, r24
	}
}
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	bf 91       	pop	r27
    1aac:	af 91       	pop	r26
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	7f 91       	pop	r23
    1ab4:	6f 91       	pop	r22
    1ab6:	5f 91       	pop	r21
    1ab8:	4f 91       	pop	r20
    1aba:	3f 91       	pop	r19
    1abc:	2f 91       	pop	r18
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1ac8:	1f 92       	push	r1
    1aca:	0f 92       	push	r0
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	0f 92       	push	r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	5f 93       	push	r21
    1ada:	6f 93       	push	r22
    1adc:	7f 93       	push	r23
    1ade:	8f 93       	push	r24
    1ae0:	9f 93       	push	r25
    1ae2:	af 93       	push	r26
    1ae4:	bf 93       	push	r27
    1ae6:	ef 93       	push	r30
    1ae8:	ff 93       	push	r31
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	if(pf_oc)
    1af2:	80 91 9c 03 	lds	r24, 0x039C
    1af6:	90 91 9d 03 	lds	r25, 0x039D
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	29 f0       	breq	.+10     	; 0x1b08 <__vector_10+0x40>
		pf_oc();
    1afe:	e0 91 9c 03 	lds	r30, 0x039C
    1b02:	f0 91 9d 03 	lds	r31, 0x039D
    1b06:	09 95       	icall
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	2b 97       	sbiw	r28, 0x0b	; 11
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	9d 83       	std	Y+5, r25	; 0x05
    1b44:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <Port_Init+0x22>
    1b4e:	40 c2       	rjmp	.+1152   	; 0x1fd0 <Port_Init+0x4a2>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1b50:	1b 82       	std	Y+3, r1	; 0x03
    1b52:	3a c2       	rjmp	.+1140   	; 0x1fc8 <Port_Init+0x49a>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 01       	movw	r18, r24
    1b5c:	22 0f       	add	r18, r18
    1b5e:	33 1f       	adc	r19, r19
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	9d 81       	ldd	r25, Y+5	; 0x05
    1b68:	fc 01       	movw	r30, r24
    1b6a:	e2 0f       	add	r30, r18
    1b6c:	f3 1f       	adc	r31, r19
    1b6e:	80 81       	ld	r24, Z
    1b70:	9a e0       	ldi	r25, 0x0A	; 10
    1b72:	69 2f       	mov	r22, r25
    1b74:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    1b78:	89 2f       	mov	r24, r25
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9c 01       	movw	r18, r24
    1b84:	22 0f       	add	r18, r18
    1b86:	33 1f       	adc	r19, r19
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	fc 01       	movw	r30, r24
    1b92:	e2 0f       	add	r30, r18
    1b94:	f3 1f       	adc	r31, r19
    1b96:	80 81       	ld	r24, Z
    1b98:	9a e0       	ldi	r25, 0x0A	; 10
    1b9a:	69 2f       	mov	r22, r25
    1b9c:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    1ba0:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9c 01       	movw	r18, r24
    1baa:	22 0f       	add	r18, r18
    1bac:	33 1f       	adc	r19, r19
    1bae:	22 0f       	add	r18, r18
    1bb0:	33 1f       	adc	r19, r19
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	e2 0f       	add	r30, r18
    1bba:	f3 1f       	adc	r31, r19
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	88 23       	and	r24, r24
    1bc0:	89 f0       	breq	.+34     	; 0x1be4 <Port_Init+0xb6>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 01       	movw	r18, r24
    1bca:	22 0f       	add	r18, r18
    1bcc:	33 1f       	adc	r19, r19
    1bce:	22 0f       	add	r18, r18
    1bd0:	33 1f       	adc	r19, r19
    1bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <Port_Init+0xb6>
    1be2:	ef c1       	rjmp	.+990    	; 0x1fc2 <Port_Init+0x494>
				{
					switch(Local_port)
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	3b 87       	std	Y+11, r19	; 0x0b
    1bec:	2a 87       	std	Y+10, r18	; 0x0a
    1bee:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bf0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bf2:	62 30       	cpi	r22, 0x02	; 2
    1bf4:	71 05       	cpc	r23, r1
    1bf6:	d1 f1       	breq	.+116    	; 0x1c6c <Port_Init+0x13e>
    1bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfc:	83 30       	cpi	r24, 0x03	; 3
    1bfe:	91 05       	cpc	r25, r1
    1c00:	34 f4       	brge	.+12     	; 0x1c0e <Port_Init+0xe0>
    1c02:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c04:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c06:	21 30       	cpi	r18, 0x01	; 1
    1c08:	31 05       	cpc	r19, r1
    1c0a:	71 f0       	breq	.+28     	; 0x1c28 <Port_Init+0xfa>
    1c0c:	94 c0       	rjmp	.+296    	; 0x1d36 <Port_Init+0x208>
    1c0e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c10:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c12:	63 30       	cpi	r22, 0x03	; 3
    1c14:	71 05       	cpc	r23, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <Port_Init+0xec>
    1c18:	4b c0       	rjmp	.+150    	; 0x1cb0 <Port_Init+0x182>
    1c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	91 05       	cpc	r25, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <Port_Init+0xf8>
    1c24:	67 c0       	rjmp	.+206    	; 0x1cf4 <Port_Init+0x1c6>
    1c26:	87 c0       	rjmp	.+270    	; 0x1d36 <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1c28:	aa e3       	ldi	r26, 0x3A	; 58
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	ea e3       	ldi	r30, 0x3A	; 58
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	40 81       	ld	r20, Z
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 01       	movw	r18, r24
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	9d 81       	ldd	r25, Y+5	; 0x05
    1c46:	fc 01       	movw	r30, r24
    1c48:	e2 0f       	add	r30, r18
    1c4a:	f3 1f       	adc	r31, r19
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	b9 01       	movw	r22, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <Port_Init+0x132>
    1c5c:	66 0f       	add	r22, r22
    1c5e:	77 1f       	adc	r23, r23
    1c60:	8a 95       	dec	r24
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <Port_Init+0x12e>
    1c64:	cb 01       	movw	r24, r22
    1c66:	84 2b       	or	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	65 c0       	rjmp	.+202    	; 0x1d36 <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1c6c:	a7 e3       	ldi	r26, 0x37	; 55
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e7 e3       	ldi	r30, 0x37	; 55
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	40 81       	ld	r20, Z
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9c 01       	movw	r18, r24
    1c7e:	22 0f       	add	r18, r18
    1c80:	33 1f       	adc	r19, r19
    1c82:	22 0f       	add	r18, r18
    1c84:	33 1f       	adc	r19, r19
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	e2 0f       	add	r30, r18
    1c8e:	f3 1f       	adc	r31, r19
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	b9 01       	movw	r22, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <Port_Init+0x176>
    1ca0:	66 0f       	add	r22, r22
    1ca2:	77 1f       	adc	r23, r23
    1ca4:	8a 95       	dec	r24
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <Port_Init+0x172>
    1ca8:	cb 01       	movw	r24, r22
    1caa:	84 2b       	or	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	43 c0       	rjmp	.+134    	; 0x1d36 <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1cb0:	a4 e3       	ldi	r26, 0x34	; 52
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e4 e3       	ldi	r30, 0x34	; 52
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	40 81       	ld	r20, Z
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9c 01       	movw	r18, r24
    1cc2:	22 0f       	add	r18, r18
    1cc4:	33 1f       	adc	r19, r19
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cce:	fc 01       	movw	r30, r24
    1cd0:	e2 0f       	add	r30, r18
    1cd2:	f3 1f       	adc	r31, r19
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <Port_Init+0x1ba>
    1ce4:	66 0f       	add	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <Port_Init+0x1b6>
    1cec:	cb 01       	movw	r24, r22
    1cee:	84 2b       	or	r24, r20
    1cf0:	8c 93       	st	X, r24
    1cf2:	21 c0       	rjmp	.+66     	; 0x1d36 <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1cf4:	a1 e3       	ldi	r26, 0x31	; 49
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e1 e3       	ldi	r30, 0x31	; 49
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	40 81       	ld	r20, Z
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 01       	movw	r18, r24
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	22 0f       	add	r18, r18
    1d0c:	33 1f       	adc	r19, r19
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	9d 81       	ldd	r25, Y+5	; 0x05
    1d12:	fc 01       	movw	r30, r24
    1d14:	e2 0f       	add	r30, r18
    1d16:	f3 1f       	adc	r31, r19
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	b9 01       	movw	r22, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <Port_Init+0x1fe>
    1d28:	66 0f       	add	r22, r22
    1d2a:	77 1f       	adc	r23, r23
    1d2c:	8a 95       	dec	r24
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <Port_Init+0x1fa>
    1d30:	cb 01       	movw	r24, r22
    1d32:	84 2b       	or	r24, r20
    1d34:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9c 01       	movw	r18, r24
    1d3e:	22 0f       	add	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	e2 0f       	add	r30, r18
    1d4e:	f3 1f       	adc	r31, r19
    1d50:	81 81       	ldd	r24, Z+1	; 0x01
    1d52:	88 23       	and	r24, r24
    1d54:	89 f0       	breq	.+34     	; 0x1d78 <Port_Init+0x24a>
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	22 0f       	add	r18, r18
    1d60:	33 1f       	adc	r19, r19
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	e2 0f       	add	r30, r18
    1d6e:	f3 1f       	adc	r31, r19
    1d70:	81 81       	ldd	r24, Z+1	; 0x01
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <Port_Init+0x24a>
    1d76:	25 c1       	rjmp	.+586    	; 0x1fc2 <Port_Init+0x494>
					{
						switch(Local_port)
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	39 87       	std	Y+9, r19	; 0x09
    1d80:	28 87       	std	Y+8, r18	; 0x08
    1d82:	68 85       	ldd	r22, Y+8	; 0x08
    1d84:	79 85       	ldd	r23, Y+9	; 0x09
    1d86:	62 30       	cpi	r22, 0x02	; 2
    1d88:	71 05       	cpc	r23, r1
    1d8a:	d1 f1       	breq	.+116    	; 0x1e00 <Port_Init+0x2d2>
    1d8c:	88 85       	ldd	r24, Y+8	; 0x08
    1d8e:	99 85       	ldd	r25, Y+9	; 0x09
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	34 f4       	brge	.+12     	; 0x1da2 <Port_Init+0x274>
    1d96:	28 85       	ldd	r18, Y+8	; 0x08
    1d98:	39 85       	ldd	r19, Y+9	; 0x09
    1d9a:	21 30       	cpi	r18, 0x01	; 1
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	71 f0       	breq	.+28     	; 0x1dbc <Port_Init+0x28e>
    1da0:	94 c0       	rjmp	.+296    	; 0x1eca <Port_Init+0x39c>
    1da2:	68 85       	ldd	r22, Y+8	; 0x08
    1da4:	79 85       	ldd	r23, Y+9	; 0x09
    1da6:	63 30       	cpi	r22, 0x03	; 3
    1da8:	71 05       	cpc	r23, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <Port_Init+0x280>
    1dac:	4b c0       	rjmp	.+150    	; 0x1e44 <Port_Init+0x316>
    1dae:	88 85       	ldd	r24, Y+8	; 0x08
    1db0:	99 85       	ldd	r25, Y+9	; 0x09
    1db2:	84 30       	cpi	r24, 0x04	; 4
    1db4:	91 05       	cpc	r25, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <Port_Init+0x28c>
    1db8:	67 c0       	rjmp	.+206    	; 0x1e88 <Port_Init+0x35a>
    1dba:	87 c0       	rjmp	.+270    	; 0x1eca <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1dbc:	ab e3       	ldi	r26, 0x3B	; 59
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	eb e3       	ldi	r30, 0x3B	; 59
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	40 81       	ld	r20, Z
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 01       	movw	r18, r24
    1dce:	22 0f       	add	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	22 0f       	add	r18, r18
    1dd4:	33 1f       	adc	r19, r19
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	fc 01       	movw	r30, r24
    1ddc:	e2 0f       	add	r30, r18
    1dde:	f3 1f       	adc	r31, r19
    1de0:	81 81       	ldd	r24, Z+1	; 0x01
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	b9 01       	movw	r22, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <Port_Init+0x2c6>
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	8a 95       	dec	r24
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <Port_Init+0x2c2>
    1df8:	cb 01       	movw	r24, r22
    1dfa:	84 2b       	or	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	65 c0       	rjmp	.+202    	; 0x1eca <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1e00:	a8 e3       	ldi	r26, 0x38	; 56
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e3       	ldi	r30, 0x38	; 56
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	40 81       	ld	r20, Z
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9c 01       	movw	r18, r24
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	81 81       	ldd	r24, Z+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	b9 01       	movw	r22, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <Port_Init+0x30a>
    1e34:	66 0f       	add	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	8a 95       	dec	r24
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <Port_Init+0x306>
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	43 c0       	rjmp	.+134    	; 0x1eca <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1e44:	a5 e3       	ldi	r26, 0x35	; 53
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e3       	ldi	r30, 0x35	; 53
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	40 81       	ld	r20, Z
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9c 01       	movw	r18, r24
    1e56:	22 0f       	add	r18, r18
    1e58:	33 1f       	adc	r19, r19
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	fc 01       	movw	r30, r24
    1e64:	e2 0f       	add	r30, r18
    1e66:	f3 1f       	adc	r31, r19
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	b9 01       	movw	r22, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <Port_Init+0x34e>
    1e78:	66 0f       	add	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	8a 95       	dec	r24
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <Port_Init+0x34a>
    1e80:	cb 01       	movw	r24, r22
    1e82:	84 2b       	or	r24, r20
    1e84:	8c 93       	st	X, r24
    1e86:	21 c0       	rjmp	.+66     	; 0x1eca <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1e88:	a2 e3       	ldi	r26, 0x32	; 50
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e2 e3       	ldi	r30, 0x32	; 50
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	40 81       	ld	r20, Z
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 01       	movw	r18, r24
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	81 81       	ldd	r24, Z+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	b9 01       	movw	r22, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <Port_Init+0x392>
    1ebc:	66 0f       	add	r22, r22
    1ebe:	77 1f       	adc	r23, r23
    1ec0:	8a 95       	dec	r24
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <Port_Init+0x38e>
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	84 2b       	or	r24, r20
    1ec8:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 01       	movw	r18, r24
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	83 81       	ldd	r24, Z+3	; 0x03
    1ee6:	88 23       	and	r24, r24
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <Port_Init+0x3be>
    1eea:	6b c0       	rjmp	.+214    	; 0x1fc2 <Port_Init+0x494>
						{
							switch(Local_port)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3f 83       	std	Y+7, r19	; 0x07
    1ef4:	2e 83       	std	Y+6, r18	; 0x06
    1ef6:	6e 81       	ldd	r22, Y+6	; 0x06
    1ef8:	7f 81       	ldd	r23, Y+7	; 0x07
    1efa:	62 30       	cpi	r22, 0x02	; 2
    1efc:	71 05       	cpc	r23, r1
    1efe:	49 f1       	breq	.+82     	; 0x1f52 <Port_Init+0x424>
    1f00:	8e 81       	ldd	r24, Y+6	; 0x06
    1f02:	9f 81       	ldd	r25, Y+7	; 0x07
    1f04:	83 30       	cpi	r24, 0x03	; 3
    1f06:	91 05       	cpc	r25, r1
    1f08:	34 f4       	brge	.+12     	; 0x1f16 <Port_Init+0x3e8>
    1f0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f0e:	21 30       	cpi	r18, 0x01	; 1
    1f10:	31 05       	cpc	r19, r1
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <Port_Init+0x3fe>
    1f14:	56 c0       	rjmp	.+172    	; 0x1fc2 <Port_Init+0x494>
    1f16:	6e 81       	ldd	r22, Y+6	; 0x06
    1f18:	7f 81       	ldd	r23, Y+7	; 0x07
    1f1a:	63 30       	cpi	r22, 0x03	; 3
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	61 f1       	breq	.+88     	; 0x1f78 <Port_Init+0x44a>
    1f20:	8e 81       	ldd	r24, Y+6	; 0x06
    1f22:	9f 81       	ldd	r25, Y+7	; 0x07
    1f24:	84 30       	cpi	r24, 0x04	; 4
    1f26:	91 05       	cpc	r25, r1
    1f28:	d1 f1       	breq	.+116    	; 0x1f9e <Port_Init+0x470>
    1f2a:	4b c0       	rjmp	.+150    	; 0x1fc2 <Port_Init+0x494>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    1f2c:	ab e3       	ldi	r26, 0x3B	; 59
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	eb e3       	ldi	r30, 0x3B	; 59
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	40 81       	ld	r20, Z
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <Port_Init+0x41a>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <Port_Init+0x416>
    1f4c:	84 2b       	or	r24, r20
    1f4e:	8c 93       	st	X, r24
    1f50:	38 c0       	rjmp	.+112    	; 0x1fc2 <Port_Init+0x494>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    1f52:	a8 e3       	ldi	r26, 0x38	; 56
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e8 e3       	ldi	r30, 0x38	; 56
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	40 81       	ld	r20, Z
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 2e       	mov	r0, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <Port_Init+0x440>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	0a 94       	dec	r0
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <Port_Init+0x43c>
    1f72:	84 2b       	or	r24, r20
    1f74:	8c 93       	st	X, r24
    1f76:	25 c0       	rjmp	.+74     	; 0x1fc2 <Port_Init+0x494>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    1f78:	a5 e3       	ldi	r26, 0x35	; 53
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e5 e3       	ldi	r30, 0x35	; 53
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	40 81       	ld	r20, Z
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	02 2e       	mov	r0, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <Port_Init+0x466>
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	0a 94       	dec	r0
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <Port_Init+0x462>
    1f98:	84 2b       	or	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	12 c0       	rjmp	.+36     	; 0x1fc2 <Port_Init+0x494>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    1f9e:	a2 e3       	ldi	r26, 0x32	; 50
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e2 e3       	ldi	r30, 0x32	; 50
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	40 81       	ld	r20, Z
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <Port_Init+0x48c>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <Port_Init+0x488>
    1fbe:	84 2b       	or	r24, r20
    1fc0:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	8b 30       	cpi	r24, 0x0B	; 11
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <Port_Init+0x4a2>
    1fce:	c2 cd       	rjmp	.-1148   	; 0x1b54 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    1fd0:	2b 96       	adiw	r28, 0x0b	; 11
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <M_GI_enable>:
#include "Mcu_HW.h"
void M_GI_disable(void);
#include "GI_int.h"

void M_GI_enable(void)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    1fea:	af e5       	ldi	r26, 0x5F	; 95
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ef e5       	ldi	r30, 0x5F	; 95
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 68       	ori	r24, 0x80	; 128
    1ff6:	8c 93       	st	X, r24
}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <M_GI_disable>:
void M_GI_disable(void)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    2006:	af e5       	ldi	r26, 0x5F	; 95
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	ef e5       	ldi	r30, 0x5F	; 95
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8f 77       	andi	r24, 0x7F	; 127
    2012:	8c 93       	st	X, r24
}
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <M_EXTI_void_enableInt>:
#include "EXTI_int.h"

static void (*pf[3])(void) = {NULL ,NULL ,NULL};

void M_EXTI_void_enableInt(u8 interruptNumber)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <M_EXTI_void_enableInt+0x6>
    2020:	0f 92       	push	r0
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptNumber)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	3b 83       	std	Y+3, r19	; 0x03
    2030:	2a 83       	std	Y+2, r18	; 0x02
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	91 05       	cpc	r25, r1
    203a:	01 f1       	breq	.+64     	; 0x207c <M_EXTI_void_enableInt+0x62>
    203c:	2a 81       	ldd	r18, Y+2	; 0x02
    203e:	3b 81       	ldd	r19, Y+3	; 0x03
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	89 f1       	breq	.+98     	; 0x20a8 <M_EXTI_void_enableInt+0x8e>
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	09 f0       	breq	.+2      	; 0x2050 <M_EXTI_void_enableInt+0x36>
    204e:	40 c0       	rjmp	.+128    	; 0x20d0 <M_EXTI_void_enableInt+0xb6>
	{
	case EXTI_INT0:
		MCUCR_REG &= ~0b00000011;
    2050:	a5 e5       	ldi	r26, 0x55	; 85
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e5 e5       	ldi	r30, 0x55	; 85
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8c 7f       	andi	r24, 0xFC	; 252
    205c:	8c 93       	st	X, r24
		MCUCR_REG += ETXI_INT0_INT_CONFIGURATION;
    205e:	a5 e5       	ldi	r26, 0x55	; 85
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e5       	ldi	r30, 0x55	; 85
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8d 5f       	subi	r24, 0xFD	; 253
    206a:	8c 93       	st	X, r24
		SET_BIT(GICR,6);
    206c:	ab e5       	ldi	r26, 0x5B	; 91
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	eb e5       	ldi	r30, 0x5B	; 91
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	80 64       	ori	r24, 0x40	; 64
    2078:	8c 93       	st	X, r24
    207a:	2a c0       	rjmp	.+84     	; 0x20d0 <M_EXTI_void_enableInt+0xb6>
		break;
	case EXTI_INT1:
		MCUCR_REG &= ~0b00001100;
    207c:	a5 e5       	ldi	r26, 0x55	; 85
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e5 e5       	ldi	r30, 0x55	; 85
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	83 7f       	andi	r24, 0xF3	; 243
    2088:	8c 93       	st	X, r24
		MCUCR_REG += ETXI_INT1_INT_CONFIGURATION << 2;
    208a:	a5 e5       	ldi	r26, 0x55	; 85
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e5 e5       	ldi	r30, 0x55	; 85
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	8c 5f       	subi	r24, 0xFC	; 252
    2096:	8c 93       	st	X, r24
		SET_BIT(GICR,7);
    2098:	ab e5       	ldi	r26, 0x5B	; 91
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	eb e5       	ldi	r30, 0x5B	; 91
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 68       	ori	r24, 0x80	; 128
    20a4:	8c 93       	st	X, r24
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <M_EXTI_void_enableInt+0xb6>
		break;
	case EXTI_INT2:
		CLR_BIT(MCUCSR_REG, 6);
    20a8:	a4 e5       	ldi	r26, 0x54	; 84
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e4 e5       	ldi	r30, 0x54	; 84
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 7b       	andi	r24, 0xBF	; 191
    20b4:	8c 93       	st	X, r24
		MCUCSR_REG += ETXI_INT2_INT_CONFIGURATION << 6;
    20b6:	a4 e5       	ldi	r26, 0x54	; 84
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e4 e5       	ldi	r30, 0x54	; 84
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	8c 93       	st	X, r24
		SET_BIT(GICR,5);
    20c2:	ab e5       	ldi	r26, 0x5B	; 91
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	eb e5       	ldi	r30, 0x5B	; 91
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 62       	ori	r24, 0x20	; 32
    20ce:	8c 93       	st	X, r24
		break;
	}
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <M_EXTI_void_disableInt>:
void M_EXTI_void_disableInt(u8 interruptNumber)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <M_EXTI_void_disableInt+0x6>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptNumber)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	3b 83       	std	Y+3, r19	; 0x03
    20f2:	2a 83       	std	Y+2, r18	; 0x02
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	91 05       	cpc	r25, r1
    20fc:	89 f0       	breq	.+34     	; 0x2120 <M_EXTI_void_disableInt+0x44>
    20fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2100:	3b 81       	ldd	r19, Y+3	; 0x03
    2102:	22 30       	cpi	r18, 0x02	; 2
    2104:	31 05       	cpc	r19, r1
    2106:	a1 f0       	breq	.+40     	; 0x2130 <M_EXTI_void_disableInt+0x54>
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	b9 f4       	brne	.+46     	; 0x213e <M_EXTI_void_disableInt+0x62>
	{
	case EXTI_INT0:
		CLR_BIT(GICR,6);
    2110:	ab e5       	ldi	r26, 0x5B	; 91
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	eb e5       	ldi	r30, 0x5B	; 91
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8f 7b       	andi	r24, 0xBF	; 191
    211c:	8c 93       	st	X, r24
    211e:	0f c0       	rjmp	.+30     	; 0x213e <M_EXTI_void_disableInt+0x62>
		break;
	case EXTI_INT1:
		CLR_BIT(GICR,7);
    2120:	ab e5       	ldi	r26, 0x5B	; 91
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	eb e5       	ldi	r30, 0x5B	; 91
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8f 77       	andi	r24, 0x7F	; 127
    212c:	8c 93       	st	X, r24
    212e:	07 c0       	rjmp	.+14     	; 0x213e <M_EXTI_void_disableInt+0x62>
		break;
	case EXTI_INT2:
		CLR_BIT(GICR,5);
    2130:	ab e5       	ldi	r26, 0x5B	; 91
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	eb e5       	ldi	r30, 0x5B	; 91
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8f 7d       	andi	r24, 0xDF	; 223
    213c:	8c 93       	st	X, r24
		break;
	}
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <M_EXTI_void_setCallBackFunction>:

void M_EXTI_void_setCallBackFunction(void (*copy_pf)(void) ,u8 interruptNumber)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <M_EXTI_void_setCallBackFunction+0x6>
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	6b 83       	std	Y+3, r22	; 0x03
	pf[interruptNumber] = copy_pf;
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	fc 01       	movw	r30, r24
    2168:	e2 56       	subi	r30, 0x62	; 98
    216a:	fc 4f       	sbci	r31, 0xFC	; 252
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	80 83       	st	Z, r24
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <__vector_1>:

ISR(INT0_vect)
{
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	0f 92       	push	r0
    2188:	11 24       	eor	r1, r1
    218a:	2f 93       	push	r18
    218c:	3f 93       	push	r19
    218e:	4f 93       	push	r20
    2190:	5f 93       	push	r21
    2192:	6f 93       	push	r22
    2194:	7f 93       	push	r23
    2196:	8f 93       	push	r24
    2198:	9f 93       	push	r25
    219a:	af 93       	push	r26
    219c:	bf 93       	push	r27
    219e:	ef 93       	push	r30
    21a0:	ff 93       	push	r31
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR, 6);
    21aa:	aa e5       	ldi	r26, 0x5A	; 90
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ea e5       	ldi	r30, 0x5A	; 90
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 64       	ori	r24, 0x40	; 64
    21b6:	8c 93       	st	X, r24
	if (pf[0])
    21b8:	80 91 9e 03 	lds	r24, 0x039E
    21bc:	90 91 9f 03 	lds	r25, 0x039F
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	29 f0       	breq	.+10     	; 0x21ce <__vector_1+0x4e>
		pf[0]();
    21c4:	e0 91 9e 03 	lds	r30, 0x039E
    21c8:	f0 91 9f 03 	lds	r31, 0x039F
    21cc:	09 95       	icall
}
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	ff 91       	pop	r31
    21d4:	ef 91       	pop	r30
    21d6:	bf 91       	pop	r27
    21d8:	af 91       	pop	r26
    21da:	9f 91       	pop	r25
    21dc:	8f 91       	pop	r24
    21de:	7f 91       	pop	r23
    21e0:	6f 91       	pop	r22
    21e2:	5f 91       	pop	r21
    21e4:	4f 91       	pop	r20
    21e6:	3f 91       	pop	r19
    21e8:	2f 91       	pop	r18
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <__vector_2>:

ISR(INT1_vect)
{
    21f4:	1f 92       	push	r1
    21f6:	0f 92       	push	r0
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	0f 92       	push	r0
    21fc:	11 24       	eor	r1, r1
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	4f 93       	push	r20
    2204:	5f 93       	push	r21
    2206:	6f 93       	push	r22
    2208:	7f 93       	push	r23
    220a:	8f 93       	push	r24
    220c:	9f 93       	push	r25
    220e:	af 93       	push	r26
    2210:	bf 93       	push	r27
    2212:	ef 93       	push	r30
    2214:	ff 93       	push	r31
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR, 7);
    221e:	aa e5       	ldi	r26, 0x5A	; 90
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	ea e5       	ldi	r30, 0x5A	; 90
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	80 68       	ori	r24, 0x80	; 128
    222a:	8c 93       	st	X, r24
	if (pf[1])
    222c:	80 91 a0 03 	lds	r24, 0x03A0
    2230:	90 91 a1 03 	lds	r25, 0x03A1
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	29 f0       	breq	.+10     	; 0x2242 <__vector_2+0x4e>
		pf[1]();
    2238:	e0 91 a0 03 	lds	r30, 0x03A0
    223c:	f0 91 a1 03 	lds	r31, 0x03A1
    2240:	09 95       	icall
}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	ff 91       	pop	r31
    2248:	ef 91       	pop	r30
    224a:	bf 91       	pop	r27
    224c:	af 91       	pop	r26
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	7f 91       	pop	r23
    2254:	6f 91       	pop	r22
    2256:	5f 91       	pop	r21
    2258:	4f 91       	pop	r20
    225a:	3f 91       	pop	r19
    225c:	2f 91       	pop	r18
    225e:	0f 90       	pop	r0
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	0f 90       	pop	r0
    2264:	1f 90       	pop	r1
    2266:	18 95       	reti

00002268 <__vector_3>:

ISR(INT2_vect)
{
    2268:	1f 92       	push	r1
    226a:	0f 92       	push	r0
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	0f 92       	push	r0
    2270:	11 24       	eor	r1, r1
    2272:	2f 93       	push	r18
    2274:	3f 93       	push	r19
    2276:	4f 93       	push	r20
    2278:	5f 93       	push	r21
    227a:	6f 93       	push	r22
    227c:	7f 93       	push	r23
    227e:	8f 93       	push	r24
    2280:	9f 93       	push	r25
    2282:	af 93       	push	r26
    2284:	bf 93       	push	r27
    2286:	ef 93       	push	r30
    2288:	ff 93       	push	r31
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR, 5);
    2292:	aa e5       	ldi	r26, 0x5A	; 90
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ea e5       	ldi	r30, 0x5A	; 90
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	80 62       	ori	r24, 0x20	; 32
    229e:	8c 93       	st	X, r24
	if (pf[2])
    22a0:	80 91 a2 03 	lds	r24, 0x03A2
    22a4:	90 91 a3 03 	lds	r25, 0x03A3
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	29 f0       	breq	.+10     	; 0x22b6 <__vector_3+0x4e>
		pf[2]();
    22ac:	e0 91 a2 03 	lds	r30, 0x03A2
    22b0:	f0 91 a3 03 	lds	r31, 0x03A3
    22b4:	09 95       	icall
}
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	bf 91       	pop	r27
    22c0:	af 91       	pop	r26
    22c2:	9f 91       	pop	r25
    22c4:	8f 91       	pop	r24
    22c6:	7f 91       	pop	r23
    22c8:	6f 91       	pop	r22
    22ca:	5f 91       	pop	r21
    22cc:	4f 91       	pop	r20
    22ce:	3f 91       	pop	r19
    22d0:	2f 91       	pop	r18
    22d2:	0f 90       	pop	r0
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	0f 90       	pop	r0
    22d8:	1f 90       	pop	r1
    22da:	18 95       	reti

000022dc <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <M_Dio_en_getPinValue+0x6>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <M_Dio_en_getPinValue+0x8>
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <M_Dio_en_getPinValue+0xa>
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    22ec:	8c 81       	ldd	r24, Y+4	; 0x04
    22ee:	9a e0       	ldi	r25, 0x0A	; 10
    22f0:	69 2f       	mov	r22, r25
    22f2:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    22f6:	89 2f       	mov	r24, r25
    22f8:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9a e0       	ldi	r25, 0x0A	; 10
    22fe:	69 2f       	mov	r22, r25
    2300:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    2304:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	3e 83       	std	Y+6, r19	; 0x06
    230e:	2d 83       	std	Y+5, r18	; 0x05
    2310:	4d 81       	ldd	r20, Y+5	; 0x05
    2312:	5e 81       	ldd	r21, Y+6	; 0x06
    2314:	42 30       	cpi	r20, 0x02	; 2
    2316:	51 05       	cpc	r21, r1
    2318:	41 f1       	breq	.+80     	; 0x236a <M_Dio_en_getPinValue+0x8e>
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	83 30       	cpi	r24, 0x03	; 3
    2320:	91 05       	cpc	r25, r1
    2322:	34 f4       	brge	.+12     	; 0x2330 <M_Dio_en_getPinValue+0x54>
    2324:	2d 81       	ldd	r18, Y+5	; 0x05
    2326:	3e 81       	ldd	r19, Y+6	; 0x06
    2328:	21 30       	cpi	r18, 0x01	; 1
    232a:	31 05       	cpc	r19, r1
    232c:	61 f0       	breq	.+24     	; 0x2346 <M_Dio_en_getPinValue+0x6a>
    232e:	52 c0       	rjmp	.+164    	; 0x23d4 <M_Dio_en_getPinValue+0xf8>
    2330:	4d 81       	ldd	r20, Y+5	; 0x05
    2332:	5e 81       	ldd	r21, Y+6	; 0x06
    2334:	43 30       	cpi	r20, 0x03	; 3
    2336:	51 05       	cpc	r21, r1
    2338:	51 f1       	breq	.+84     	; 0x238e <M_Dio_en_getPinValue+0xb2>
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	84 30       	cpi	r24, 0x04	; 4
    2340:	91 05       	cpc	r25, r1
    2342:	b9 f1       	breq	.+110    	; 0x23b2 <M_Dio_en_getPinValue+0xd6>
    2344:	47 c0       	rjmp	.+142    	; 0x23d4 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    2346:	e9 e3       	ldi	r30, 0x39	; 57
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a9 01       	movw	r20, r18
    2358:	02 c0       	rjmp	.+4      	; 0x235e <M_Dio_en_getPinValue+0x82>
    235a:	55 95       	asr	r21
    235c:	47 95       	ror	r20
    235e:	8a 95       	dec	r24
    2360:	e2 f7       	brpl	.-8      	; 0x235a <M_Dio_en_getPinValue+0x7e>
    2362:	ca 01       	movw	r24, r20
    2364:	81 70       	andi	r24, 0x01	; 1
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	35 c0       	rjmp	.+106    	; 0x23d4 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    236a:	e6 e3       	ldi	r30, 0x36	; 54
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a9 01       	movw	r20, r18
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <M_Dio_en_getPinValue+0xa6>
    237e:	55 95       	asr	r21
    2380:	47 95       	ror	r20
    2382:	8a 95       	dec	r24
    2384:	e2 f7       	brpl	.-8      	; 0x237e <M_Dio_en_getPinValue+0xa2>
    2386:	ca 01       	movw	r24, r20
    2388:	81 70       	andi	r24, 0x01	; 1
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	23 c0       	rjmp	.+70     	; 0x23d4 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    238e:	e3 e3       	ldi	r30, 0x33	; 51
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a9 01       	movw	r20, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <M_Dio_en_getPinValue+0xca>
    23a2:	55 95       	asr	r21
    23a4:	47 95       	ror	r20
    23a6:	8a 95       	dec	r24
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <M_Dio_en_getPinValue+0xc6>
    23aa:	ca 01       	movw	r24, r20
    23ac:	81 70       	andi	r24, 0x01	; 1
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	11 c0       	rjmp	.+34     	; 0x23d4 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    23b2:	e0 e3       	ldi	r30, 0x30	; 48
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a9 01       	movw	r20, r18
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <M_Dio_en_getPinValue+0xee>
    23c6:	55 95       	asr	r21
    23c8:	47 95       	ror	r20
    23ca:	8a 95       	dec	r24
    23cc:	e2 f7       	brpl	.-8      	; 0x23c6 <M_Dio_en_getPinValue+0xea>
    23ce:	ca 01       	movw	r24, r20
    23d0:	81 70       	andi	r24, 0x01	; 1
    23d2:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d6:	26 96       	adiw	r28, 0x06	; 6
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	28 97       	sbiw	r28, 0x08	; 8
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9a e0       	ldi	r25, 0x0A	; 10
    2404:	69 2f       	mov	r22, r25
    2406:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    240a:	89 2f       	mov	r24, r25
    240c:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9a e0       	ldi	r25, 0x0A	; 10
    2412:	69 2f       	mov	r22, r25
    2414:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    2418:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	09 f0       	breq	.+2      	; 0x2422 <M_Dio_void_setPinValue+0x3a>
    2420:	70 c0       	rjmp	.+224    	; 0x2502 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	38 87       	std	Y+8, r19	; 0x08
    242a:	2f 83       	std	Y+7, r18	; 0x07
    242c:	8f 81       	ldd	r24, Y+7	; 0x07
    242e:	98 85       	ldd	r25, Y+8	; 0x08
    2430:	82 30       	cpi	r24, 0x02	; 2
    2432:	91 05       	cpc	r25, r1
    2434:	51 f1       	breq	.+84     	; 0x248a <M_Dio_void_setPinValue+0xa2>
    2436:	2f 81       	ldd	r18, Y+7	; 0x07
    2438:	38 85       	ldd	r19, Y+8	; 0x08
    243a:	23 30       	cpi	r18, 0x03	; 3
    243c:	31 05       	cpc	r19, r1
    243e:	34 f4       	brge	.+12     	; 0x244c <M_Dio_void_setPinValue+0x64>
    2440:	8f 81       	ldd	r24, Y+7	; 0x07
    2442:	98 85       	ldd	r25, Y+8	; 0x08
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	91 05       	cpc	r25, r1
    2448:	61 f0       	breq	.+24     	; 0x2462 <M_Dio_void_setPinValue+0x7a>
    244a:	d3 c0       	rjmp	.+422    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
    244c:	2f 81       	ldd	r18, Y+7	; 0x07
    244e:	38 85       	ldd	r19, Y+8	; 0x08
    2450:	23 30       	cpi	r18, 0x03	; 3
    2452:	31 05       	cpc	r19, r1
    2454:	71 f1       	breq	.+92     	; 0x24b2 <M_Dio_void_setPinValue+0xca>
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	98 85       	ldd	r25, Y+8	; 0x08
    245a:	84 30       	cpi	r24, 0x04	; 4
    245c:	91 05       	cpc	r25, r1
    245e:	e9 f1       	breq	.+122    	; 0x24da <M_Dio_void_setPinValue+0xf2>
    2460:	c8 c0       	rjmp	.+400    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    2462:	ab e3       	ldi	r26, 0x3B	; 59
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	eb e3       	ldi	r30, 0x3B	; 59
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <M_Dio_void_setPinValue+0x98>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <M_Dio_void_setPinValue+0x94>
    2484:	84 2b       	or	r24, r20
    2486:	8c 93       	st	X, r24
    2488:	b4 c0       	rjmp	.+360    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    248a:	a8 e3       	ldi	r26, 0x38	; 56
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e8 e3       	ldi	r30, 0x38	; 56
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	48 2f       	mov	r20, r24
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <M_Dio_void_setPinValue+0xc0>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <M_Dio_void_setPinValue+0xbc>
    24ac:	84 2b       	or	r24, r20
    24ae:	8c 93       	st	X, r24
    24b0:	a0 c0       	rjmp	.+320    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    24b2:	a5 e3       	ldi	r26, 0x35	; 53
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e5 e3       	ldi	r30, 0x35	; 53
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <M_Dio_void_setPinValue+0xe8>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <M_Dio_void_setPinValue+0xe4>
    24d4:	84 2b       	or	r24, r20
    24d6:	8c 93       	st	X, r24
    24d8:	8c c0       	rjmp	.+280    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    24da:	a2 e3       	ldi	r26, 0x32	; 50
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e2 e3       	ldi	r30, 0x32	; 50
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <M_Dio_void_setPinValue+0x110>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <M_Dio_void_setPinValue+0x10c>
    24fc:	84 2b       	or	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	78 c0       	rjmp	.+240    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	88 23       	and	r24, r24
    2506:	09 f0       	breq	.+2      	; 0x250a <M_Dio_void_setPinValue+0x122>
    2508:	74 c0       	rjmp	.+232    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	3e 83       	std	Y+6, r19	; 0x06
    2512:	2d 83       	std	Y+5, r18	; 0x05
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	82 30       	cpi	r24, 0x02	; 2
    251a:	91 05       	cpc	r25, r1
    251c:	61 f1       	breq	.+88     	; 0x2576 <M_Dio_void_setPinValue+0x18e>
    251e:	2d 81       	ldd	r18, Y+5	; 0x05
    2520:	3e 81       	ldd	r19, Y+6	; 0x06
    2522:	23 30       	cpi	r18, 0x03	; 3
    2524:	31 05       	cpc	r19, r1
    2526:	34 f4       	brge	.+12     	; 0x2534 <M_Dio_void_setPinValue+0x14c>
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	91 05       	cpc	r25, r1
    2530:	69 f0       	breq	.+26     	; 0x254c <M_Dio_void_setPinValue+0x164>
    2532:	5f c0       	rjmp	.+190    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
    2534:	2d 81       	ldd	r18, Y+5	; 0x05
    2536:	3e 81       	ldd	r19, Y+6	; 0x06
    2538:	23 30       	cpi	r18, 0x03	; 3
    253a:	31 05       	cpc	r19, r1
    253c:	89 f1       	breq	.+98     	; 0x25a0 <M_Dio_void_setPinValue+0x1b8>
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	84 30       	cpi	r24, 0x04	; 4
    2544:	91 05       	cpc	r25, r1
    2546:	09 f4       	brne	.+2      	; 0x254a <M_Dio_void_setPinValue+0x162>
    2548:	40 c0       	rjmp	.+128    	; 0x25ca <M_Dio_void_setPinValue+0x1e2>
    254a:	53 c0       	rjmp	.+166    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    254c:	ab e3       	ldi	r26, 0x3B	; 59
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	eb e3       	ldi	r30, 0x3B	; 59
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	48 2f       	mov	r20, r24
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	02 2e       	mov	r0, r18
    2564:	02 c0       	rjmp	.+4      	; 0x256a <M_Dio_void_setPinValue+0x182>
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	0a 94       	dec	r0
    256c:	e2 f7       	brpl	.-8      	; 0x2566 <M_Dio_void_setPinValue+0x17e>
    256e:	80 95       	com	r24
    2570:	84 23       	and	r24, r20
    2572:	8c 93       	st	X, r24
    2574:	3e c0       	rjmp	.+124    	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    2576:	a8 e3       	ldi	r26, 0x38	; 56
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e8 e3       	ldi	r30, 0x38	; 56
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	48 2f       	mov	r20, r24
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	02 2e       	mov	r0, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <M_Dio_void_setPinValue+0x1ac>
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	0a 94       	dec	r0
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <M_Dio_void_setPinValue+0x1a8>
    2598:	80 95       	com	r24
    259a:	84 23       	and	r24, r20
    259c:	8c 93       	st	X, r24
    259e:	29 c0       	rjmp	.+82     	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    25a0:	a5 e3       	ldi	r26, 0x35	; 53
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e5 e3       	ldi	r30, 0x35	; 53
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	48 2f       	mov	r20, r24
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	02 2e       	mov	r0, r18
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <M_Dio_void_setPinValue+0x1d6>
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	0a 94       	dec	r0
    25c0:	e2 f7       	brpl	.-8      	; 0x25ba <M_Dio_void_setPinValue+0x1d2>
    25c2:	80 95       	com	r24
    25c4:	84 23       	and	r24, r20
    25c6:	8c 93       	st	X, r24
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    25ca:	a2 e3       	ldi	r26, 0x32	; 50
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e2 e3       	ldi	r30, 0x32	; 50
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	48 2f       	mov	r20, r24
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	02 2e       	mov	r0, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <M_Dio_void_setPinValue+0x200>
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	0a 94       	dec	r0
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <M_Dio_void_setPinValue+0x1fc>
    25ec:	80 95       	com	r24
    25ee:	84 23       	and	r24, r20
    25f0:	8c 93       	st	X, r24
		}

	}

}
    25f2:	28 96       	adiw	r28, 0x08	; 8
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <M_Dio_en_getPortValue+0x6>
    260a:	00 d0       	rcall	.+0      	; 0x260c <M_Dio_en_getPortValue+0x8>
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	3c 83       	std	Y+4, r19	; 0x04
    261a:	2b 83       	std	Y+3, r18	; 0x03
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	82 30       	cpi	r24, 0x02	; 2
    2622:	91 05       	cpc	r25, r1
    2624:	d9 f0       	breq	.+54     	; 0x265c <M_Dio_en_getPortValue+0x58>
    2626:	2b 81       	ldd	r18, Y+3	; 0x03
    2628:	3c 81       	ldd	r19, Y+4	; 0x04
    262a:	23 30       	cpi	r18, 0x03	; 3
    262c:	31 05       	cpc	r19, r1
    262e:	34 f4       	brge	.+12     	; 0x263c <M_Dio_en_getPortValue+0x38>
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	91 05       	cpc	r25, r1
    2638:	61 f0       	breq	.+24     	; 0x2652 <M_Dio_en_getPortValue+0x4e>
    263a:	1e c0       	rjmp	.+60     	; 0x2678 <M_Dio_en_getPortValue+0x74>
    263c:	2b 81       	ldd	r18, Y+3	; 0x03
    263e:	3c 81       	ldd	r19, Y+4	; 0x04
    2640:	23 30       	cpi	r18, 0x03	; 3
    2642:	31 05       	cpc	r19, r1
    2644:	81 f0       	breq	.+32     	; 0x2666 <M_Dio_en_getPortValue+0x62>
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	84 30       	cpi	r24, 0x04	; 4
    264c:	91 05       	cpc	r25, r1
    264e:	81 f0       	breq	.+32     	; 0x2670 <M_Dio_en_getPortValue+0x6c>
    2650:	13 c0       	rjmp	.+38     	; 0x2678 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    2652:	eb e3       	ldi	r30, 0x3B	; 59
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	0e c0       	rjmp	.+28     	; 0x2678 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    265c:	e8 e3       	ldi	r30, 0x38	; 56
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2666:	e5 e3       	ldi	r30, 0x35	; 53
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	04 c0       	rjmp	.+8      	; 0x2678 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2670:	e2 e3       	ldi	r30, 0x32	; 50
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    2678:	89 81       	ldd	r24, Y+1	; 0x01
}
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <M_Dio_void_setPortValue+0x6>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <M_Dio_void_setPortValue+0x8>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	3c 83       	std	Y+4, r19	; 0x04
    26a0:	2b 83       	std	Y+3, r18	; 0x03
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	82 30       	cpi	r24, 0x02	; 2
    26a8:	91 05       	cpc	r25, r1
    26aa:	d9 f0       	breq	.+54     	; 0x26e2 <M_Dio_void_setPortValue+0x5a>
    26ac:	2b 81       	ldd	r18, Y+3	; 0x03
    26ae:	3c 81       	ldd	r19, Y+4	; 0x04
    26b0:	23 30       	cpi	r18, 0x03	; 3
    26b2:	31 05       	cpc	r19, r1
    26b4:	34 f4       	brge	.+12     	; 0x26c2 <M_Dio_void_setPortValue+0x3a>
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	91 05       	cpc	r25, r1
    26be:	61 f0       	breq	.+24     	; 0x26d8 <M_Dio_void_setPortValue+0x50>
    26c0:	1e c0       	rjmp	.+60     	; 0x26fe <M_Dio_void_setPortValue+0x76>
    26c2:	2b 81       	ldd	r18, Y+3	; 0x03
    26c4:	3c 81       	ldd	r19, Y+4	; 0x04
    26c6:	23 30       	cpi	r18, 0x03	; 3
    26c8:	31 05       	cpc	r19, r1
    26ca:	81 f0       	breq	.+32     	; 0x26ec <M_Dio_void_setPortValue+0x64>
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	91 05       	cpc	r25, r1
    26d4:	81 f0       	breq	.+32     	; 0x26f6 <M_Dio_void_setPortValue+0x6e>
    26d6:	13 c0       	rjmp	.+38     	; 0x26fe <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    26d8:	eb e3       	ldi	r30, 0x3B	; 59
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	80 83       	st	Z, r24
    26e0:	0e c0       	rjmp	.+28     	; 0x26fe <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    26e2:	e8 e3       	ldi	r30, 0x38	; 56
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	80 83       	st	Z, r24
    26ea:	09 c0       	rjmp	.+18     	; 0x26fe <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    26ec:	e5 e3       	ldi	r30, 0x35	; 53
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	80 83       	st	Z, r24
    26f4:	04 c0       	rjmp	.+8      	; 0x26fe <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    26f6:	e2 e3       	ldi	r30, 0x32	; 50
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	80 83       	st	Z, r24
	}
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <M_Dio_void_togglePinValue+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <M_Dio_void_togglePinValue+0x8>
    2714:	0f 92       	push	r0
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9a e0       	ldi	r25, 0x0A	; 10
    2720:	69 2f       	mov	r22, r25
    2722:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    2726:	89 2f       	mov	r24, r25
    2728:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	9a e0       	ldi	r25, 0x0A	; 10
    272e:	69 2f       	mov	r22, r25
    2730:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <__udivmodqi4>
    2734:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	3d 83       	std	Y+5, r19	; 0x05
    273e:	2c 83       	std	Y+4, r18	; 0x04
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	82 30       	cpi	r24, 0x02	; 2
    2746:	91 05       	cpc	r25, r1
    2748:	51 f1       	breq	.+84     	; 0x279e <M_Dio_void_togglePinValue+0x92>
    274a:	2c 81       	ldd	r18, Y+4	; 0x04
    274c:	3d 81       	ldd	r19, Y+5	; 0x05
    274e:	23 30       	cpi	r18, 0x03	; 3
    2750:	31 05       	cpc	r19, r1
    2752:	34 f4       	brge	.+12     	; 0x2760 <M_Dio_void_togglePinValue+0x54>
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	81 30       	cpi	r24, 0x01	; 1
    275a:	91 05       	cpc	r25, r1
    275c:	61 f0       	breq	.+24     	; 0x2776 <M_Dio_void_togglePinValue+0x6a>
    275e:	5a c0       	rjmp	.+180    	; 0x2814 <M_Dio_void_togglePinValue+0x108>
    2760:	2c 81       	ldd	r18, Y+4	; 0x04
    2762:	3d 81       	ldd	r19, Y+5	; 0x05
    2764:	23 30       	cpi	r18, 0x03	; 3
    2766:	31 05       	cpc	r19, r1
    2768:	71 f1       	breq	.+92     	; 0x27c6 <M_Dio_void_togglePinValue+0xba>
    276a:	8c 81       	ldd	r24, Y+4	; 0x04
    276c:	9d 81       	ldd	r25, Y+5	; 0x05
    276e:	84 30       	cpi	r24, 0x04	; 4
    2770:	91 05       	cpc	r25, r1
    2772:	e9 f1       	breq	.+122    	; 0x27ee <M_Dio_void_togglePinValue+0xe2>
    2774:	4f c0       	rjmp	.+158    	; 0x2814 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2776:	ab e3       	ldi	r26, 0x3B	; 59
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	eb e3       	ldi	r30, 0x3B	; 59
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	48 2f       	mov	r20, r24
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	02 2e       	mov	r0, r18
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <M_Dio_void_togglePinValue+0x88>
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	0a 94       	dec	r0
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <M_Dio_void_togglePinValue+0x84>
    2798:	84 27       	eor	r24, r20
    279a:	8c 93       	st	X, r24
    279c:	3b c0       	rjmp	.+118    	; 0x2814 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    279e:	a8 e3       	ldi	r26, 0x38	; 56
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e8 e3       	ldi	r30, 0x38	; 56
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	48 2f       	mov	r20, r24
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	02 2e       	mov	r0, r18
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <M_Dio_void_togglePinValue+0xb0>
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	0a 94       	dec	r0
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <M_Dio_void_togglePinValue+0xac>
    27c0:	84 27       	eor	r24, r20
    27c2:	8c 93       	st	X, r24
    27c4:	27 c0       	rjmp	.+78     	; 0x2814 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    27c6:	a5 e3       	ldi	r26, 0x35	; 53
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e5 e3       	ldi	r30, 0x35	; 53
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	48 2f       	mov	r20, r24
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	02 2e       	mov	r0, r18
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <M_Dio_void_togglePinValue+0xd8>
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	0a 94       	dec	r0
    27e6:	e2 f7       	brpl	.-8      	; 0x27e0 <M_Dio_void_togglePinValue+0xd4>
    27e8:	84 27       	eor	r24, r20
    27ea:	8c 93       	st	X, r24
    27ec:	13 c0       	rjmp	.+38     	; 0x2814 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    27ee:	a2 e3       	ldi	r26, 0x32	; 50
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e2 e3       	ldi	r30, 0x32	; 50
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	48 2f       	mov	r20, r24
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	02 2e       	mov	r0, r18
    2806:	02 c0       	rjmp	.+4      	; 0x280c <M_Dio_void_togglePinValue+0x100>
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	0a 94       	dec	r0
    280e:	e2 f7       	brpl	.-8      	; 0x2808 <M_Dio_void_togglePinValue+0xfc>
    2810:	84 27       	eor	r24, r20
    2812:	8c 93       	st	X, r24
	}

}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <M_ADC_Init>:
#include "ADC_types.h"
#include "ADC_int.h"

static void (*pf)(void) = NULL;
void M_ADC_Init(const ADC_config_type* copy_config)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <M_ADC_Init+0x6>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	9a 83       	std	Y+2, r25	; 0x02
    2830:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA, 7);
    2832:	a6 e2       	ldi	r26, 0x26	; 38
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e6 e2       	ldi	r30, 0x26	; 38
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	80 68       	ori	r24, 0x80	; 128
    283e:	8c 93       	st	X, r24
	ADMUX = 0;
    2840:	e7 e2       	ldi	r30, 0x27	; 39
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	10 82       	st	Z, r1
	ADMUX = (copy_config->ref << 6) + (copy_config->adjust << 5);
    2846:	a7 e2       	ldi	r26, 0x27	; 39
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 81       	ldd	r30, Y+1	; 0x01
    284c:	fa 81       	ldd	r31, Y+2	; 0x02
    284e:	80 81       	ld	r24, Z
    2850:	98 2f       	mov	r25, r24
    2852:	92 95       	swap	r25
    2854:	99 0f       	add	r25, r25
    2856:	99 0f       	add	r25, r25
    2858:	90 7c       	andi	r25, 0xC0	; 192
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	81 81       	ldd	r24, Z+1	; 0x01
    2860:	82 95       	swap	r24
    2862:	88 0f       	add	r24, r24
    2864:	80 7e       	andi	r24, 0xE0	; 224
    2866:	89 0f       	add	r24, r25
    2868:	8c 93       	st	X, r24
	WRITE_BIT(ADCSRA, 5, copy_config->trigger);
    286a:	a6 e2       	ldi	r26, 0x26	; 38
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e6 e2       	ldi	r30, 0x26	; 38
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	28 2f       	mov	r18, r24
    2876:	2f 7d       	andi	r18, 0xDF	; 223
    2878:	e9 81       	ldd	r30, Y+1	; 0x01
    287a:	fa 81       	ldd	r31, Y+2	; 0x02
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	88 2f       	mov	r24, r24
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	81 70       	andi	r24, 0x01	; 1
    2884:	90 70       	andi	r25, 0x00	; 0
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	82 95       	swap	r24
    288c:	92 95       	swap	r25
    288e:	90 7f       	andi	r25, 0xF0	; 240
    2890:	98 27       	eor	r25, r24
    2892:	80 7f       	andi	r24, 0xF0	; 240
    2894:	98 27       	eor	r25, r24
    2896:	82 2b       	or	r24, r18
    2898:	8c 93       	st	X, r24
	PUT_N_BITS(SFIOR, 3, 5, copy_config->auto_trig_source);
    289a:	a0 e5       	ldi	r26, 0x50	; 80
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e0 e5       	ldi	r30, 0x50	; 80
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	8f 71       	andi	r24, 0x1F	; 31
    28a6:	8c 93       	st	X, r24
    28a8:	a0 e5       	ldi	r26, 0x50	; 80
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e0 e5       	ldi	r30, 0x50	; 80
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	28 2f       	mov	r18, r24
    28b4:	e9 81       	ldd	r30, Y+1	; 0x01
    28b6:	fa 81       	ldd	r31, Y+2	; 0x02
    28b8:	85 81       	ldd	r24, Z+5	; 0x05
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	82 95       	swap	r24
    28c4:	92 95       	swap	r25
    28c6:	90 7f       	andi	r25, 0xF0	; 240
    28c8:	98 27       	eor	r25, r24
    28ca:	80 7f       	andi	r24, 0xF0	; 240
    28cc:	98 27       	eor	r25, r24
    28ce:	82 2b       	or	r24, r18
    28d0:	8c 93       	st	X, r24
	PUT_N_BITS(ADCSRA, 3, 0, copy_config->prescaler);
    28d2:	a6 e2       	ldi	r26, 0x26	; 38
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	e6 e2       	ldi	r30, 0x26	; 38
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	88 7f       	andi	r24, 0xF8	; 248
    28de:	8c 93       	st	X, r24
    28e0:	a6 e2       	ldi	r26, 0x26	; 38
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e6 e2       	ldi	r30, 0x26	; 38
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	90 81       	ld	r25, Z
    28ea:	e9 81       	ldd	r30, Y+1	; 0x01
    28ec:	fa 81       	ldd	r31, Y+2	; 0x02
    28ee:	84 81       	ldd	r24, Z+4	; 0x04
    28f0:	89 2b       	or	r24, r25
    28f2:	8c 93       	st	X, r24
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <M_ADC_getDigitalValueSynchNonBlocking>:
u16 M_ADC_getDigitalValueSynchNonBlocking(ADC_channel_id_type id)
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <M_ADC_getDigitalValueSynchNonBlocking+0x6>
    2904:	00 d0       	rcall	.+0      	; 0x2906 <M_ADC_getDigitalValueSynchNonBlocking+0x8>
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	8b 83       	std	Y+3, r24	; 0x03
	PUT_N_BITS(ADMUX, 5, 0, id);
    290e:	a7 e2       	ldi	r26, 0x27	; 39
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e7 e2       	ldi	r30, 0x27	; 39
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	80 7e       	andi	r24, 0xE0	; 224
    291a:	8c 93       	st	X, r24
    291c:	a7 e2       	ldi	r26, 0x27	; 39
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e7 e2       	ldi	r30, 0x27	; 39
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	90 81       	ld	r25, Z
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	89 2b       	or	r24, r25
    292a:	8c 93       	st	X, r24
	u16 counter = 0;
    292c:	1a 82       	std	Y+2, r1	; 0x02
    292e:	19 82       	std	Y+1, r1	; 0x01
	M_ADC_void_start();
    2930:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <M_ADC_void_start>
    2934:	05 c0       	rjmp	.+10     	; 0x2940 <M_ADC_getDigitalValueSynchNonBlocking+0x42>
	while(GET_BIT(ADCSRA, 4) == 1 && counter < 50000)
		counter++;
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	01 96       	adiw	r24, 0x01	; 1
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
u16 M_ADC_getDigitalValueSynchNonBlocking(ADC_channel_id_type id)
{
	PUT_N_BITS(ADMUX, 5, 0, id);
	u16 counter = 0;
	M_ADC_void_start();
	while(GET_BIT(ADCSRA, 4) == 1 && counter < 50000)
    2940:	e6 e2       	ldi	r30, 0x26	; 38
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	82 95       	swap	r24
    2948:	8f 70       	andi	r24, 0x0F	; 15
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	81 70       	andi	r24, 0x01	; 1
    2950:	90 70       	andi	r25, 0x00	; 0
    2952:	98 2f       	mov	r25, r24
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	89 27       	eor	r24, r25
    2958:	88 23       	and	r24, r24
    295a:	31 f4       	brne	.+12     	; 0x2968 <M_ADC_getDigitalValueSynchNonBlocking+0x6a>
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	23 ec       	ldi	r18, 0xC3	; 195
    2962:	80 35       	cpi	r24, 0x50	; 80
    2964:	92 07       	cpc	r25, r18
    2966:	38 f3       	brcs	.-50     	; 0x2936 <M_ADC_getDigitalValueSynchNonBlocking+0x38>
		counter++;
	if(counter < 50000)
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	23 ec       	ldi	r18, 0xC3	; 195
    296e:	80 35       	cpi	r24, 0x50	; 80
    2970:	92 07       	cpc	r25, r18
    2972:	60 f4       	brcc	.+24     	; 0x298c <M_ADC_getDigitalValueSynchNonBlocking+0x8e>
	{
		SET_BIT(ADCSRA, 4);
    2974:	a6 e2       	ldi	r26, 0x26	; 38
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e6 e2       	ldi	r30, 0x26	; 38
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	80 61       	ori	r24, 0x10	; 16
    2980:	8c 93       	st	X, r24
		return M_ADC_u16_read();
    2982:	0e 94 23 15 	call	0x2a46	; 0x2a46 <M_ADC_u16_read>
    2986:	9d 83       	std	Y+5, r25	; 0x05
    2988:	8c 83       	std	Y+4, r24	; 0x04
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <M_ADC_getDigitalValueSynchNonBlocking+0x92>
	}
	return 0;
    298c:	1d 82       	std	Y+5, r1	; 0x05
    298e:	1c 82       	std	Y+4, r1	; 0x04
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	9d 81       	ldd	r25, Y+5	; 0x05
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <M_ADC_voidSetChannel>:
void M_ADC_voidSetChannel(u8 channelNumer)
{
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	0f 92       	push	r0
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	89 83       	std	Y+1, r24	; 0x01
	PUT_N_BITS(ADMUX, 5, 0, channelNumer);
    29b0:	a7 e2       	ldi	r26, 0x27	; 39
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e7 e2       	ldi	r30, 0x27	; 39
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	80 7e       	andi	r24, 0xE0	; 224
    29bc:	8c 93       	st	X, r24
    29be:	a7 e2       	ldi	r26, 0x27	; 39
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e7 e2       	ldi	r30, 0x27	; 39
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	90 81       	ld	r25, Z
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	89 2b       	or	r24, r25
    29cc:	8c 93       	st	X, r24
}
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <M_ADC_void_start>:

void M_ADC_void_start(void)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, 6);
    29de:	a6 e2       	ldi	r26, 0x26	; 38
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e6 e2       	ldi	r30, 0x26	; 38
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 64       	ori	r24, 0x40	; 64
    29ea:	8c 93       	st	X, r24
}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <M_ADC_void_stop>:
void M_ADC_void_stop(void)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, 7);
    29fa:	a6 e2       	ldi	r26, 0x26	; 38
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e6 e2       	ldi	r30, 0x26	; 38
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	8f 77       	andi	r24, 0x7F	; 127
    2a06:	8c 93       	st	X, r24
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <M_ADC_void_enable_interrupt>:
void M_ADC_void_enable_interrupt(void)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, 3);
    2a16:	a6 e2       	ldi	r26, 0x26	; 38
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e6 e2       	ldi	r30, 0x26	; 38
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	88 60       	ori	r24, 0x08	; 8
    2a22:	8c 93       	st	X, r24
}
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <M_ADC_void_disable_interrupt>:
void M_ADC_void_disable_interrupt(void)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, 3);
    2a32:	a6 e2       	ldi	r26, 0x26	; 38
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e6 e2       	ldi	r30, 0x26	; 38
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	87 7f       	andi	r24, 0xF7	; 247
    2a3e:	8c 93       	st	X, r24
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <M_ADC_u16_read>:
u16 M_ADC_u16_read(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <M_ADC_u16_read+0x6>
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <M_ADC_u16_read+0x8>
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(ADMUX, 5))
    2a52:	e7 e2       	ldi	r30, 0x27	; 39
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	82 95       	swap	r24
    2a5a:	86 95       	lsr	r24
    2a5c:	87 70       	andi	r24, 0x07	; 7
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	81 70       	andi	r24, 0x01	; 1
    2a64:	90 70       	andi	r25, 0x00	; 0
    2a66:	88 23       	and	r24, r24
    2a68:	41 f0       	breq	.+16     	; 0x2a7a <M_ADC_u16_read+0x34>
	{
		return ADCH;
    2a6a:	e5 e2       	ldi	r30, 0x25	; 37
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	3c 83       	std	Y+4, r19	; 0x04
    2a76:	2b 83       	std	Y+3, r18	; 0x03
    2a78:	13 c0       	rjmp	.+38     	; 0x2aa0 <M_ADC_u16_read+0x5a>
	}
	u16 adcValue = ADCL;
    2a7a:	e4 e2       	ldi	r30, 0x24	; 36
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
	return ADCH + adcValue;
    2a88:	e5 e2       	ldi	r30, 0x25	; 37
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	a9 01       	movw	r20, r18
    2a98:	48 0f       	add	r20, r24
    2a9a:	59 1f       	adc	r21, r25
    2a9c:	5c 83       	std	Y+4, r21	; 0x04
    2a9e:	4b 83       	std	Y+3, r20	; 0x03
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <M_ADC_void_getDigitalValueAsynchCallBack>:

void M_ADC_void_getDigitalValueAsynchCallBack(void(*action)(void), ADC_channel_id_type id)
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <M_ADC_void_getDigitalValueAsynchCallBack+0x6>
    2ab8:	0f 92       	push	r0
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	9a 83       	std	Y+2, r25	; 0x02
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	6b 83       	std	Y+3, r22	; 0x03
	PUT_N_BITS(ADMUX, 5, 0, id);
    2ac4:	a7 e2       	ldi	r26, 0x27	; 39
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e7 e2       	ldi	r30, 0x27	; 39
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	80 7e       	andi	r24, 0xE0	; 224
    2ad0:	8c 93       	st	X, r24
    2ad2:	a7 e2       	ldi	r26, 0x27	; 39
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e7 e2       	ldi	r30, 0x27	; 39
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	90 81       	ld	r25, Z
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	89 2b       	or	r24, r25
    2ae0:	8c 93       	st	X, r24
	M_ADC_void_start();
    2ae2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <M_ADC_void_start>
	pf = action;
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	90 93 a5 03 	sts	0x03A5, r25
    2aee:	80 93 a4 03 	sts	0x03A4, r24
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <M_ADC_void_setCallBackFunction>:

void M_ADC_void_setCallBackFunction(void(*action)(void))
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <M_ADC_void_setCallBackFunction+0x6>
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01
	pf = action;
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	90 93 a5 03 	sts	0x03A5, r25
    2b14:	80 93 a4 03 	sts	0x03A4, r24
}
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <__vector_16>:

ISR(ADC_vect)
{
    2b22:	1f 92       	push	r1
    2b24:	0f 92       	push	r0
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	0f 92       	push	r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	2f 93       	push	r18
    2b2e:	3f 93       	push	r19
    2b30:	4f 93       	push	r20
    2b32:	5f 93       	push	r21
    2b34:	6f 93       	push	r22
    2b36:	7f 93       	push	r23
    2b38:	8f 93       	push	r24
    2b3a:	9f 93       	push	r25
    2b3c:	af 93       	push	r26
    2b3e:	bf 93       	push	r27
    2b40:	ef 93       	push	r30
    2b42:	ff 93       	push	r31
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
	if(pf)
    2b4c:	80 91 a4 03 	lds	r24, 0x03A4
    2b50:	90 91 a5 03 	lds	r25, 0x03A5
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	29 f0       	breq	.+10     	; 0x2b62 <__vector_16+0x40>
		pf();
    2b58:	e0 91 a4 03 	lds	r30, 0x03A4
    2b5c:	f0 91 a5 03 	lds	r31, 0x03A5
    2b60:	09 95       	icall
}
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	ff 91       	pop	r31
    2b68:	ef 91       	pop	r30
    2b6a:	bf 91       	pop	r27
    2b6c:	af 91       	pop	r26
    2b6e:	9f 91       	pop	r25
    2b70:	8f 91       	pop	r24
    2b72:	7f 91       	pop	r23
    2b74:	6f 91       	pop	r22
    2b76:	5f 91       	pop	r21
    2b78:	4f 91       	pop	r20
    2b7a:	3f 91       	pop	r19
    2b7c:	2f 91       	pop	r18
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	0f 90       	pop	r0
    2b84:	1f 90       	pop	r1
    2b86:	18 95       	reti

00002b88 <MQTT_Connect>:
B13: 0x00
B14: strlen(clientID)
B15 ...: clientID
 *
 * *********************************************************************************************************/
void MQTT_Connect(u8* clientID ){
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	c2 51       	subi	r28, 0x12	; 18
    2b92:	d1 40       	sbci	r29, 0x01	; 1
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	ef 5e       	subi	r30, 0xEF	; 239
    2ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	80 83       	st	Z, r24
	u8 NUM = strlen(clientID);
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ef 5e       	subi	r30, 0xEF	; 239
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    2bb6:	89 8b       	std	Y+17, r24	; 0x11
	u8 MQTT_ARR[255]; 					//MQTT_ARR[255]; we can put 255 instead of 14+num
	MQTT_ARR[0]=	0x10;				//Control Field -> Connect Command
    2bb8:	80 e1       	ldi	r24, 0x10	; 16
    2bba:	8a 8b       	std	Y+18, r24	; 0x12
	MQTT_ARR[1]=	(12+NUM);			//Remaining length
    2bbc:	89 89       	ldd	r24, Y+17	; 0x11
    2bbe:	84 5f       	subi	r24, 0xF4	; 244
    2bc0:	8b 8b       	std	Y+19, r24	; 0x13
	MQTT_ARR[2]=	0x00;
    2bc2:	1c 8a       	std	Y+20, r1	; 0x14
	MQTT_ARR[3]=	0x04;				//These two bits are length of the communication protocol
    2bc4:	84 e0       	ldi	r24, 0x04	; 4
    2bc6:	8d 8b       	std	Y+21, r24	; 0x15
	MQTT_ARR[4]=	'M';				//We are using MQTT
    2bc8:	8d e4       	ldi	r24, 0x4D	; 77
    2bca:	8e 8b       	std	Y+22, r24	; 0x16
	MQTT_ARR[5]=	'Q';
    2bcc:	81 e5       	ldi	r24, 0x51	; 81
    2bce:	8f 8b       	std	Y+23, r24	; 0x17
	MQTT_ARR[6]=	'T';
    2bd0:	84 e5       	ldi	r24, 0x54	; 84
    2bd2:	88 8f       	std	Y+24, r24	; 0x18
	MQTT_ARR[7]=	'T';
    2bd4:	84 e5       	ldi	r24, 0x54	; 84
    2bd6:	89 8f       	std	Y+25, r24	; 0x19
	MQTT_ARR[8]=	0x04;				//Protocol Level
    2bd8:	84 e0       	ldi	r24, 0x04	; 4
    2bda:	8a 8f       	std	Y+26, r24	; 0x1a
	MQTT_ARR[9]=	0x02;				//Connect Flag Byte
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	8b 8f       	std	Y+27, r24	; 0x1b
	MQTT_ARR[10]=	0xFF;				//Keep Alive -> Change HEX to DEC to know the life time of the
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	8c 8f       	std	Y+28, r24	; 0x1c
	MQTT_ARR[11]=	0xFF;				//Connection 0xFFFF -> 18 hours
    2be4:	8f ef       	ldi	r24, 0xFF	; 255
    2be6:	8d 8f       	std	Y+29, r24	; 0x1d
	MQTT_ARR[12]=	0x00;
    2be8:	1e 8e       	std	Y+30, r1	; 0x1e
	MQTT_ARR[13]=	NUM;				//Client length
    2bea:	89 89       	ldd	r24, Y+17	; 0x11
    2bec:	8f 8f       	std	Y+31, r24	; 0x1f

	for(u8 i=0; i<NUM;i++){
    2bee:	18 8a       	std	Y+16, r1	; 0x10
    2bf0:	1b c0       	rjmp	.+54     	; 0x2c28 <MQTT_Connect+0xa0>
		MQTT_ARR[14+i]=	clientID[i];
    2bf2:	88 89       	ldd	r24, Y+16	; 0x10
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	ac 01       	movw	r20, r24
    2bfa:	42 5f       	subi	r20, 0xF2	; 242
    2bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfe:	88 89       	ldd	r24, Y+16	; 0x10
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	fe 01       	movw	r30, r28
    2c06:	ef 5e       	subi	r30, 0xEF	; 239
    2c08:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	fc 01       	movw	r30, r24
    2c10:	e2 0f       	add	r30, r18
    2c12:	f3 1f       	adc	r31, r19
    2c14:	20 81       	ld	r18, Z
    2c16:	ce 01       	movw	r24, r28
    2c18:	42 96       	adiw	r24, 0x12	; 18
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	e4 0f       	add	r30, r20
    2c1e:	f5 1f       	adc	r31, r21
    2c20:	20 83       	st	Z, r18
	MQTT_ARR[10]=	0xFF;				//Keep Alive -> Change HEX to DEC to know the life time of the
	MQTT_ARR[11]=	0xFF;				//Connection 0xFFFF -> 18 hours
	MQTT_ARR[12]=	0x00;
	MQTT_ARR[13]=	NUM;				//Client length

	for(u8 i=0; i<NUM;i++){
    2c22:	88 89       	ldd	r24, Y+16	; 0x10
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	88 8b       	std	Y+16, r24	; 0x10
    2c28:	98 89       	ldd	r25, Y+16	; 0x10
    2c2a:	89 89       	ldd	r24, Y+17	; 0x11
    2c2c:	98 17       	cp	r25, r24
    2c2e:	08 f3       	brcs	.-62     	; 0x2bf2 <MQTT_Connect+0x6a>
		MQTT_ARR[14+i]=	clientID[i];
	}
/*Send Packet through UART*/
for(u8 i=0; i<(NUM+14);i++){
    2c30:	1f 86       	std	Y+15, r1	; 0x0f
    2c32:	80 c0       	rjmp	.+256    	; 0x2d34 <MQTT_Connect+0x1ac>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a0 e0       	ldi	r26, 0x00	; 0
    2c3a:	b0 e4       	ldi	r27, 0x40	; 64
    2c3c:	8b 87       	std	Y+11, r24	; 0x0b
    2c3e:	9c 87       	std	Y+12, r25	; 0x0c
    2c40:	ad 87       	std	Y+13, r26	; 0x0d
    2c42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	55 e4       	ldi	r21, 0x45	; 69
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8f 83       	std	Y+7, r24	; 0x07
    2c5e:	98 87       	std	Y+8, r25	; 0x08
    2c60:	a9 87       	std	Y+9, r26	; 0x09
    2c62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	2c f4       	brge	.+10     	; 0x2c86 <MQTT_Connect+0xfe>
		__ticks = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <MQTT_Connect+0x17c>
	else if (__tmp > 65535)
    2c86:	6f 81       	ldd	r22, Y+7	; 0x07
    2c88:	78 85       	ldd	r23, Y+8	; 0x08
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	4c f5       	brge	.+82     	; 0x2cf0 <MQTT_Connect+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <MQTT_Connect+0x15e>
    2cc8:	80 e9       	ldi	r24, 0x90	; 144
    2cca:	91 e0       	ldi	r25, 0x01	; 1
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <MQTT_Connect+0x14c>
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <MQTT_Connect+0x140>
    2cee:	14 c0       	rjmp	.+40     	; 0x2d18 <MQTT_Connect+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	9e 81       	ldd	r25, Y+6	; 0x06
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <MQTT_Connect+0x188>
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	UART_sendByte(MQTT_ARR[i]);
    2d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	ce 01       	movw	r24, r28
    2d20:	42 96       	adiw	r24, 0x12	; 18
    2d22:	fc 01       	movw	r30, r24
    2d24:	e2 0f       	add	r30, r18
    2d26:	f3 1f       	adc	r31, r19
    2d28:	80 81       	ld	r24, Z
    2d2a:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_sendByte>

	for(u8 i=0; i<NUM;i++){
		MQTT_ARR[14+i]=	clientID[i];
	}
/*Send Packet through UART*/
for(u8 i=0; i<(NUM+14);i++){
    2d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	8f 87       	std	Y+15, r24	; 0x0f
    2d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	89 89       	ldd	r24, Y+17	; 0x11
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 96       	adiw	r24, 0x0e	; 14
    2d42:	28 17       	cp	r18, r24
    2d44:	39 07       	cpc	r19, r25
    2d46:	0c f4       	brge	.+2      	; 0x2d4a <MQTT_Connect+0x1c2>
    2d48:	75 cf       	rjmp	.-278    	; 0x2c34 <MQTT_Connect+0xac>
	_delay_ms(2);
	UART_sendByte(MQTT_ARR[i]);
	}

}
    2d4a:	ce 5e       	subi	r28, 0xEE	; 238
    2d4c:	de 4f       	sbci	r29, 0xFE	; 254
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <MQTT_Publish>:
Bn: LSB of packID

Bn ...: total bytes of msg to len.
 *
 * ************************************************************************************************************/
void MQTT_Publish(u8* topic, u8* msg){
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	ad 97       	sbiw	r28, 0x2d	; 45
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	9d a3       	std	Y+37, r25	; 0x25
    2d74:	8c a3       	std	Y+36, r24	; 0x24
    2d76:	7f a3       	std	Y+39, r23	; 0x27
    2d78:	6e a3       	std	Y+38, r22	; 0x26
	for(u8 k=0;k<(6+Topic_len+msg_len);k++){
	_delay_ms(10);
	UART_sendByte(PUBLISH_ARRAY[k]);
	}

}
    2d7a:	2d b7       	in	r18, 0x3d	; 61
    2d7c:	3e b7       	in	r19, 0x3e	; 62
    2d7e:	3d a7       	std	Y+45, r19	; 0x2d
    2d80:	2c a7       	std	Y+44, r18	; 0x2c
Bn: LSB of packID

Bn ...: total bytes of msg to len.
 *
 * ************************************************************************************************************/
void MQTT_Publish(u8* topic, u8* msg){
    2d82:	8d b7       	in	r24, 0x3d	; 61
    2d84:	9e b7       	in	r25, 0x3e	; 62
    2d86:	99 a7       	std	Y+41, r25	; 0x29
    2d88:	88 a7       	std	Y+40, r24	; 0x28
	u8 Topic_len=(u8)strlen(topic);
    2d8a:	8c a1       	ldd	r24, Y+36	; 0x24
    2d8c:	9d a1       	ldd	r25, Y+37	; 0x25
    2d8e:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    2d92:	89 a3       	std	Y+33, r24	; 0x21
	u8 msg_len=(u8)strlen(msg);
    2d94:	8e a1       	ldd	r24, Y+38	; 0x26
    2d96:	9f a1       	ldd	r25, Y+39	; 0x27
    2d98:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    2d9c:	88 a3       	std	Y+32, r24	; 0x20
	u8 PUBLISH_ARRAY[6+Topic_len+msg_len]; 				//PUBLISH_ARRAY[6+msg_len+Topic_len];
    2d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9c 01       	movw	r18, r24
    2da6:	2a 5f       	subi	r18, 0xFA	; 250
    2da8:	3f 4f       	sbci	r19, 0xFF	; 255
    2daa:	88 a1       	ldd	r24, Y+32	; 0x20
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	82 0f       	add	r24, r18
    2db2:	93 1f       	adc	r25, r19
    2db4:	2d b7       	in	r18, 0x3d	; 61
    2db6:	3e b7       	in	r19, 0x3e	; 62
    2db8:	28 1b       	sub	r18, r24
    2dba:	39 0b       	sbc	r19, r25
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	3e bf       	out	0x3e, r19	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	2d bf       	out	0x3d, r18	; 61
    2dc6:	8d b7       	in	r24, 0x3d	; 61
    2dc8:	9e b7       	in	r25, 0x3e	; 62
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	9b a7       	std	Y+43, r25	; 0x2b
    2dce:	8a a7       	std	Y+42, r24	; 0x2a
    2dd0:	8a a5       	ldd	r24, Y+42	; 0x2a
    2dd2:	9b a5       	ldd	r25, Y+43	; 0x2b
    2dd4:	00 96       	adiw	r24, 0x00	; 0
    2dd6:	9b a7       	std	Y+43, r25	; 0x2b
    2dd8:	8a a7       	std	Y+42, r24	; 0x2a
    2dda:	2a a5       	ldd	r18, Y+42	; 0x2a
    2ddc:	3b a5       	ldd	r19, Y+43	; 0x2b
    2dde:	3b a3       	std	Y+35, r19	; 0x23
    2de0:	2a a3       	std	Y+34, r18	; 0x22
	u8 i=0;
    2de2:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 j=0;
    2de4:	1e 8e       	std	Y+30, r1	; 0x1e
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	a0 e2       	ldi	r26, 0x20	; 32
    2dec:	b1 e4       	ldi	r27, 0x41	; 65
    2dee:	89 8f       	std	Y+25, r24	; 0x19
    2df0:	9a 8f       	std	Y+26, r25	; 0x1a
    2df2:	ab 8f       	std	Y+27, r26	; 0x1b
    2df4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	69 8d       	ldd	r22, Y+25	; 0x19
    2df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	4a e7       	ldi	r20, 0x7A	; 122
    2e04:	55 e4       	ldi	r21, 0x45	; 69
    2e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8d 8b       	std	Y+21, r24	; 0x15
    2e10:	9e 8b       	std	Y+22, r25	; 0x16
    2e12:	af 8b       	std	Y+23, r26	; 0x17
    2e14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e16:	6d 89       	ldd	r22, Y+21	; 0x15
    2e18:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	2c f4       	brge	.+10     	; 0x2e38 <MQTT_Publish+0xda>
		__ticks = 1;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9c 8b       	std	Y+20, r25	; 0x14
    2e34:	8b 8b       	std	Y+19, r24	; 0x13
    2e36:	3f c0       	rjmp	.+126    	; 0x2eb6 <MQTT_Publish+0x158>
	else if (__tmp > 65535)
    2e38:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	3f ef       	ldi	r19, 0xFF	; 255
    2e44:	4f e7       	ldi	r20, 0x7F	; 127
    2e46:	57 e4       	ldi	r21, 0x47	; 71
    2e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e4c:	18 16       	cp	r1, r24
    2e4e:	4c f5       	brge	.+82     	; 0x2ea2 <MQTT_Publish+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e50:	69 8d       	ldd	r22, Y+25	; 0x19
    2e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9c 8b       	std	Y+20, r25	; 0x14
    2e76:	8b 8b       	std	Y+19, r24	; 0x13
    2e78:	0f c0       	rjmp	.+30     	; 0x2e98 <MQTT_Publish+0x13a>
    2e7a:	80 e9       	ldi	r24, 0x90	; 144
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	9a 8b       	std	Y+18, r25	; 0x12
    2e80:	89 8b       	std	Y+17, r24	; 0x11
    2e82:	89 89       	ldd	r24, Y+17	; 0x11
    2e84:	9a 89       	ldd	r25, Y+18	; 0x12
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <MQTT_Publish+0x128>
    2e8a:	9a 8b       	std	Y+18, r25	; 0x12
    2e8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e90:	9c 89       	ldd	r25, Y+20	; 0x14
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	9c 8b       	std	Y+20, r25	; 0x14
    2e96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e98:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	69 f7       	brne	.-38     	; 0x2e7a <MQTT_Publish+0x11c>
    2ea0:	14 c0       	rjmp	.+40     	; 0x2eca <MQTT_Publish+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9c 8b       	std	Y+20, r25	; 0x14
    2eb4:	8b 8b       	std	Y+19, r24	; 0x13
    2eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eba:	98 8b       	std	Y+16, r25	; 0x10
    2ebc:	8f 87       	std	Y+15, r24	; 0x0f
    2ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec0:	98 89       	ldd	r25, Y+16	; 0x10
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <MQTT_Publish+0x164>
    2ec6:	98 8b       	std	Y+16, r25	; 0x10
    2ec8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	PUBLISH_ARRAY[0]=0x30;								//Control Field -> Send Publish packet.
    2eca:	ea a1       	ldd	r30, Y+34	; 0x22
    2ecc:	fb a1       	ldd	r31, Y+35	; 0x23
    2ece:	80 e3       	ldi	r24, 0x30	; 48
    2ed0:	80 83       	st	Z, r24
	PUBLISH_ARRAY[1]=Topic_len+msg_len+4;				//Remaining length
    2ed2:	99 a1       	ldd	r25, Y+33	; 0x21
    2ed4:	88 a1       	ldd	r24, Y+32	; 0x20
    2ed6:	89 0f       	add	r24, r25
    2ed8:	8c 5f       	subi	r24, 0xFC	; 252
    2eda:	ea a1       	ldd	r30, Y+34	; 0x22
    2edc:	fb a1       	ldd	r31, Y+35	; 0x23
    2ede:	81 83       	std	Z+1, r24	; 0x01
	PUBLISH_ARRAY[2]=0x00;
    2ee0:	ea a1       	ldd	r30, Y+34	; 0x22
    2ee2:	fb a1       	ldd	r31, Y+35	; 0x23
    2ee4:	12 82       	std	Z+2, r1	; 0x02
	PUBLISH_ARRAY[3]= Topic_len;						//These two bits are for length of the topic
    2ee6:	ea a1       	ldd	r30, Y+34	; 0x22
    2ee8:	fb a1       	ldd	r31, Y+35	; 0x23
    2eea:	89 a1       	ldd	r24, Y+33	; 0x21
    2eec:	83 83       	std	Z+3, r24	; 0x03
//	_delay_ms(10);
	for(i=0;i<Topic_len;i++){
    2eee:	1f 8e       	std	Y+31, r1	; 0x1f
    2ef0:	18 c0       	rjmp	.+48     	; 0x2f22 <MQTT_Publish+0x1c4>
		PUBLISH_ARRAY[4+i]= topic[i];
    2ef2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ef4:	88 2f       	mov	r24, r24
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	ac 01       	movw	r20, r24
    2efa:	4c 5f       	subi	r20, 0xFC	; 252
    2efc:	5f 4f       	sbci	r21, 0xFF	; 255
    2efe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	8c a1       	ldd	r24, Y+36	; 0x24
    2f06:	9d a1       	ldd	r25, Y+37	; 0x25
    2f08:	fc 01       	movw	r30, r24
    2f0a:	e2 0f       	add	r30, r18
    2f0c:	f3 1f       	adc	r31, r19
    2f0e:	20 81       	ld	r18, Z
    2f10:	8a a1       	ldd	r24, Y+34	; 0x22
    2f12:	9b a1       	ldd	r25, Y+35	; 0x23
    2f14:	fc 01       	movw	r30, r24
    2f16:	e4 0f       	add	r30, r20
    2f18:	f5 1f       	adc	r31, r21
    2f1a:	20 83       	st	Z, r18
	PUBLISH_ARRAY[0]=0x30;								//Control Field -> Send Publish packet.
	PUBLISH_ARRAY[1]=Topic_len+msg_len+4;				//Remaining length
	PUBLISH_ARRAY[2]=0x00;
	PUBLISH_ARRAY[3]= Topic_len;						//These two bits are for length of the topic
//	_delay_ms(10);
	for(i=0;i<Topic_len;i++){
    2f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f1e:	8f 5f       	subi	r24, 0xFF	; 255
    2f20:	8f 8f       	std	Y+31, r24	; 0x1f
    2f22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f24:	89 a1       	ldd	r24, Y+33	; 0x21
    2f26:	98 17       	cp	r25, r24
    2f28:	20 f3       	brcs	.-56     	; 0x2ef2 <MQTT_Publish+0x194>
		PUBLISH_ARRAY[4+i]= topic[i];
	}

	PUBLISH_ARRAY[4+(i++)]=0x00;
    2f2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f2c:	88 2f       	mov	r24, r24
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9c 01       	movw	r18, r24
    2f32:	2c 5f       	subi	r18, 0xFC	; 252
    2f34:	3f 4f       	sbci	r19, 0xFF	; 255
    2f36:	8a a1       	ldd	r24, Y+34	; 0x22
    2f38:	9b a1       	ldd	r25, Y+35	; 0x23
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	e2 0f       	add	r30, r18
    2f3e:	f3 1f       	adc	r31, r19
    2f40:	10 82       	st	Z, r1
    2f42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f44:	8f 5f       	subi	r24, 0xFF	; 255
    2f46:	8f 8f       	std	Y+31, r24	; 0x1f
	PUBLISH_ARRAY[4+(i++)]=msg_len;						//These two bits are for length of the msg
    2f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f4a:	88 2f       	mov	r24, r24
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9c 01       	movw	r18, r24
    2f50:	2c 5f       	subi	r18, 0xFC	; 252
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	8a a1       	ldd	r24, Y+34	; 0x22
    2f56:	9b a1       	ldd	r25, Y+35	; 0x23
    2f58:	fc 01       	movw	r30, r24
    2f5a:	e2 0f       	add	r30, r18
    2f5c:	f3 1f       	adc	r31, r19
    2f5e:	88 a1       	ldd	r24, Y+32	; 0x20
    2f60:	80 83       	st	Z, r24
    2f62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f64:	8f 5f       	subi	r24, 0xFF	; 255
    2f66:	8f 8f       	std	Y+31, r24	; 0x1f
//	_delay_ms(10);

	for( j=0;j<msg_len;j++){
    2f68:	1e 8e       	std	Y+30, r1	; 0x1e
    2f6a:	1e c0       	rjmp	.+60     	; 0x2fa8 <MQTT_Publish+0x24a>
		PUBLISH_ARRAY[4+i+j]= msg[j];
    2f6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9c 01       	movw	r18, r24
    2f74:	2c 5f       	subi	r18, 0xFC	; 252
    2f76:	3f 4f       	sbci	r19, 0xFF	; 255
    2f78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f7a:	88 2f       	mov	r24, r24
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	a9 01       	movw	r20, r18
    2f80:	48 0f       	add	r20, r24
    2f82:	59 1f       	adc	r21, r25
    2f84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	8e a1       	ldd	r24, Y+38	; 0x26
    2f8c:	9f a1       	ldd	r25, Y+39	; 0x27
    2f8e:	fc 01       	movw	r30, r24
    2f90:	e2 0f       	add	r30, r18
    2f92:	f3 1f       	adc	r31, r19
    2f94:	20 81       	ld	r18, Z
    2f96:	8a a1       	ldd	r24, Y+34	; 0x22
    2f98:	9b a1       	ldd	r25, Y+35	; 0x23
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	e4 0f       	add	r30, r20
    2f9e:	f5 1f       	adc	r31, r21
    2fa0:	20 83       	st	Z, r18

	PUBLISH_ARRAY[4+(i++)]=0x00;
	PUBLISH_ARRAY[4+(i++)]=msg_len;						//These two bits are for length of the msg
//	_delay_ms(10);

	for( j=0;j<msg_len;j++){
    2fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	8e 8f       	std	Y+30, r24	; 0x1e
    2fa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2faa:	88 a1       	ldd	r24, Y+32	; 0x20
    2fac:	98 17       	cp	r25, r24
    2fae:	f0 f2       	brcs	.-68     	; 0x2f6c <MQTT_Publish+0x20e>
		PUBLISH_ARRAY[4+i+j]= msg[j];
		}

	/*Publish Packet through UART*/
	for(u8 k=0;k<(6+Topic_len+msg_len);k++){
    2fb0:	1d 8e       	std	Y+29, r1	; 0x1d
    2fb2:	80 c0       	rjmp	.+256    	; 0x30b4 <MQTT_Publish+0x356>
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	a0 e2       	ldi	r26, 0x20	; 32
    2fba:	b1 e4       	ldi	r27, 0x41	; 65
    2fbc:	8b 87       	std	Y+11, r24	; 0x0b
    2fbe:	9c 87       	std	Y+12, r25	; 0x0c
    2fc0:	ad 87       	std	Y+13, r26	; 0x0d
    2fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	4a e7       	ldi	r20, 0x7A	; 122
    2fd2:	55 e4       	ldi	r21, 0x45	; 69
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	8f 83       	std	Y+7, r24	; 0x07
    2fde:	98 87       	std	Y+8, r25	; 0x08
    2fe0:	a9 87       	std	Y+9, r26	; 0x09
    2fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe6:	78 85       	ldd	r23, Y+8	; 0x08
    2fe8:	89 85       	ldd	r24, Y+9	; 0x09
    2fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e8       	ldi	r20, 0x80	; 128
    2ff2:	5f e3       	ldi	r21, 0x3F	; 63
    2ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	2c f4       	brge	.+10     	; 0x3006 <MQTT_Publish+0x2a8>
		__ticks = 1;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	3f c0       	rjmp	.+126    	; 0x3084 <MQTT_Publish+0x326>
	else if (__tmp > 65535)
    3006:	6f 81       	ldd	r22, Y+7	; 0x07
    3008:	78 85       	ldd	r23, Y+8	; 0x08
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	4f e7       	ldi	r20, 0x7F	; 127
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301a:	18 16       	cp	r1, r24
    301c:	4c f5       	brge	.+82     	; 0x3070 <MQTT_Publish+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3020:	7c 85       	ldd	r23, Y+12	; 0x0c
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e2       	ldi	r20, 0x20	; 32
    302c:	51 e4       	ldi	r21, 0x41	; 65
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	0f c0       	rjmp	.+30     	; 0x3066 <MQTT_Publish+0x308>
    3048:	80 e9       	ldi	r24, 0x90	; 144
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	9c 83       	std	Y+4, r25	; 0x04
    304e:	8b 83       	std	Y+3, r24	; 0x03
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <MQTT_Publish+0x2f6>
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305c:	8d 81       	ldd	r24, Y+5	; 0x05
    305e:	9e 81       	ldd	r25, Y+6	; 0x06
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	69 f7       	brne	.-38     	; 0x3048 <MQTT_Publish+0x2ea>
    306e:	14 c0       	rjmp	.+40     	; 0x3098 <MQTT_Publish+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3070:	6f 81       	ldd	r22, Y+7	; 0x07
    3072:	78 85       	ldd	r23, Y+8	; 0x08
    3074:	89 85       	ldd	r24, Y+9	; 0x09
    3076:	9a 85       	ldd	r25, Y+10	; 0x0a
    3078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    3084:	8d 81       	ldd	r24, Y+5	; 0x05
    3086:	9e 81       	ldd	r25, Y+6	; 0x06
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <MQTT_Publish+0x332>
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	UART_sendByte(PUBLISH_ARRAY[k]);
    3098:	8d 8d       	ldd	r24, Y+29	; 0x1d
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	8a a1       	ldd	r24, Y+34	; 0x22
    30a0:	9b a1       	ldd	r25, Y+35	; 0x23
    30a2:	fc 01       	movw	r30, r24
    30a4:	e2 0f       	add	r30, r18
    30a6:	f3 1f       	adc	r31, r19
    30a8:	80 81       	ld	r24, Z
    30aa:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_sendByte>
	for( j=0;j<msg_len;j++){
		PUBLISH_ARRAY[4+i+j]= msg[j];
		}

	/*Publish Packet through UART*/
	for(u8 k=0;k<(6+Topic_len+msg_len);k++){
    30ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b0:	8f 5f       	subi	r24, 0xFF	; 255
    30b2:	8d 8f       	std	Y+29, r24	; 0x1d
    30b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b6:	48 2f       	mov	r20, r24
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	89 a1       	ldd	r24, Y+33	; 0x21
    30bc:	88 2f       	mov	r24, r24
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	9c 01       	movw	r18, r24
    30c2:	2a 5f       	subi	r18, 0xFA	; 250
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	88 a1       	ldd	r24, Y+32	; 0x20
    30c8:	88 2f       	mov	r24, r24
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	82 0f       	add	r24, r18
    30ce:	93 1f       	adc	r25, r19
    30d0:	48 17       	cp	r20, r24
    30d2:	59 07       	cpc	r21, r25
    30d4:	0c f4       	brge	.+2      	; 0x30d8 <MQTT_Publish+0x37a>
    30d6:	6e cf       	rjmp	.-292    	; 0x2fb4 <MQTT_Publish+0x256>
    30d8:	88 a5       	ldd	r24, Y+40	; 0x28
    30da:	99 a5       	ldd	r25, Y+41	; 0x29
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	9e bf       	out	0x3e, r25	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	8d bf       	out	0x3d, r24	; 61
	_delay_ms(10);
	UART_sendByte(PUBLISH_ARRAY[k]);
	}

}
    30e6:	2c a5       	ldd	r18, Y+44	; 0x2c
    30e8:	3d a5       	ldd	r19, Y+45	; 0x2d
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	3e bf       	out	0x3e, r19	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	2d bf       	out	0x3d, r18	; 61
    30f4:	ad 96       	adiw	r28, 0x2d	; 45
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <MQTT_Subscribe>:
 *we need to the call the connect function before we use it
 *it return data with uart interrupt
 *
 *
 * *********************************************************************************************************/
void MQTT_Subscribe(u8* topic){
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	2f 97       	sbiw	r28, 0x0f	; 15
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	99 87       	std	Y+9, r25	; 0x09
    311c:	88 87       	std	Y+8, r24	; 0x08
	for(j=0;j<arr_dis;j++){
		UART_sendByte(Sub_Arr[j]);
	}


}
    311e:	2d b7       	in	r18, 0x3d	; 61
    3120:	3e b7       	in	r19, 0x3e	; 62
    3122:	3f 87       	std	Y+15, r19	; 0x0f
    3124:	2e 87       	std	Y+14, r18	; 0x0e
 *we need to the call the connect function before we use it
 *it return data with uart interrupt
 *
 *
 * *********************************************************************************************************/
void MQTT_Subscribe(u8* topic){
    3126:	8d b7       	in	r24, 0x3d	; 61
    3128:	9e b7       	in	r25, 0x3e	; 62
    312a:	9b 87       	std	Y+11, r25	; 0x0b
    312c:	8a 87       	std	Y+10, r24	; 0x0a
	u8 i,j;
	u8 topic_len=strlen(topic);
    312e:	88 85       	ldd	r24, Y+8	; 0x08
    3130:	99 85       	ldd	r25, Y+9	; 0x09
    3132:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    3136:	8b 83       	std	Y+3, r24	; 0x03

	u8 Remaining_LEn=(topic_len+5);
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	8b 5f       	subi	r24, 0xFB	; 251
    313c:	8a 83       	std	Y+2, r24	; 0x02
	u8 arr_dis=topic_len+7;
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	89 5f       	subi	r24, 0xF9	; 249
    3142:	89 83       	std	Y+1, r24	; 0x01
	u8 Sub_Arr[arr_dis];
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	2d b7       	in	r18, 0x3d	; 61
    314c:	3e b7       	in	r19, 0x3e	; 62
    314e:	28 1b       	sub	r18, r24
    3150:	39 0b       	sbc	r19, r25
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	3e bf       	out	0x3e, r19	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	2d bf       	out	0x3d, r18	; 61
    315c:	8d b7       	in	r24, 0x3d	; 61
    315e:	9e b7       	in	r25, 0x3e	; 62
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	9d 87       	std	Y+13, r25	; 0x0d
    3164:	8c 87       	std	Y+12, r24	; 0x0c
    3166:	8c 85       	ldd	r24, Y+12	; 0x0c
    3168:	9d 85       	ldd	r25, Y+13	; 0x0d
    316a:	00 96       	adiw	r24, 0x00	; 0
    316c:	9d 87       	std	Y+13, r25	; 0x0d
    316e:	8c 87       	std	Y+12, r24	; 0x0c
    3170:	2c 85       	ldd	r18, Y+12	; 0x0c
    3172:	3d 85       	ldd	r19, Y+13	; 0x0d
    3174:	3f 83       	std	Y+7, r19	; 0x07
    3176:	2e 83       	std	Y+6, r18	; 0x06

	Sub_Arr[0]=0x82;										//control field
    3178:	ee 81       	ldd	r30, Y+6	; 0x06
    317a:	ff 81       	ldd	r31, Y+7	; 0x07
    317c:	82 e8       	ldi	r24, 0x82	; 130
    317e:	80 83       	st	Z, r24
	Sub_Arr[1]=Remaining_LEn;								//Remaining length
    3180:	ee 81       	ldd	r30, Y+6	; 0x06
    3182:	ff 81       	ldd	r31, Y+7	; 0x07
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	81 83       	std	Z+1, r24	; 0x01
	Sub_Arr[2]=0x00;
    3188:	ee 81       	ldd	r30, Y+6	; 0x06
    318a:	ff 81       	ldd	r31, Y+7	; 0x07
    318c:	12 82       	std	Z+2, r1	; 0x02
	Sub_Arr[3]=0x0A;
    318e:	ee 81       	ldd	r30, Y+6	; 0x06
    3190:	ff 81       	ldd	r31, Y+7	; 0x07
    3192:	8a e0       	ldi	r24, 0x0A	; 10
    3194:	83 83       	std	Z+3, r24	; 0x03
	Sub_Arr[4]=0x00;
    3196:	ee 81       	ldd	r30, Y+6	; 0x06
    3198:	ff 81       	ldd	r31, Y+7	; 0x07
    319a:	14 82       	std	Z+4, r1	; 0x04
	Sub_Arr[5]=topic_len;									//These two bits are for length of the topic
    319c:	ee 81       	ldd	r30, Y+6	; 0x06
    319e:	ff 81       	ldd	r31, Y+7	; 0x07
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	85 83       	std	Z+5, r24	; 0x05

	for(i=0;i<Sub_Arr[5];i++){
    31a4:	1d 82       	std	Y+5, r1	; 0x05
    31a6:	18 c0       	rjmp	.+48     	; 0x31d8 <MQTT_Subscribe+0xd2>
		Sub_Arr[6+i]=topic[i];
    31a8:	8d 81       	ldd	r24, Y+5	; 0x05
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	ac 01       	movw	r20, r24
    31b0:	4a 5f       	subi	r20, 0xFA	; 250
    31b2:	5f 4f       	sbci	r21, 0xFF	; 255
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	28 2f       	mov	r18, r24
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	88 85       	ldd	r24, Y+8	; 0x08
    31bc:	99 85       	ldd	r25, Y+9	; 0x09
    31be:	fc 01       	movw	r30, r24
    31c0:	e2 0f       	add	r30, r18
    31c2:	f3 1f       	adc	r31, r19
    31c4:	20 81       	ld	r18, Z
    31c6:	8e 81       	ldd	r24, Y+6	; 0x06
    31c8:	9f 81       	ldd	r25, Y+7	; 0x07
    31ca:	fc 01       	movw	r30, r24
    31cc:	e4 0f       	add	r30, r20
    31ce:	f5 1f       	adc	r31, r21
    31d0:	20 83       	st	Z, r18
	Sub_Arr[2]=0x00;
	Sub_Arr[3]=0x0A;
	Sub_Arr[4]=0x00;
	Sub_Arr[5]=topic_len;									//These two bits are for length of the topic

	for(i=0;i<Sub_Arr[5];i++){
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	ee 81       	ldd	r30, Y+6	; 0x06
    31da:	ff 81       	ldd	r31, Y+7	; 0x07
    31dc:	95 81       	ldd	r25, Z+5	; 0x05
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	89 17       	cp	r24, r25
    31e2:	10 f3       	brcs	.-60     	; 0x31a8 <MQTT_Subscribe+0xa2>
		Sub_Arr[6+i]=topic[i];
	}
	Sub_Arr[6+i]=0x00;										//Request QOS
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	88 2f       	mov	r24, r24
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9c 01       	movw	r18, r24
    31ec:	2a 5f       	subi	r18, 0xFA	; 250
    31ee:	3f 4f       	sbci	r19, 0xFF	; 255
    31f0:	8e 81       	ldd	r24, Y+6	; 0x06
    31f2:	9f 81       	ldd	r25, Y+7	; 0x07
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	10 82       	st	Z, r1

	for(j=0;j<arr_dis;j++){
    31fc:	1c 82       	std	Y+4, r1	; 0x04
    31fe:	0e c0       	rjmp	.+28     	; 0x321c <MQTT_Subscribe+0x116>
		UART_sendByte(Sub_Arr[j]);
    3200:	8c 81       	ldd	r24, Y+4	; 0x04
    3202:	28 2f       	mov	r18, r24
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	8e 81       	ldd	r24, Y+6	; 0x06
    3208:	9f 81       	ldd	r25, Y+7	; 0x07
    320a:	fc 01       	movw	r30, r24
    320c:	e2 0f       	add	r30, r18
    320e:	f3 1f       	adc	r31, r19
    3210:	80 81       	ld	r24, Z
    3212:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_sendByte>
	for(i=0;i<Sub_Arr[5];i++){
		Sub_Arr[6+i]=topic[i];
	}
	Sub_Arr[6+i]=0x00;										//Request QOS

	for(j=0;j<arr_dis;j++){
    3216:	8c 81       	ldd	r24, Y+4	; 0x04
    3218:	8f 5f       	subi	r24, 0xFF	; 255
    321a:	8c 83       	std	Y+4, r24	; 0x04
    321c:	9c 81       	ldd	r25, Y+4	; 0x04
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	98 17       	cp	r25, r24
    3222:	70 f3       	brcs	.-36     	; 0x3200 <MQTT_Subscribe+0xfa>
    3224:	8a 85       	ldd	r24, Y+10	; 0x0a
    3226:	9b 85       	ldd	r25, Y+11	; 0x0b
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	9e bf       	out	0x3e, r25	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	8d bf       	out	0x3d, r24	; 61
		UART_sendByte(Sub_Arr[j]);
	}


}
    3232:	2e 85       	ldd	r18, Y+14	; 0x0e
    3234:	3f 85       	ldd	r19, Y+15	; 0x0f
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	3e bf       	out	0x3e, r19	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	2d bf       	out	0x3d, r18	; 61
    3240:	2f 96       	adiw	r28, 0x0f	; 15
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <H_LM35_void_init>:
#include "STD_TYPES.h"
#include "ADC_int.h"

extern const ADC_config_type ADC_conf_LM35;
void H_LM35_void_init(void)
{
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
	M_ADC_Init(&ADC_conf_LM35);
    325a:	8a e3       	ldi	r24, 0x3A	; 58
    325c:	93 e0       	ldi	r25, 0x03	; 3
    325e:	0e 94 12 14 	call	0x2824	; 0x2824 <M_ADC_Init>
}
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	08 95       	ret

00003268 <H_LM35_s16_getTemp>:

s16 H_LM35_s16_getTemp(void)
{
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	00 d0       	rcall	.+0      	; 0x326e <H_LM35_s16_getTemp+0x6>
    326e:	00 d0       	rcall	.+0      	; 0x3270 <H_LM35_s16_getTemp+0x8>
    3270:	00 d0       	rcall	.+0      	; 0x3272 <H_LM35_s16_getTemp+0xa>
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
	s16 temp = M_ADC_getDigitalValueSynchNonBlocking(ADC_conf_LM35.id);
    3276:	80 91 3d 03 	lds	r24, 0x033D
    327a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <M_ADC_getDigitalValueSynchNonBlocking>
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	89 83       	std	Y+1, r24	; 0x01
//	M_ADC_voidSetChannel(0);
	if ((temp * 500) % 256 > 128)
    3282:	29 81       	ldd	r18, Y+1	; 0x01
    3284:	3a 81       	ldd	r19, Y+2	; 0x02
    3286:	84 ef       	ldi	r24, 0xF4	; 244
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	ac 01       	movw	r20, r24
    328c:	24 9f       	mul	r18, r20
    328e:	c0 01       	movw	r24, r0
    3290:	25 9f       	mul	r18, r21
    3292:	90 0d       	add	r25, r0
    3294:	34 9f       	mul	r19, r20
    3296:	90 0d       	add	r25, r0
    3298:	11 24       	eor	r1, r1
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	31 e0       	ldi	r19, 0x01	; 1
    329e:	b9 01       	movw	r22, r18
    32a0:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__divmodhi4>
    32a4:	81 38       	cpi	r24, 0x81	; 129
    32a6:	91 05       	cpc	r25, r1
    32a8:	14 f1       	brlt	.+68     	; 0x32ee <H_LM35_s16_getTemp+0x86>
	{
		temp = temp * 500 / 256 + 1;
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	9a 81       	ldd	r25, Y+2	; 0x02
    32ae:	24 ef       	ldi	r18, 0xF4	; 244
    32b0:	31 e0       	ldi	r19, 0x01	; 1
    32b2:	ac 01       	movw	r20, r24
    32b4:	42 9f       	mul	r20, r18
    32b6:	c0 01       	movw	r24, r0
    32b8:	43 9f       	mul	r20, r19
    32ba:	90 0d       	add	r25, r0
    32bc:	52 9f       	mul	r21, r18
    32be:	90 0d       	add	r25, r0
    32c0:	11 24       	eor	r1, r1
    32c2:	9c 83       	std	Y+4, r25	; 0x04
    32c4:	8b 83       	std	Y+3, r24	; 0x03
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ca:	99 23       	and	r25, r25
    32cc:	34 f4       	brge	.+12     	; 0x32da <H_LM35_s16_getTemp+0x72>
    32ce:	2b 81       	ldd	r18, Y+3	; 0x03
    32d0:	3c 81       	ldd	r19, Y+4	; 0x04
    32d2:	21 50       	subi	r18, 0x01	; 1
    32d4:	3f 4f       	sbci	r19, 0xFF	; 255
    32d6:	3c 83       	std	Y+4, r19	; 0x04
    32d8:	2b 83       	std	Y+3, r18	; 0x03
    32da:	4b 81       	ldd	r20, Y+3	; 0x03
    32dc:	5c 81       	ldd	r21, Y+4	; 0x04
    32de:	85 2f       	mov	r24, r21
    32e0:	99 27       	eor	r25, r25
    32e2:	87 fd       	sbrc	r24, 7
    32e4:	9a 95       	dec	r25
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	20 c0       	rjmp	.+64     	; 0x332e <H_LM35_s16_getTemp+0xc6>
	}
	else
		temp = temp * 500 / 256;
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	24 ef       	ldi	r18, 0xF4	; 244
    32f4:	31 e0       	ldi	r19, 0x01	; 1
    32f6:	ac 01       	movw	r20, r24
    32f8:	42 9f       	mul	r20, r18
    32fa:	c0 01       	movw	r24, r0
    32fc:	43 9f       	mul	r20, r19
    32fe:	90 0d       	add	r25, r0
    3300:	52 9f       	mul	r21, r18
    3302:	90 0d       	add	r25, r0
    3304:	11 24       	eor	r1, r1
    3306:	9e 83       	std	Y+6, r25	; 0x06
    3308:	8d 83       	std	Y+5, r24	; 0x05
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	9e 81       	ldd	r25, Y+6	; 0x06
    330e:	99 23       	and	r25, r25
    3310:	34 f4       	brge	.+12     	; 0x331e <H_LM35_s16_getTemp+0xb6>
    3312:	2d 81       	ldd	r18, Y+5	; 0x05
    3314:	3e 81       	ldd	r19, Y+6	; 0x06
    3316:	21 50       	subi	r18, 0x01	; 1
    3318:	3f 4f       	sbci	r19, 0xFF	; 255
    331a:	3e 83       	std	Y+6, r19	; 0x06
    331c:	2d 83       	std	Y+5, r18	; 0x05
    331e:	4d 81       	ldd	r20, Y+5	; 0x05
    3320:	5e 81       	ldd	r21, Y+6	; 0x06
    3322:	85 2f       	mov	r24, r21
    3324:	99 27       	eor	r25, r25
    3326:	87 fd       	sbrc	r24, 7
    3328:	9a 95       	dec	r25
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	89 83       	std	Y+1, r24	; 0x01

	return temp;
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3332:	26 96       	adiw	r28, 0x06	; 6
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <H_LED_voidPWM_int>:
#include "LED_priv.h"
#include "LED_cfg.h"
#include "LED_int.h"
extern const TIMER1_SETTINGS_CONFIG TIMER1_SETTINGS_INIT;
void H_LED_voidPWM_int(void)
{
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Timer_Init(&TIMER1_SETTINGS_INIT);
    334c:	82 e7       	ldi	r24, 0x72	; 114
    334e:	93 e0       	ldi	r25, 0x03	; 3
    3350:	0e 94 26 08 	call	0x104c	; 0x104c <M_TIMER1_void_Timer_Init>
	H_LED_void_turnOFF();
    3354:	0e 94 c9 19 	call	0x3392	; 0x3392 <H_LED_void_turnOFF>
}
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	08 95       	ret

0000335e <H_LED_voidSetLedIntesity>:

void H_LED_voidSetLedIntesity(u8 duty)
{
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	0f 92       	push	r0
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	89 83       	std	Y+1, r24	; 0x01
	M_TIMER1_void_setFastPWM(5000, duty);
    336a:	68 e8       	ldi	r22, 0x88	; 136
    336c:	73 e1       	ldi	r23, 0x13	; 19
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	49 81       	ldd	r20, Y+1	; 0x01
    3374:	0e 94 7e 09 	call	0x12fc	; 0x12fc <M_TIMER1_void_setFastPWM>
}
    3378:	0f 90       	pop	r0
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <H_LED_void_turnON>:
void H_LED_void_turnON()
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Timer_start();
    3388:	0e 94 96 08 	call	0x112c	; 0x112c <M_TIMER1_void_Timer_start>
}
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <H_LED_void_turnOFF>:

void H_LED_void_turnOFF()
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_setFastPWM(5000, 0);
    339a:	68 e8       	ldi	r22, 0x88	; 136
    339c:	73 e1       	ldi	r23, 0x13	; 19
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	40 e0       	ldi	r20, 0x00	; 0
    33a4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <M_TIMER1_void_setFastPWM>
}
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	08 95       	ret

000033ae <H_LDR_voidInit>:
#include "LDR_int.h"

extern const ADC_config_type ADC_conf_LDR;

void H_LDR_voidInit(void)
{
    33ae:	df 93       	push	r29
    33b0:	cf 93       	push	r28
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
	M_ADC_Init(&ADC_conf_LDR);
    33b6:	80 e4       	ldi	r24, 0x40	; 64
    33b8:	93 e0       	ldi	r25, 0x03	; 3
    33ba:	0e 94 12 14 	call	0x2824	; 0x2824 <M_ADC_Init>
}
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <H_LDR_u8GetLighteningValue>:

u8 H_LDR_u8GetLighteningValue(void)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <H_LDR_u8GetLighteningValue+0x6>
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
	s16 value = M_ADC_getDigitalValueSynchNonBlocking(ADC_conf_LDR.id);
    33ce:	80 91 43 03 	lds	r24, 0x0343
    33d2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <M_ADC_getDigitalValueSynchNonBlocking>
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
//	M_ADC_voidSetChannel(1);
	return value;
    33da:	89 81       	ldd	r24, Y+1	; 0x01
}
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <latch>:
#include "LCD_int.h"

//static u8 row = 0, col = 0;			u may use them to fix ur location

static void latch(u8 data)
{
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	cd 54       	subi	r28, 0x4D	; 77
    33f4:	d0 40       	sbci	r29, 0x00	; 0
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	fe 01       	movw	r30, r28
    3402:	e3 5b       	subi	r30, 0xB3	; 179
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	80 83       	st	Z, r24
#if LCD_4BIT_MODE == 1
	M_Dio_void_setPinValue(LCD_D7, GET_BIT(data, 7));
    3408:	fe 01       	movw	r30, r28
    340a:	e3 5b       	subi	r30, 0xB3	; 179
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	80 81       	ld	r24, Z
    3410:	98 2f       	mov	r25, r24
    3412:	99 1f       	adc	r25, r25
    3414:	99 27       	eor	r25, r25
    3416:	99 1f       	adc	r25, r25
    3418:	88 e1       	ldi	r24, 0x18	; 24
    341a:	69 2f       	mov	r22, r25
    341c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6, GET_BIT(data, 6));
    3420:	fe 01       	movw	r30, r28
    3422:	e3 5b       	subi	r30, 0xB3	; 179
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	80 81       	ld	r24, Z
    3428:	82 95       	swap	r24
    342a:	86 95       	lsr	r24
    342c:	86 95       	lsr	r24
    342e:	83 70       	andi	r24, 0x03	; 3
    3430:	98 2f       	mov	r25, r24
    3432:	91 70       	andi	r25, 0x01	; 1
    3434:	86 e1       	ldi	r24, 0x16	; 22
    3436:	69 2f       	mov	r22, r25
    3438:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5, GET_BIT(data, 5));
    343c:	fe 01       	movw	r30, r28
    343e:	e3 5b       	subi	r30, 0xB3	; 179
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	82 95       	swap	r24
    3446:	86 95       	lsr	r24
    3448:	87 70       	andi	r24, 0x07	; 7
    344a:	98 2f       	mov	r25, r24
    344c:	91 70       	andi	r25, 0x01	; 1
    344e:	85 e1       	ldi	r24, 0x15	; 21
    3450:	69 2f       	mov	r22, r25
    3452:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D4, GET_BIT(data, 4));
    3456:	fe 01       	movw	r30, r28
    3458:	e3 5b       	subi	r30, 0xB3	; 179
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	82 95       	swap	r24
    3460:	8f 70       	andi	r24, 0x0F	; 15
    3462:	98 2f       	mov	r25, r24
    3464:	91 70       	andi	r25, 0x01	; 1
    3466:	84 e1       	ldi	r24, 0x14	; 20
    3468:	69 2f       	mov	r22, r25
    346a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(LCD_EN, DIO_HIGH);
    346e:	8c e0       	ldi	r24, 0x0C	; 12
    3470:	61 e0       	ldi	r22, 0x01	; 1
    3472:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
    3476:	fe 01       	movw	r30, r28
    3478:	e7 5b       	subi	r30, 0xB7	; 183
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	aa e7       	ldi	r26, 0x7A	; 122
    3482:	b4 e4       	ldi	r27, 0x44	; 68
    3484:	80 83       	st	Z, r24
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	a2 83       	std	Z+2, r26	; 0x02
    348a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    348c:	8e 01       	movw	r16, r28
    348e:	0b 5b       	subi	r16, 0xBB	; 187
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	fe 01       	movw	r30, r28
    3494:	e7 5b       	subi	r30, 0xB7	; 183
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	2b ea       	ldi	r18, 0xAB	; 171
    34a2:	3a ea       	ldi	r19, 0xAA	; 170
    34a4:	4a ea       	ldi	r20, 0xAA	; 170
    34a6:	50 e4       	ldi	r21, 0x40	; 64
    34a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	f8 01       	movw	r30, r16
    34b2:	80 83       	st	Z, r24
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	a2 83       	std	Z+2, r26	; 0x02
    34b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ba:	fe 01       	movw	r30, r28
    34bc:	eb 5b       	subi	r30, 0xBB	; 187
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e8       	ldi	r20, 0x80	; 128
    34ce:	5f e3       	ldi	r21, 0x3F	; 63
    34d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d4:	88 23       	and	r24, r24
    34d6:	34 f4       	brge	.+12     	; 0x34e4 <latch+0xfe>
		__ticks = 1;
    34d8:	fe 01       	movw	r30, r28
    34da:	ec 5b       	subi	r30, 0xBC	; 188
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	80 83       	st	Z, r24
    34e2:	a7 c0       	rjmp	.+334    	; 0x3632 <latch+0x24c>
	else if (__tmp > 255)
    34e4:	fe 01       	movw	r30, r28
    34e6:	eb 5b       	subi	r30, 0xBB	; 187
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	53 e4       	ldi	r21, 0x43	; 67
    34fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	0c f0       	brlt	.+2      	; 0x3504 <latch+0x11e>
    3502:	87 c0       	rjmp	.+270    	; 0x3612 <latch+0x22c>
	{
		_delay_ms(__us / 1000.0);
    3504:	fe 01       	movw	r30, r28
    3506:	e7 5b       	subi	r30, 0xB7	; 183
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a e7       	ldi	r20, 0x7A	; 122
    3518:	54 e4       	ldi	r21, 0x44	; 68
    351a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	fe 01       	movw	r30, r28
    3524:	e0 5c       	subi	r30, 0xC0	; 192
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 83       	st	Z, r24
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	a2 83       	std	Z+2, r26	; 0x02
    352e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3530:	fe 01       	movw	r30, r28
    3532:	e0 5c       	subi	r30, 0xC0	; 192
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a e7       	ldi	r20, 0x7A	; 122
    3544:	55 e4       	ldi	r21, 0x45	; 69
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8c af       	std	Y+60, r24	; 0x3c
    3550:	9d af       	std	Y+61, r25	; 0x3d
    3552:	ae af       	std	Y+62, r26	; 0x3e
    3554:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    3556:	6c ad       	ldd	r22, Y+60	; 0x3c
    3558:	7d ad       	ldd	r23, Y+61	; 0x3d
    355a:	8e ad       	ldd	r24, Y+62	; 0x3e
    355c:	9f ad       	ldd	r25, Y+63	; 0x3f
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356a:	88 23       	and	r24, r24
    356c:	2c f4       	brge	.+10     	; 0x3578 <latch+0x192>
		__ticks = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9b af       	std	Y+59, r25	; 0x3b
    3574:	8a af       	std	Y+58, r24	; 0x3a
    3576:	42 c0       	rjmp	.+132    	; 0x35fc <latch+0x216>
	else if (__tmp > 65535)
    3578:	6c ad       	ldd	r22, Y+60	; 0x3c
    357a:	7d ad       	ldd	r23, Y+61	; 0x3d
    357c:	8e ad       	ldd	r24, Y+62	; 0x3e
    357e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	64 f5       	brge	.+88     	; 0x35e8 <latch+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	fe 01       	movw	r30, r28
    3592:	e0 5c       	subi	r30, 0xC0	; 192
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e2       	ldi	r20, 0x20	; 32
    35a4:	51 e4       	ldi	r21, 0x41	; 65
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	9b af       	std	Y+59, r25	; 0x3b
    35bc:	8a af       	std	Y+58, r24	; 0x3a
    35be:	0f c0       	rjmp	.+30     	; 0x35de <latch+0x1f8>
    35c0:	80 e9       	ldi	r24, 0x90	; 144
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	99 af       	std	Y+57, r25	; 0x39
    35c6:	88 af       	std	Y+56, r24	; 0x38
    35c8:	88 ad       	ldd	r24, Y+56	; 0x38
    35ca:	99 ad       	ldd	r25, Y+57	; 0x39
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <latch+0x1e6>
    35d0:	99 af       	std	Y+57, r25	; 0x39
    35d2:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    35d6:	9b ad       	ldd	r25, Y+59	; 0x3b
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	9b af       	std	Y+59, r25	; 0x3b
    35dc:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35de:	8a ad       	ldd	r24, Y+58	; 0x3a
    35e0:	9b ad       	ldd	r25, Y+59	; 0x3b
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	69 f7       	brne	.-38     	; 0x35c0 <latch+0x1da>
    35e6:	2e c0       	rjmp	.+92     	; 0x3644 <latch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    35ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    35ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    35ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9b af       	std	Y+59, r25	; 0x3b
    35fa:	8a af       	std	Y+58, r24	; 0x3a
    35fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    35fe:	9b ad       	ldd	r25, Y+59	; 0x3b
    3600:	9f ab       	std	Y+55, r25	; 0x37
    3602:	8e ab       	std	Y+54, r24	; 0x36
    3604:	8e a9       	ldd	r24, Y+54	; 0x36
    3606:	9f a9       	ldd	r25, Y+55	; 0x37
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	f1 f7       	brne	.-4      	; 0x3608 <latch+0x222>
    360c:	9f ab       	std	Y+55, r25	; 0x37
    360e:	8e ab       	std	Y+54, r24	; 0x36
    3610:	19 c0       	rjmp	.+50     	; 0x3644 <latch+0x25e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3612:	8e 01       	movw	r16, r28
    3614:	0c 5b       	subi	r16, 0xBC	; 188
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	eb 5b       	subi	r30, 0xBB	; 187
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	f8 01       	movw	r30, r16
    3630:	80 83       	st	Z, r24
    3632:	fe 01       	movw	r30, r28
    3634:	ec 5b       	subi	r30, 0xBC	; 188
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	80 81       	ld	r24, Z
    363a:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    363c:	8d a9       	ldd	r24, Y+53	; 0x35
    363e:	8a 95       	dec	r24
    3640:	f1 f7       	brne	.-4      	; 0x363e <latch+0x258>
    3642:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(1000);
	M_Dio_void_setPinValue(LCD_EN, DIO_LOW);
    3644:	8c e0       	ldi	r24, 0x0C	; 12
    3646:	60 e0       	ldi	r22, 0x00	; 0
    3648:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	a0 ea       	ldi	r26, 0xA0	; 160
    3652:	b0 e4       	ldi	r27, 0x40	; 64
    3654:	89 ab       	std	Y+49, r24	; 0x31
    3656:	9a ab       	std	Y+50, r25	; 0x32
    3658:	ab ab       	std	Y+51, r26	; 0x33
    365a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365c:	69 a9       	ldd	r22, Y+49	; 0x31
    365e:	7a a9       	ldd	r23, Y+50	; 0x32
    3660:	8b a9       	ldd	r24, Y+51	; 0x33
    3662:	9c a9       	ldd	r25, Y+52	; 0x34
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	4a e7       	ldi	r20, 0x7A	; 122
    366a:	55 e4       	ldi	r21, 0x45	; 69
    366c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	8d a7       	std	Y+45, r24	; 0x2d
    3676:	9e a7       	std	Y+46, r25	; 0x2e
    3678:	af a7       	std	Y+47, r26	; 0x2f
    367a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    367c:	6d a5       	ldd	r22, Y+45	; 0x2d
    367e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3680:	8f a5       	ldd	r24, Y+47	; 0x2f
    3682:	98 a9       	ldd	r25, Y+48	; 0x30
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e8       	ldi	r20, 0x80	; 128
    368a:	5f e3       	ldi	r21, 0x3F	; 63
    368c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3690:	88 23       	and	r24, r24
    3692:	2c f4       	brge	.+10     	; 0x369e <latch+0x2b8>
		__ticks = 1;
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	9c a7       	std	Y+44, r25	; 0x2c
    369a:	8b a7       	std	Y+43, r24	; 0x2b
    369c:	3f c0       	rjmp	.+126    	; 0x371c <latch+0x336>
	else if (__tmp > 65535)
    369e:	6d a5       	ldd	r22, Y+45	; 0x2d
    36a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    36a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a4:	98 a9       	ldd	r25, Y+48	; 0x30
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	3f ef       	ldi	r19, 0xFF	; 255
    36aa:	4f e7       	ldi	r20, 0x7F	; 127
    36ac:	57 e4       	ldi	r21, 0x47	; 71
    36ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b2:	18 16       	cp	r1, r24
    36b4:	4c f5       	brge	.+82     	; 0x3708 <latch+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b6:	69 a9       	ldd	r22, Y+49	; 0x31
    36b8:	7a a9       	ldd	r23, Y+50	; 0x32
    36ba:	8b a9       	ldd	r24, Y+51	; 0x33
    36bc:	9c a9       	ldd	r25, Y+52	; 0x34
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	40 e2       	ldi	r20, 0x20	; 32
    36c4:	51 e4       	ldi	r21, 0x41	; 65
    36c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	bc 01       	movw	r22, r24
    36d0:	cd 01       	movw	r24, r26
    36d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	9c a7       	std	Y+44, r25	; 0x2c
    36dc:	8b a7       	std	Y+43, r24	; 0x2b
    36de:	0f c0       	rjmp	.+30     	; 0x36fe <latch+0x318>
    36e0:	80 e9       	ldi	r24, 0x90	; 144
    36e2:	91 e0       	ldi	r25, 0x01	; 1
    36e4:	9a a7       	std	Y+42, r25	; 0x2a
    36e6:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36e8:	89 a5       	ldd	r24, Y+41	; 0x29
    36ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	f1 f7       	brne	.-4      	; 0x36ec <latch+0x306>
    36f0:	9a a7       	std	Y+42, r25	; 0x2a
    36f2:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	9c a7       	std	Y+44, r25	; 0x2c
    36fc:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3700:	9c a5       	ldd	r25, Y+44	; 0x2c
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	69 f7       	brne	.-38     	; 0x36e0 <latch+0x2fa>
    3706:	14 c0       	rjmp	.+40     	; 0x3730 <latch+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3708:	6d a5       	ldd	r22, Y+45	; 0x2d
    370a:	7e a5       	ldd	r23, Y+46	; 0x2e
    370c:	8f a5       	ldd	r24, Y+47	; 0x2f
    370e:	98 a9       	ldd	r25, Y+48	; 0x30
    3710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	9c a7       	std	Y+44, r25	; 0x2c
    371a:	8b a7       	std	Y+43, r24	; 0x2b
    371c:	8b a5       	ldd	r24, Y+43	; 0x2b
    371e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3720:	98 a7       	std	Y+40, r25	; 0x28
    3722:	8f a3       	std	Y+39, r24	; 0x27
    3724:	8f a1       	ldd	r24, Y+39	; 0x27
    3726:	98 a5       	ldd	r25, Y+40	; 0x28
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <latch+0x342>
    372c:	98 a7       	std	Y+40, r25	; 0x28
    372e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(5);
	M_Dio_void_setPinValue(LCD_D7, GET_BIT(data, 3));
    3730:	fe 01       	movw	r30, r28
    3732:	e3 5b       	subi	r30, 0xB3	; 179
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	86 95       	lsr	r24
    373a:	86 95       	lsr	r24
    373c:	86 95       	lsr	r24
    373e:	98 2f       	mov	r25, r24
    3740:	91 70       	andi	r25, 0x01	; 1
    3742:	88 e1       	ldi	r24, 0x18	; 24
    3744:	69 2f       	mov	r22, r25
    3746:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6, GET_BIT(data, 2));
    374a:	fe 01       	movw	r30, r28
    374c:	e3 5b       	subi	r30, 0xB3	; 179
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	86 95       	lsr	r24
    3754:	86 95       	lsr	r24
    3756:	98 2f       	mov	r25, r24
    3758:	91 70       	andi	r25, 0x01	; 1
    375a:	86 e1       	ldi	r24, 0x16	; 22
    375c:	69 2f       	mov	r22, r25
    375e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5, GET_BIT(data, 1));
    3762:	fe 01       	movw	r30, r28
    3764:	e3 5b       	subi	r30, 0xB3	; 179
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	86 95       	lsr	r24
    376c:	98 2f       	mov	r25, r24
    376e:	91 70       	andi	r25, 0x01	; 1
    3770:	85 e1       	ldi	r24, 0x15	; 21
    3772:	69 2f       	mov	r22, r25
    3774:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D4, GET_BIT(data, 0));
    3778:	fe 01       	movw	r30, r28
    377a:	e3 5b       	subi	r30, 0xB3	; 179
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	98 2f       	mov	r25, r24
    3782:	91 70       	andi	r25, 0x01	; 1
    3784:	84 e1       	ldi	r24, 0x14	; 20
    3786:	69 2f       	mov	r22, r25
    3788:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(LCD_EN, DIO_HIGH);
    378c:	8c e0       	ldi	r24, 0x0C	; 12
    378e:	61 e0       	ldi	r22, 0x01	; 1
    3790:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	aa e7       	ldi	r26, 0x7A	; 122
    379a:	b4 e4       	ldi	r27, 0x44	; 68
    379c:	8b a3       	std	Y+35, r24	; 0x23
    379e:	9c a3       	std	Y+36, r25	; 0x24
    37a0:	ad a3       	std	Y+37, r26	; 0x25
    37a2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37a4:	6b a1       	ldd	r22, Y+35	; 0x23
    37a6:	7c a1       	ldd	r23, Y+36	; 0x24
    37a8:	8d a1       	ldd	r24, Y+37	; 0x25
    37aa:	9e a1       	ldd	r25, Y+38	; 0x26
    37ac:	2b ea       	ldi	r18, 0xAB	; 171
    37ae:	3a ea       	ldi	r19, 0xAA	; 170
    37b0:	4a ea       	ldi	r20, 0xAA	; 170
    37b2:	50 e4       	ldi	r21, 0x40	; 64
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	8f 8f       	std	Y+31, r24	; 0x1f
    37be:	98 a3       	std	Y+32, r25	; 0x20
    37c0:	a9 a3       	std	Y+33, r26	; 0x21
    37c2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    37c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37c6:	78 a1       	ldd	r23, Y+32	; 0x20
    37c8:	89 a1       	ldd	r24, Y+33	; 0x21
    37ca:	9a a1       	ldd	r25, Y+34	; 0x22
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e8       	ldi	r20, 0x80	; 128
    37d2:	5f e3       	ldi	r21, 0x3F	; 63
    37d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d8:	88 23       	and	r24, r24
    37da:	1c f4       	brge	.+6      	; 0x37e2 <latch+0x3fc>
		__ticks = 1;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	8e 8f       	std	Y+30, r24	; 0x1e
    37e0:	91 c0       	rjmp	.+290    	; 0x3904 <latch+0x51e>
	else if (__tmp > 255)
    37e2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37e4:	78 a1       	ldd	r23, Y+32	; 0x20
    37e6:	89 a1       	ldd	r24, Y+33	; 0x21
    37e8:	9a a1       	ldd	r25, Y+34	; 0x22
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	4f e7       	ldi	r20, 0x7F	; 127
    37f0:	53 e4       	ldi	r21, 0x43	; 67
    37f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f6:	18 16       	cp	r1, r24
    37f8:	0c f0       	brlt	.+2      	; 0x37fc <latch+0x416>
    37fa:	7b c0       	rjmp	.+246    	; 0x38f2 <latch+0x50c>
	{
		_delay_ms(__us / 1000.0);
    37fc:	6b a1       	ldd	r22, Y+35	; 0x23
    37fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3800:	8d a1       	ldd	r24, Y+37	; 0x25
    3802:	9e a1       	ldd	r25, Y+38	; 0x26
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	4a e7       	ldi	r20, 0x7A	; 122
    380a:	54 e4       	ldi	r21, 0x44	; 68
    380c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	8a 8f       	std	Y+26, r24	; 0x1a
    3816:	9b 8f       	std	Y+27, r25	; 0x1b
    3818:	ac 8f       	std	Y+28, r26	; 0x1c
    381a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    381e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3820:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3822:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	4a e7       	ldi	r20, 0x7A	; 122
    382a:	55 e4       	ldi	r21, 0x45	; 69
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	8e 8b       	std	Y+22, r24	; 0x16
    3836:	9f 8b       	std	Y+23, r25	; 0x17
    3838:	a8 8f       	std	Y+24, r26	; 0x18
    383a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    383c:	6e 89       	ldd	r22, Y+22	; 0x16
    383e:	7f 89       	ldd	r23, Y+23	; 0x17
    3840:	88 8d       	ldd	r24, Y+24	; 0x18
    3842:	99 8d       	ldd	r25, Y+25	; 0x19
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e8       	ldi	r20, 0x80	; 128
    384a:	5f e3       	ldi	r21, 0x3F	; 63
    384c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3850:	88 23       	and	r24, r24
    3852:	2c f4       	brge	.+10     	; 0x385e <latch+0x478>
		__ticks = 1;
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	9d 8b       	std	Y+21, r25	; 0x15
    385a:	8c 8b       	std	Y+20, r24	; 0x14
    385c:	3f c0       	rjmp	.+126    	; 0x38dc <latch+0x4f6>
	else if (__tmp > 65535)
    385e:	6e 89       	ldd	r22, Y+22	; 0x16
    3860:	7f 89       	ldd	r23, Y+23	; 0x17
    3862:	88 8d       	ldd	r24, Y+24	; 0x18
    3864:	99 8d       	ldd	r25, Y+25	; 0x19
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	3f ef       	ldi	r19, 0xFF	; 255
    386a:	4f e7       	ldi	r20, 0x7F	; 127
    386c:	57 e4       	ldi	r21, 0x47	; 71
    386e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3872:	18 16       	cp	r1, r24
    3874:	4c f5       	brge	.+82     	; 0x38c8 <latch+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3876:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3878:	7b 8d       	ldd	r23, Y+27	; 0x1b
    387a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    387c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e2       	ldi	r20, 0x20	; 32
    3884:	51 e4       	ldi	r21, 0x41	; 65
    3886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	bc 01       	movw	r22, r24
    3890:	cd 01       	movw	r24, r26
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	9d 8b       	std	Y+21, r25	; 0x15
    389c:	8c 8b       	std	Y+20, r24	; 0x14
    389e:	0f c0       	rjmp	.+30     	; 0x38be <latch+0x4d8>
    38a0:	80 e9       	ldi	r24, 0x90	; 144
    38a2:	91 e0       	ldi	r25, 0x01	; 1
    38a4:	9b 8b       	std	Y+19, r25	; 0x13
    38a6:	8a 8b       	std	Y+18, r24	; 0x12
    38a8:	8a 89       	ldd	r24, Y+18	; 0x12
    38aa:	9b 89       	ldd	r25, Y+19	; 0x13
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <latch+0x4c6>
    38b0:	9b 8b       	std	Y+19, r25	; 0x13
    38b2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b4:	8c 89       	ldd	r24, Y+20	; 0x14
    38b6:	9d 89       	ldd	r25, Y+21	; 0x15
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	9d 8b       	std	Y+21, r25	; 0x15
    38bc:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38be:	8c 89       	ldd	r24, Y+20	; 0x14
    38c0:	9d 89       	ldd	r25, Y+21	; 0x15
    38c2:	00 97       	sbiw	r24, 0x00	; 0
    38c4:	69 f7       	brne	.-38     	; 0x38a0 <latch+0x4ba>
    38c6:	24 c0       	rjmp	.+72     	; 0x3910 <latch+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c8:	6e 89       	ldd	r22, Y+22	; 0x16
    38ca:	7f 89       	ldd	r23, Y+23	; 0x17
    38cc:	88 8d       	ldd	r24, Y+24	; 0x18
    38ce:	99 8d       	ldd	r25, Y+25	; 0x19
    38d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	9d 8b       	std	Y+21, r25	; 0x15
    38da:	8c 8b       	std	Y+20, r24	; 0x14
    38dc:	8c 89       	ldd	r24, Y+20	; 0x14
    38de:	9d 89       	ldd	r25, Y+21	; 0x15
    38e0:	99 8b       	std	Y+17, r25	; 0x11
    38e2:	88 8b       	std	Y+16, r24	; 0x10
    38e4:	88 89       	ldd	r24, Y+16	; 0x10
    38e6:	99 89       	ldd	r25, Y+17	; 0x11
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <latch+0x502>
    38ec:	99 8b       	std	Y+17, r25	; 0x11
    38ee:	88 8b       	std	Y+16, r24	; 0x10
    38f0:	0f c0       	rjmp	.+30     	; 0x3910 <latch+0x52a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38f4:	78 a1       	ldd	r23, Y+32	; 0x20
    38f6:	89 a1       	ldd	r24, Y+33	; 0x21
    38f8:	9a a1       	ldd	r25, Y+34	; 0x22
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	8e 8f       	std	Y+30, r24	; 0x1e
    3904:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3906:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3908:	8f 85       	ldd	r24, Y+15	; 0x0f
    390a:	8a 95       	dec	r24
    390c:	f1 f7       	brne	.-4      	; 0x390a <latch+0x524>
    390e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1000);
	M_Dio_void_setPinValue(LCD_EN, DIO_LOW);
    3910:	8c e0       	ldi	r24, 0x0C	; 12
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	a0 ea       	ldi	r26, 0xA0	; 160
    391e:	b0 e4       	ldi	r27, 0x40	; 64
    3920:	8b 87       	std	Y+11, r24	; 0x0b
    3922:	9c 87       	std	Y+12, r25	; 0x0c
    3924:	ad 87       	std	Y+13, r26	; 0x0d
    3926:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3928:	6b 85       	ldd	r22, Y+11	; 0x0b
    392a:	7c 85       	ldd	r23, Y+12	; 0x0c
    392c:	8d 85       	ldd	r24, Y+13	; 0x0d
    392e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	4a e7       	ldi	r20, 0x7A	; 122
    3936:	55 e4       	ldi	r21, 0x45	; 69
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	8f 83       	std	Y+7, r24	; 0x07
    3942:	98 87       	std	Y+8, r25	; 0x08
    3944:	a9 87       	std	Y+9, r26	; 0x09
    3946:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3948:	6f 81       	ldd	r22, Y+7	; 0x07
    394a:	78 85       	ldd	r23, Y+8	; 0x08
    394c:	89 85       	ldd	r24, Y+9	; 0x09
    394e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	5f e3       	ldi	r21, 0x3F	; 63
    3958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395c:	88 23       	and	r24, r24
    395e:	2c f4       	brge	.+10     	; 0x396a <latch+0x584>
		__ticks = 1;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	8d 83       	std	Y+5, r24	; 0x05
    3968:	3f c0       	rjmp	.+126    	; 0x39e8 <latch+0x602>
	else if (__tmp > 65535)
    396a:	6f 81       	ldd	r22, Y+7	; 0x07
    396c:	78 85       	ldd	r23, Y+8	; 0x08
    396e:	89 85       	ldd	r24, Y+9	; 0x09
    3970:	9a 85       	ldd	r25, Y+10	; 0x0a
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	3f ef       	ldi	r19, 0xFF	; 255
    3976:	4f e7       	ldi	r20, 0x7F	; 127
    3978:	57 e4       	ldi	r21, 0x47	; 71
    397a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397e:	18 16       	cp	r1, r24
    3980:	4c f5       	brge	.+82     	; 0x39d4 <latch+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3982:	6b 85       	ldd	r22, Y+11	; 0x0b
    3984:	7c 85       	ldd	r23, Y+12	; 0x0c
    3986:	8d 85       	ldd	r24, Y+13	; 0x0d
    3988:	9e 85       	ldd	r25, Y+14	; 0x0e
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e2       	ldi	r20, 0x20	; 32
    3990:	51 e4       	ldi	r21, 0x41	; 65
    3992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	9e 83       	std	Y+6, r25	; 0x06
    39a8:	8d 83       	std	Y+5, r24	; 0x05
    39aa:	0f c0       	rjmp	.+30     	; 0x39ca <latch+0x5e4>
    39ac:	80 e9       	ldi	r24, 0x90	; 144
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	9c 83       	std	Y+4, r25	; 0x04
    39b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39b4:	8b 81       	ldd	r24, Y+3	; 0x03
    39b6:	9c 81       	ldd	r25, Y+4	; 0x04
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <latch+0x5d2>
    39bc:	9c 83       	std	Y+4, r25	; 0x04
    39be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c0:	8d 81       	ldd	r24, Y+5	; 0x05
    39c2:	9e 81       	ldd	r25, Y+6	; 0x06
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ca:	8d 81       	ldd	r24, Y+5	; 0x05
    39cc:	9e 81       	ldd	r25, Y+6	; 0x06
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	69 f7       	brne	.-38     	; 0x39ac <latch+0x5c6>
    39d2:	14 c0       	rjmp	.+40     	; 0x39fc <latch+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d4:	6f 81       	ldd	r22, Y+7	; 0x07
    39d6:	78 85       	ldd	r23, Y+8	; 0x08
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	9a 85       	ldd	r25, Y+10	; 0x0a
    39dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	9e 83       	std	Y+6, r25	; 0x06
    39e6:	8d 83       	std	Y+5, r24	; 0x05
    39e8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ea:	9e 81       	ldd	r25, Y+6	; 0x06
    39ec:	9a 83       	std	Y+2, r25	; 0x02
    39ee:	89 83       	std	Y+1, r24	; 0x01
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	9a 81       	ldd	r25, Y+2	; 0x02
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	f1 f7       	brne	.-4      	; 0x39f4 <latch+0x60e>
    39f8:	9a 83       	std	Y+2, r25	; 0x02
    39fa:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(LCD_EN, DIO_HIGH);
	_delay_us(1000);
	M_Dio_void_setPinValue(LCD_EN, DIO_LOW);

#endif
}
    39fc:	c3 5b       	subi	r28, 0xB3	; 179
    39fe:	df 4f       	sbci	r29, 0xFF	; 255
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	cf 91       	pop	r28
    3a0c:	df 91       	pop	r29
    3a0e:	1f 91       	pop	r17
    3a10:	0f 91       	pop	r16
    3a12:	08 95       	ret

00003a14 <H_LCD_void_Init>:

void H_LCD_void_Init(void)
{
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
    3a1c:	e4 97       	sbiw	r28, 0x34	; 52
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	de bf       	out	0x3e, r29	; 62
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	cd bf       	out	0x3d, r28	; 61
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	a0 ef       	ldi	r26, 0xF0	; 240
    3a2e:	b1 e4       	ldi	r27, 0x41	; 65
    3a30:	89 ab       	std	Y+49, r24	; 0x31
    3a32:	9a ab       	std	Y+50, r25	; 0x32
    3a34:	ab ab       	std	Y+51, r26	; 0x33
    3a36:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a38:	69 a9       	ldd	r22, Y+49	; 0x31
    3a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	4a e7       	ldi	r20, 0x7A	; 122
    3a46:	55 e4       	ldi	r21, 0x45	; 69
    3a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	8d a7       	std	Y+45, r24	; 0x2d
    3a52:	9e a7       	std	Y+46, r25	; 0x2e
    3a54:	af a7       	std	Y+47, r26	; 0x2f
    3a56:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3a58:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a5a:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e8       	ldi	r20, 0x80	; 128
    3a66:	5f e3       	ldi	r21, 0x3F	; 63
    3a68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a6c:	88 23       	and	r24, r24
    3a6e:	2c f4       	brge	.+10     	; 0x3a7a <H_LCD_void_Init+0x66>
		__ticks = 1;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9c a7       	std	Y+44, r25	; 0x2c
    3a76:	8b a7       	std	Y+43, r24	; 0x2b
    3a78:	3f c0       	rjmp	.+126    	; 0x3af8 <H_LCD_void_Init+0xe4>
	else if (__tmp > 65535)
    3a7a:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a7c:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a80:	98 a9       	ldd	r25, Y+48	; 0x30
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	3f ef       	ldi	r19, 0xFF	; 255
    3a86:	4f e7       	ldi	r20, 0x7F	; 127
    3a88:	57 e4       	ldi	r21, 0x47	; 71
    3a8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a8e:	18 16       	cp	r1, r24
    3a90:	4c f5       	brge	.+82     	; 0x3ae4 <H_LCD_void_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a92:	69 a9       	ldd	r22, Y+49	; 0x31
    3a94:	7a a9       	ldd	r23, Y+50	; 0x32
    3a96:	8b a9       	ldd	r24, Y+51	; 0x33
    3a98:	9c a9       	ldd	r25, Y+52	; 0x34
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e2       	ldi	r20, 0x20	; 32
    3aa0:	51 e4       	ldi	r21, 0x41	; 65
    3aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9c a7       	std	Y+44, r25	; 0x2c
    3ab8:	8b a7       	std	Y+43, r24	; 0x2b
    3aba:	0f c0       	rjmp	.+30     	; 0x3ada <H_LCD_void_Init+0xc6>
    3abc:	80 e9       	ldi	r24, 0x90	; 144
    3abe:	91 e0       	ldi	r25, 0x01	; 1
    3ac0:	9a a7       	std	Y+42, r25	; 0x2a
    3ac2:	89 a7       	std	Y+41, r24	; 0x29
    3ac4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ac6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <H_LCD_void_Init+0xb4>
    3acc:	9a a7       	std	Y+42, r25	; 0x2a
    3ace:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	9c a7       	std	Y+44, r25	; 0x2c
    3ad8:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ada:	8b a5       	ldd	r24, Y+43	; 0x2b
    3adc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	69 f7       	brne	.-38     	; 0x3abc <H_LCD_void_Init+0xa8>
    3ae2:	14 c0       	rjmp	.+40     	; 0x3b0c <H_LCD_void_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae4:	6d a5       	ldd	r22, Y+45	; 0x2d
    3ae6:	7e a5       	ldd	r23, Y+46	; 0x2e
    3ae8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aea:	98 a9       	ldd	r25, Y+48	; 0x30
    3aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	9c a7       	std	Y+44, r25	; 0x2c
    3af6:	8b a7       	std	Y+43, r24	; 0x2b
    3af8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3afa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3afc:	98 a7       	std	Y+40, r25	; 0x28
    3afe:	8f a3       	std	Y+39, r24	; 0x27
    3b00:	8f a1       	ldd	r24, Y+39	; 0x27
    3b02:	98 a5       	ldd	r25, Y+40	; 0x28
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	f1 f7       	brne	.-4      	; 0x3b04 <H_LCD_void_Init+0xf0>
    3b08:	98 a7       	std	Y+40, r25	; 0x28
    3b0a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(30);
	M_Dio_void_setPinValue(LCD_RS, DIO_LOW);
    3b0c:	8d e0       	ldi	r24, 0x0D	; 13
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
#if LCD_4BIT_MODE == 1
	H_LCD_void_sendCommand(0b00100010);
    3b14:	82 e2       	ldi	r24, 0x22	; 34
    3b16:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>

	M_Dio_void_setPinValue(LCD_D7, 1);
    3b1a:	88 e1       	ldi	r24, 0x18	; 24
    3b1c:	61 e0       	ldi	r22, 0x01	; 1
    3b1e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6, 0);
    3b22:	86 e1       	ldi	r24, 0x16	; 22
    3b24:	60 e0       	ldi	r22, 0x00	; 0
    3b26:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(LCD_EN, DIO_HIGH);
    3b2a:	8c e0       	ldi	r24, 0x0C	; 12
    3b2c:	61 e0       	ldi	r22, 0x01	; 1
    3b2e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	aa e7       	ldi	r26, 0x7A	; 122
    3b38:	b4 e4       	ldi	r27, 0x44	; 68
    3b3a:	8b a3       	std	Y+35, r24	; 0x23
    3b3c:	9c a3       	std	Y+36, r25	; 0x24
    3b3e:	ad a3       	std	Y+37, r26	; 0x25
    3b40:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b42:	6b a1       	ldd	r22, Y+35	; 0x23
    3b44:	7c a1       	ldd	r23, Y+36	; 0x24
    3b46:	8d a1       	ldd	r24, Y+37	; 0x25
    3b48:	9e a1       	ldd	r25, Y+38	; 0x26
    3b4a:	2b ea       	ldi	r18, 0xAB	; 171
    3b4c:	3a ea       	ldi	r19, 0xAA	; 170
    3b4e:	4a ea       	ldi	r20, 0xAA	; 170
    3b50:	50 e4       	ldi	r21, 0x40	; 64
    3b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	8f 8f       	std	Y+31, r24	; 0x1f
    3b5c:	98 a3       	std	Y+32, r25	; 0x20
    3b5e:	a9 a3       	std	Y+33, r26	; 0x21
    3b60:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3b62:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3b64:	78 a1       	ldd	r23, Y+32	; 0x20
    3b66:	89 a1       	ldd	r24, Y+33	; 0x21
    3b68:	9a a1       	ldd	r25, Y+34	; 0x22
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e8       	ldi	r20, 0x80	; 128
    3b70:	5f e3       	ldi	r21, 0x3F	; 63
    3b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b76:	88 23       	and	r24, r24
    3b78:	1c f4       	brge	.+6      	; 0x3b80 <H_LCD_void_Init+0x16c>
		__ticks = 1;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	8e 8f       	std	Y+30, r24	; 0x1e
    3b7e:	91 c0       	rjmp	.+290    	; 0x3ca2 <H_LCD_void_Init+0x28e>
	else if (__tmp > 255)
    3b80:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3b82:	78 a1       	ldd	r23, Y+32	; 0x20
    3b84:	89 a1       	ldd	r24, Y+33	; 0x21
    3b86:	9a a1       	ldd	r25, Y+34	; 0x22
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	4f e7       	ldi	r20, 0x7F	; 127
    3b8e:	53 e4       	ldi	r21, 0x43	; 67
    3b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b94:	18 16       	cp	r1, r24
    3b96:	0c f0       	brlt	.+2      	; 0x3b9a <H_LCD_void_Init+0x186>
    3b98:	7b c0       	rjmp	.+246    	; 0x3c90 <H_LCD_void_Init+0x27c>
	{
		_delay_ms(__us / 1000.0);
    3b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	4a e7       	ldi	r20, 0x7A	; 122
    3ba8:	54 e4       	ldi	r21, 0x44	; 68
    3baa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	8a 8f       	std	Y+26, r24	; 0x1a
    3bb4:	9b 8f       	std	Y+27, r25	; 0x1b
    3bb6:	ac 8f       	std	Y+28, r26	; 0x1c
    3bb8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3bbc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3bbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bc0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a e7       	ldi	r20, 0x7A	; 122
    3bc8:	55 e4       	ldi	r21, 0x45	; 69
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	8e 8b       	std	Y+22, r24	; 0x16
    3bd4:	9f 8b       	std	Y+23, r25	; 0x17
    3bd6:	a8 8f       	std	Y+24, r26	; 0x18
    3bd8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3bda:	6e 89       	ldd	r22, Y+22	; 0x16
    3bdc:	7f 89       	ldd	r23, Y+23	; 0x17
    3bde:	88 8d       	ldd	r24, Y+24	; 0x18
    3be0:	99 8d       	ldd	r25, Y+25	; 0x19
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	2c f4       	brge	.+10     	; 0x3bfc <H_LCD_void_Init+0x1e8>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	9d 8b       	std	Y+21, r25	; 0x15
    3bf8:	8c 8b       	std	Y+20, r24	; 0x14
    3bfa:	3f c0       	rjmp	.+126    	; 0x3c7a <H_LCD_void_Init+0x266>
	else if (__tmp > 65535)
    3bfc:	6e 89       	ldd	r22, Y+22	; 0x16
    3bfe:	7f 89       	ldd	r23, Y+23	; 0x17
    3c00:	88 8d       	ldd	r24, Y+24	; 0x18
    3c02:	99 8d       	ldd	r25, Y+25	; 0x19
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	3f ef       	ldi	r19, 0xFF	; 255
    3c08:	4f e7       	ldi	r20, 0x7F	; 127
    3c0a:	57 e4       	ldi	r21, 0x47	; 71
    3c0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c10:	18 16       	cp	r1, r24
    3c12:	4c f5       	brge	.+82     	; 0x3c66 <H_LCD_void_Init+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c14:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3c16:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3c18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e2       	ldi	r20, 0x20	; 32
    3c22:	51 e4       	ldi	r21, 0x41	; 65
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9d 8b       	std	Y+21, r25	; 0x15
    3c3a:	8c 8b       	std	Y+20, r24	; 0x14
    3c3c:	0f c0       	rjmp	.+30     	; 0x3c5c <H_LCD_void_Init+0x248>
    3c3e:	80 e9       	ldi	r24, 0x90	; 144
    3c40:	91 e0       	ldi	r25, 0x01	; 1
    3c42:	9b 8b       	std	Y+19, r25	; 0x13
    3c44:	8a 8b       	std	Y+18, r24	; 0x12
    3c46:	8a 89       	ldd	r24, Y+18	; 0x12
    3c48:	9b 89       	ldd	r25, Y+19	; 0x13
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <H_LCD_void_Init+0x236>
    3c4e:	9b 8b       	std	Y+19, r25	; 0x13
    3c50:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c52:	8c 89       	ldd	r24, Y+20	; 0x14
    3c54:	9d 89       	ldd	r25, Y+21	; 0x15
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	9d 8b       	std	Y+21, r25	; 0x15
    3c5a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5c:	8c 89       	ldd	r24, Y+20	; 0x14
    3c5e:	9d 89       	ldd	r25, Y+21	; 0x15
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	69 f7       	brne	.-38     	; 0x3c3e <H_LCD_void_Init+0x22a>
    3c64:	24 c0       	rjmp	.+72     	; 0x3cae <H_LCD_void_Init+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c66:	6e 89       	ldd	r22, Y+22	; 0x16
    3c68:	7f 89       	ldd	r23, Y+23	; 0x17
    3c6a:	88 8d       	ldd	r24, Y+24	; 0x18
    3c6c:	99 8d       	ldd	r25, Y+25	; 0x19
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	9d 8b       	std	Y+21, r25	; 0x15
    3c78:	8c 8b       	std	Y+20, r24	; 0x14
    3c7a:	8c 89       	ldd	r24, Y+20	; 0x14
    3c7c:	9d 89       	ldd	r25, Y+21	; 0x15
    3c7e:	99 8b       	std	Y+17, r25	; 0x11
    3c80:	88 8b       	std	Y+16, r24	; 0x10
    3c82:	88 89       	ldd	r24, Y+16	; 0x10
    3c84:	99 89       	ldd	r25, Y+17	; 0x11
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <H_LCD_void_Init+0x272>
    3c8a:	99 8b       	std	Y+17, r25	; 0x11
    3c8c:	88 8b       	std	Y+16, r24	; 0x10
    3c8e:	0f c0       	rjmp	.+30     	; 0x3cae <H_LCD_void_Init+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c90:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3c92:	78 a1       	ldd	r23, Y+32	; 0x20
    3c94:	89 a1       	ldd	r24, Y+33	; 0x21
    3c96:	9a a1       	ldd	r25, Y+34	; 0x22
    3c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	8e 8f       	std	Y+30, r24	; 0x1e
    3ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ca4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ca8:	8a 95       	dec	r24
    3caa:	f1 f7       	brne	.-4      	; 0x3ca8 <H_LCD_void_Init+0x294>
    3cac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1000);
	M_Dio_void_setPinValue(LCD_EN, DIO_LOW);
    3cae:	8c e0       	ldi	r24, 0x0C	; 12
    3cb0:	60 e0       	ldi	r22, 0x00	; 0
    3cb2:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	a0 ea       	ldi	r26, 0xA0	; 160
    3cbc:	b0 e4       	ldi	r27, 0x40	; 64
    3cbe:	8b 87       	std	Y+11, r24	; 0x0b
    3cc0:	9c 87       	std	Y+12, r25	; 0x0c
    3cc2:	ad 87       	std	Y+13, r26	; 0x0d
    3cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	4a e7       	ldi	r20, 0x7A	; 122
    3cd4:	55 e4       	ldi	r21, 0x45	; 69
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	8f 83       	std	Y+7, r24	; 0x07
    3ce0:	98 87       	std	Y+8, r25	; 0x08
    3ce2:	a9 87       	std	Y+9, r26	; 0x09
    3ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce8:	78 85       	ldd	r23, Y+8	; 0x08
    3cea:	89 85       	ldd	r24, Y+9	; 0x09
    3cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e8       	ldi	r20, 0x80	; 128
    3cf4:	5f e3       	ldi	r21, 0x3F	; 63
    3cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cfa:	88 23       	and	r24, r24
    3cfc:	2c f4       	brge	.+10     	; 0x3d08 <H_LCD_void_Init+0x2f4>
		__ticks = 1;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	9e 83       	std	Y+6, r25	; 0x06
    3d04:	8d 83       	std	Y+5, r24	; 0x05
    3d06:	3f c0       	rjmp	.+126    	; 0x3d86 <H_LCD_void_Init+0x372>
	else if (__tmp > 65535)
    3d08:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0a:	78 85       	ldd	r23, Y+8	; 0x08
    3d0c:	89 85       	ldd	r24, Y+9	; 0x09
    3d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	3f ef       	ldi	r19, 0xFF	; 255
    3d14:	4f e7       	ldi	r20, 0x7F	; 127
    3d16:	57 e4       	ldi	r21, 0x47	; 71
    3d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d1c:	18 16       	cp	r1, r24
    3d1e:	4c f5       	brge	.+82     	; 0x3d72 <H_LCD_void_Init+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	40 e2       	ldi	r20, 0x20	; 32
    3d2e:	51 e4       	ldi	r21, 0x41	; 65
    3d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	bc 01       	movw	r22, r24
    3d3a:	cd 01       	movw	r24, r26
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9e 83       	std	Y+6, r25	; 0x06
    3d46:	8d 83       	std	Y+5, r24	; 0x05
    3d48:	0f c0       	rjmp	.+30     	; 0x3d68 <H_LCD_void_Init+0x354>
    3d4a:	80 e9       	ldi	r24, 0x90	; 144
    3d4c:	91 e0       	ldi	r25, 0x01	; 1
    3d4e:	9c 83       	std	Y+4, r25	; 0x04
    3d50:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d52:	8b 81       	ldd	r24, Y+3	; 0x03
    3d54:	9c 81       	ldd	r25, Y+4	; 0x04
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <H_LCD_void_Init+0x342>
    3d5a:	9c 83       	std	Y+4, r25	; 0x04
    3d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d60:	9e 81       	ldd	r25, Y+6	; 0x06
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	9e 83       	std	Y+6, r25	; 0x06
    3d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d68:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	69 f7       	brne	.-38     	; 0x3d4a <H_LCD_void_Init+0x336>
    3d70:	14 c0       	rjmp	.+40     	; 0x3d9a <H_LCD_void_Init+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d72:	6f 81       	ldd	r22, Y+7	; 0x07
    3d74:	78 85       	ldd	r23, Y+8	; 0x08
    3d76:	89 85       	ldd	r24, Y+9	; 0x09
    3d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	9e 83       	std	Y+6, r25	; 0x06
    3d84:	8d 83       	std	Y+5, r24	; 0x05
    3d86:	8d 81       	ldd	r24, Y+5	; 0x05
    3d88:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8a:	9a 83       	std	Y+2, r25	; 0x02
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	9a 81       	ldd	r25, Y+2	; 0x02
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <H_LCD_void_Init+0x37e>
    3d96:	9a 83       	std	Y+2, r25	; 0x02
    3d98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#else
	H_LCD_void_sendCommand(0x18);
#endif
	H_LCD_void_sendCommand(0x0F);
    3d9a:	8f e0       	ldi	r24, 0x0F	; 15
    3d9c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x01);
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x02);
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
//	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
}
    3dac:	e4 96       	adiw	r28, 0x34	; 52
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	f8 94       	cli
    3db2:	de bf       	out	0x3e, r29	; 62
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	cd bf       	out	0x3d, r28	; 61
    3db8:	cf 91       	pop	r28
    3dba:	df 91       	pop	r29
    3dbc:	08 95       	ret

00003dbe <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    3dbe:	df 93       	push	r29
    3dc0:	cf 93       	push	r28
    3dc2:	0f 92       	push	r0
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(LCD_RS, DIO_LOW);
    3dca:	8d e0       	ldi	r24, 0x0D	; 13
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	latch(copy_u8command);
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <latch>
}
    3dd8:	0f 90       	pop	r0
    3dda:	cf 91       	pop	r28
    3ddc:	df 91       	pop	r29
    3dde:	08 95       	ret

00003de0 <H_LCD_void_sendData>:

void H_LCD_void_sendData(u8 copy_u8data )
{
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	0f 92       	push	r0
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
    3dea:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(LCD_RS, DIO_HIGH);
    3dec:	8d e0       	ldi	r24, 0x0D	; 13
    3dee:	61 e0       	ldi	r22, 0x01	; 1
    3df0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <M_Dio_void_setPinValue>
	latch(copy_u8data);
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <latch>
}
    3dfa:	0f 90       	pop	r0
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	08 95       	ret

00003e02 <H_LCD_void_sendString>:

void H_LCD_void_sendString(const s8 * pstr)
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	00 d0       	rcall	.+0      	; 0x3e08 <H_LCD_void_sendString+0x6>
    3e08:	cd b7       	in	r28, 0x3d	; 61
    3e0a:	de b7       	in	r29, 0x3e	; 62
    3e0c:	9a 83       	std	Y+2, r25	; 0x02
    3e0e:	89 83       	std	Y+1, r24	; 0x01
    3e10:	0a c0       	rjmp	.+20     	; 0x3e26 <H_LCD_void_sendString+0x24>
	while(*pstr != '\0')
	{
		H_LCD_void_sendData(*pstr);
    3e12:	e9 81       	ldd	r30, Y+1	; 0x01
    3e14:	fa 81       	ldd	r31, Y+2	; 0x02
    3e16:	80 81       	ld	r24, Z
    3e18:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <H_LCD_void_sendData>
		pstr++;
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e20:	01 96       	adiw	r24, 0x01	; 1
    3e22:	9a 83       	std	Y+2, r25	; 0x02
    3e24:	89 83       	std	Y+1, r24	; 0x01
	latch(copy_u8data);
}

void H_LCD_void_sendString(const s8 * pstr)
{
	while(*pstr != '\0')
    3e26:	e9 81       	ldd	r30, Y+1	; 0x01
    3e28:	fa 81       	ldd	r31, Y+2	; 0x02
    3e2a:	80 81       	ld	r24, Z
    3e2c:	88 23       	and	r24, r24
    3e2e:	89 f7       	brne	.-30     	; 0x3e12 <H_LCD_void_sendString+0x10>
	{
		H_LCD_void_sendData(*pstr);
		pstr++;
	}
}
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	08 95       	ret

00003e3a <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	df 93       	push	r29
    3e40:	cf 93       	push	r28
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	64 97       	sbiw	r28, 0x14	; 20
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	69 8b       	std	Y+17, r22	; 0x11
    3e54:	7a 8b       	std	Y+18, r23	; 0x12
    3e56:	8b 8b       	std	Y+19, r24	; 0x13
    3e58:	9c 8b       	std	Y+20, r25	; 0x14
	u8 numOfDigits = 0, i = 0;
    3e5a:	1e 82       	std	Y+6, r1	; 0x06
    3e5c:	1d 82       	std	Y+5, r1	; 0x05
	s8 num[10];
	if (copy_s32Num == 0)
    3e5e:	89 89       	ldd	r24, Y+17	; 0x11
    3e60:	9a 89       	ldd	r25, Y+18	; 0x12
    3e62:	ab 89       	ldd	r26, Y+19	; 0x13
    3e64:	bc 89       	ldd	r27, Y+20	; 0x14
    3e66:	00 97       	sbiw	r24, 0x00	; 0
    3e68:	a1 05       	cpc	r26, r1
    3e6a:	b1 05       	cpc	r27, r1
    3e6c:	21 f4       	brne	.+8      	; 0x3e76 <H_LCD_void_sendIntNum+0x3c>
	{
		H_LCD_void_sendData('0');
    3e6e:	80 e3       	ldi	r24, 0x30	; 48
    3e70:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <H_LCD_void_sendData>
    3e74:	90 c0       	rjmp	.+288    	; 0x3f96 <H_LCD_void_sendIntNum+0x15c>
		return;
	}
	if (copy_s32Num < 0)
    3e76:	89 89       	ldd	r24, Y+17	; 0x11
    3e78:	9a 89       	ldd	r25, Y+18	; 0x12
    3e7a:	ab 89       	ldd	r26, Y+19	; 0x13
    3e7c:	bc 89       	ldd	r27, Y+20	; 0x14
    3e7e:	bb 23       	and	r27, r27
    3e80:	94 f4       	brge	.+36     	; 0x3ea6 <H_LCD_void_sendIntNum+0x6c>
	{
		H_LCD_void_sendData('-');
    3e82:	8d e2       	ldi	r24, 0x2D	; 45
    3e84:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <H_LCD_void_sendData>
		copy_s32Num *= -1;
    3e88:	89 89       	ldd	r24, Y+17	; 0x11
    3e8a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e8c:	ab 89       	ldd	r26, Y+19	; 0x13
    3e8e:	bc 89       	ldd	r27, Y+20	; 0x14
    3e90:	b0 95       	com	r27
    3e92:	a0 95       	com	r26
    3e94:	90 95       	com	r25
    3e96:	81 95       	neg	r24
    3e98:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9a:	af 4f       	sbci	r26, 0xFF	; 255
    3e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9e:	89 8b       	std	Y+17, r24	; 0x11
    3ea0:	9a 8b       	std	Y+18, r25	; 0x12
    3ea2:	ab 8b       	std	Y+19, r26	; 0x13
    3ea4:	bc 8b       	std	Y+20, r27	; 0x14
	}
	s32 temp = copy_s32Num;
    3ea6:	89 89       	ldd	r24, Y+17	; 0x11
    3ea8:	9a 89       	ldd	r25, Y+18	; 0x12
    3eaa:	ab 89       	ldd	r26, Y+19	; 0x13
    3eac:	bc 89       	ldd	r27, Y+20	; 0x14
    3eae:	89 83       	std	Y+1, r24	; 0x01
    3eb0:	9a 83       	std	Y+2, r25	; 0x02
    3eb2:	ab 83       	std	Y+3, r26	; 0x03
    3eb4:	bc 83       	std	Y+4, r27	; 0x04
    3eb6:	15 c0       	rjmp	.+42     	; 0x3ee2 <H_LCD_void_sendIntNum+0xa8>
	while(temp)
	{
		temp /= 10;
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebc:	ab 81       	ldd	r26, Y+3	; 0x03
    3ebe:	bc 81       	ldd	r27, Y+4	; 0x04
    3ec0:	2a e0       	ldi	r18, 0x0A	; 10
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 28 32 	call	0x6450	; 0x6450 <__divmodsi4>
    3ed0:	da 01       	movw	r26, r20
    3ed2:	c9 01       	movw	r24, r18
    3ed4:	89 83       	std	Y+1, r24	; 0x01
    3ed6:	9a 83       	std	Y+2, r25	; 0x02
    3ed8:	ab 83       	std	Y+3, r26	; 0x03
    3eda:	bc 83       	std	Y+4, r27	; 0x04
		numOfDigits++;
    3edc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ede:	8f 5f       	subi	r24, 0xFF	; 255
    3ee0:	8e 83       	std	Y+6, r24	; 0x06
	{
		H_LCD_void_sendData('-');
		copy_s32Num *= -1;
	}
	s32 temp = copy_s32Num;
	while(temp)
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
    3ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ee8:	bc 81       	ldd	r27, Y+4	; 0x04
    3eea:	00 97       	sbiw	r24, 0x00	; 0
    3eec:	a1 05       	cpc	r26, r1
    3eee:	b1 05       	cpc	r27, r1
    3ef0:	19 f7       	brne	.-58     	; 0x3eb8 <H_LCD_void_sendIntNum+0x7e>
	{
		temp /= 10;
		numOfDigits++;
	}
	temp = copy_s32Num;
    3ef2:	89 89       	ldd	r24, Y+17	; 0x11
    3ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef6:	ab 89       	ldd	r26, Y+19	; 0x13
    3ef8:	bc 89       	ldd	r27, Y+20	; 0x14
    3efa:	89 83       	std	Y+1, r24	; 0x01
    3efc:	9a 83       	std	Y+2, r25	; 0x02
    3efe:	ab 83       	std	Y+3, r26	; 0x03
    3f00:	bc 83       	std	Y+4, r27	; 0x04
    3f02:	38 c0       	rjmp	.+112    	; 0x3f74 <H_LCD_void_sendIntNum+0x13a>
	for (; i < numOfDigits; i++)
	{
		num[numOfDigits - i - 1] = LCD_CHAR_OF(temp % 10);
    3f04:	8e 81       	ldd	r24, Y+6	; 0x06
    3f06:	28 2f       	mov	r18, r24
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0c:	88 2f       	mov	r24, r24
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	a9 01       	movw	r20, r18
    3f12:	48 1b       	sub	r20, r24
    3f14:	59 0b       	sbc	r21, r25
    3f16:	ca 01       	movw	r24, r20
    3f18:	8c 01       	movw	r16, r24
    3f1a:	01 50       	subi	r16, 0x01	; 1
    3f1c:	10 40       	sbci	r17, 0x00	; 0
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	ab 81       	ldd	r26, Y+3	; 0x03
    3f24:	bc 81       	ldd	r27, Y+4	; 0x04
    3f26:	2a e0       	ldi	r18, 0x0A	; 10
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e0       	ldi	r20, 0x00	; 0
    3f2c:	50 e0       	ldi	r21, 0x00	; 0
    3f2e:	bc 01       	movw	r22, r24
    3f30:	cd 01       	movw	r24, r26
    3f32:	0e 94 28 32 	call	0x6450	; 0x6450 <__divmodsi4>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	80 5d       	subi	r24, 0xD0	; 208
    3f3c:	28 2f       	mov	r18, r24
    3f3e:	ce 01       	movw	r24, r28
    3f40:	07 96       	adiw	r24, 0x07	; 7
    3f42:	fc 01       	movw	r30, r24
    3f44:	e0 0f       	add	r30, r16
    3f46:	f1 1f       	adc	r31, r17
    3f48:	20 83       	st	Z, r18
		temp /= 10;
    3f4a:	89 81       	ldd	r24, Y+1	; 0x01
    3f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4e:	ab 81       	ldd	r26, Y+3	; 0x03
    3f50:	bc 81       	ldd	r27, Y+4	; 0x04
    3f52:	2a e0       	ldi	r18, 0x0A	; 10
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	40 e0       	ldi	r20, 0x00	; 0
    3f58:	50 e0       	ldi	r21, 0x00	; 0
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	cd 01       	movw	r24, r26
    3f5e:	0e 94 28 32 	call	0x6450	; 0x6450 <__divmodsi4>
    3f62:	da 01       	movw	r26, r20
    3f64:	c9 01       	movw	r24, r18
    3f66:	89 83       	std	Y+1, r24	; 0x01
    3f68:	9a 83       	std	Y+2, r25	; 0x02
    3f6a:	ab 83       	std	Y+3, r26	; 0x03
    3f6c:	bc 83       	std	Y+4, r27	; 0x04
	{
		temp /= 10;
		numOfDigits++;
	}
	temp = copy_s32Num;
	for (; i < numOfDigits; i++)
    3f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f70:	8f 5f       	subi	r24, 0xFF	; 255
    3f72:	8d 83       	std	Y+5, r24	; 0x05
    3f74:	9d 81       	ldd	r25, Y+5	; 0x05
    3f76:	8e 81       	ldd	r24, Y+6	; 0x06
    3f78:	98 17       	cp	r25, r24
    3f7a:	20 f2       	brcs	.-120    	; 0x3f04 <H_LCD_void_sendIntNum+0xca>
	{
		num[numOfDigits - i - 1] = LCD_CHAR_OF(temp % 10);
		temp /= 10;
	}
	num[numOfDigits] = '\0';
    3f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    3f7e:	28 2f       	mov	r18, r24
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	ce 01       	movw	r24, r28
    3f84:	07 96       	adiw	r24, 0x07	; 7
    3f86:	fc 01       	movw	r30, r24
    3f88:	e2 0f       	add	r30, r18
    3f8a:	f3 1f       	adc	r31, r19
    3f8c:	10 82       	st	Z, r1
	H_LCD_void_sendString(num);
    3f8e:	ce 01       	movw	r24, r28
    3f90:	07 96       	adiw	r24, 0x07	; 7
    3f92:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
}
    3f96:	64 96       	adiw	r28, 0x14	; 20
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	0f be       	out	0x3f, r0	; 63
    3fa0:	cd bf       	out	0x3d, r28	; 61
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	1f 91       	pop	r17
    3fa8:	0f 91       	pop	r16
    3faa:	08 95       	ret

00003fac <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	00 d0       	rcall	.+0      	; 0x3fb2 <H_LCD_void_gotoXY+0x6>
    3fb2:	0f 92       	push	r0
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	8a 83       	std	Y+2, r24	; 0x02
    3fba:	6b 83       	std	Y+3, r22	; 0x03
	u8 address = copy_u8Row * 20 + copy_u8Col;
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbe:	88 2f       	mov	r24, r24
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	9c 01       	movw	r18, r24
    3fc4:	22 0f       	add	r18, r18
    3fc6:	33 1f       	adc	r19, r19
    3fc8:	22 0f       	add	r18, r18
    3fca:	33 1f       	adc	r19, r19
    3fcc:	c9 01       	movw	r24, r18
    3fce:	88 0f       	add	r24, r24
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	88 0f       	add	r24, r24
    3fd4:	99 1f       	adc	r25, r25
    3fd6:	82 0f       	add	r24, r18
    3fd8:	93 1f       	adc	r25, r19
    3fda:	98 2f       	mov	r25, r24
    3fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fde:	89 0f       	add	r24, r25
    3fe0:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(SET_BIT(address, 7));
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	80 68       	ori	r24, 0x80	; 128
    3fe6:	89 83       	std	Y+1, r24	; 0x01
    3fe8:	89 81       	ldd	r24, Y+1	; 0x01
    3fea:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
}
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	0f 90       	pop	r0
    3ff4:	cf 91       	pop	r28
    3ff6:	df 91       	pop	r29
    3ff8:	08 95       	ret

00003ffa <H_LCD_void_creatCustomChar>:

void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    3ffa:	df 93       	push	r29
    3ffc:	cf 93       	push	r28
    3ffe:	00 d0       	rcall	.+0      	; 0x4000 <H_LCD_void_creatCustomChar+0x6>
    4000:	00 d0       	rcall	.+0      	; 0x4002 <H_LCD_void_creatCustomChar+0x8>
    4002:	0f 92       	push	r0
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	9c 83       	std	Y+4, r25	; 0x04
    400a:	8b 83       	std	Y+3, r24	; 0x03
    400c:	6d 83       	std	Y+5, r22	; 0x05
	H_LCD_void_sendCommand(copy_u8charCode * 8 + 0b01000000);
    400e:	8d 81       	ldd	r24, Y+5	; 0x05
    4010:	88 2f       	mov	r24, r24
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	08 96       	adiw	r24, 0x08	; 8
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	for(int i = 0; i < 8; i++)
    4026:	1a 82       	std	Y+2, r1	; 0x02
    4028:	19 82       	std	Y+1, r1	; 0x01
    402a:	0f c0       	rjmp	.+30     	; 0x404a <H_LCD_void_creatCustomChar+0x50>
	{
		H_LCD_void_sendData(ArrPattern[i]);
    402c:	29 81       	ldd	r18, Y+1	; 0x01
    402e:	3a 81       	ldd	r19, Y+2	; 0x02
    4030:	8b 81       	ldd	r24, Y+3	; 0x03
    4032:	9c 81       	ldd	r25, Y+4	; 0x04
    4034:	fc 01       	movw	r30, r24
    4036:	e2 0f       	add	r30, r18
    4038:	f3 1f       	adc	r31, r19
    403a:	80 81       	ld	r24, Z
    403c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <H_LCD_void_sendData>
}

void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
	H_LCD_void_sendCommand(copy_u8charCode * 8 + 0b01000000);
	for(int i = 0; i < 8; i++)
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
    4044:	01 96       	adiw	r24, 0x01	; 1
    4046:	9a 83       	std	Y+2, r25	; 0x02
    4048:	89 83       	std	Y+1, r24	; 0x01
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	88 30       	cpi	r24, 0x08	; 8
    4050:	91 05       	cpc	r25, r1
    4052:	64 f3       	brlt	.-40     	; 0x402c <H_LCD_void_creatCustomChar+0x32>
	{
		H_LCD_void_sendData(ArrPattern[i]);
	}
	H_LCD_void_sendCommand(0x80);
    4054:	80 e8       	ldi	r24, 0x80	; 128
    4056:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
//	H_LCD_void_sendCommand(LCD_CMD_RETURN_HOME);
}
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	08 95       	ret

0000406a <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    406a:	df 93       	push	r29
    406c:	cf 93       	push	r28
    406e:	0f 92       	push	r0
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_sendData(copy_u8charCode);
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <H_LCD_void_sendData>
}
    407c:	0f 90       	pop	r0
    407e:	cf 91       	pop	r28
    4080:	df 91       	pop	r29
    4082:	08 95       	ret

00004084 <H_ESP8266_void_Init>:
volatile u8 ESP_Print_Flag=0;
volatile u8 SUB_Flag=0;
volatile u8 RX_DATA;

void H_ESP8266_void_Init(void)
{
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	cb 5a       	subi	r28, 0xAB	; 171
    4092:	d0 40       	sbci	r29, 0x00	; 0
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	cd bf       	out	0x3d, r28	; 61
	flag_phase=Connection_phase;
    409e:	10 92 a7 03 	sts	0x03A7, r1
	UART_receiveByteAsynchCallBack(UART_TEST);
    40a2:	83 e1       	ldi	r24, 0x13	; 19
    40a4:	9b e2       	ldi	r25, 0x2B	; 43
    40a6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <UART_receiveByteAsynchCallBack>

	u8 connection_status=0;
    40aa:	fe 01       	movw	r30, r28
    40ac:	e5 55       	subi	r30, 0x55	; 85
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	10 82       	st	Z, r1
	u16 time_out=0;
    40b2:	fe 01       	movw	r30, r28
    40b4:	e7 55       	subi	r30, 0x57	; 87
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	11 82       	std	Z+1, r1	; 0x01
    40ba:	10 82       	st	Z, r1


	UART_sendString("ATE1\r\n");
    40bc:	80 e6       	ldi	r24, 0x60	; 96
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	while(!ConnectReceiveBuffer());
    40c4:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <ConnectReceiveBuffer>
    40c8:	88 23       	and	r24, r24
    40ca:	e1 f3       	breq	.-8      	; 0x40c4 <H_ESP8266_void_Init+0x40>
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
    40d2:	fe 01       	movw	r30, r28
    40d4:	eb 55       	subi	r30, 0x5B	; 91
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	a0 e2       	ldi	r26, 0x20	; 32
    40de:	b1 e4       	ldi	r27, 0x41	; 65
    40e0:	80 83       	st	Z, r24
    40e2:	91 83       	std	Z+1, r25	; 0x01
    40e4:	a2 83       	std	Z+2, r26	; 0x02
    40e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e8:	8e 01       	movw	r16, r28
    40ea:	0f 55       	subi	r16, 0x5F	; 95
    40ec:	1f 4f       	sbci	r17, 0xFF	; 255
    40ee:	fe 01       	movw	r30, r28
    40f0:	eb 55       	subi	r30, 0x5B	; 91
    40f2:	ff 4f       	sbci	r31, 0xFF	; 255
    40f4:	60 81       	ld	r22, Z
    40f6:	71 81       	ldd	r23, Z+1	; 0x01
    40f8:	82 81       	ldd	r24, Z+2	; 0x02
    40fa:	93 81       	ldd	r25, Z+3	; 0x03
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	4a e7       	ldi	r20, 0x7A	; 122
    4102:	55 e4       	ldi	r21, 0x45	; 69
    4104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	f8 01       	movw	r30, r16
    410e:	80 83       	st	Z, r24
    4110:	91 83       	std	Z+1, r25	; 0x01
    4112:	a2 83       	std	Z+2, r26	; 0x02
    4114:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4116:	fe 01       	movw	r30, r28
    4118:	ef 55       	subi	r30, 0x5F	; 95
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	60 81       	ld	r22, Z
    411e:	71 81       	ldd	r23, Z+1	; 0x01
    4120:	82 81       	ldd	r24, Z+2	; 0x02
    4122:	93 81       	ldd	r25, Z+3	; 0x03
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	40 e8       	ldi	r20, 0x80	; 128
    412a:	5f e3       	ldi	r21, 0x3F	; 63
    412c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4130:	88 23       	and	r24, r24
    4132:	44 f4       	brge	.+16     	; 0x4144 <H_ESP8266_void_Init+0xc0>
		__ticks = 1;
    4134:	fe 01       	movw	r30, r28
    4136:	e1 56       	subi	r30, 0x61	; 97
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	91 83       	std	Z+1, r25	; 0x01
    4140:	80 83       	st	Z, r24
    4142:	64 c0       	rjmp	.+200    	; 0x420c <H_ESP8266_void_Init+0x188>
	else if (__tmp > 65535)
    4144:	fe 01       	movw	r30, r28
    4146:	ef 55       	subi	r30, 0x5F	; 95
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	60 81       	ld	r22, Z
    414c:	71 81       	ldd	r23, Z+1	; 0x01
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	3f ef       	ldi	r19, 0xFF	; 255
    4156:	4f e7       	ldi	r20, 0x7F	; 127
    4158:	57 e4       	ldi	r21, 0x47	; 71
    415a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    415e:	18 16       	cp	r1, r24
    4160:	0c f0       	brlt	.+2      	; 0x4164 <H_ESP8266_void_Init+0xe0>
    4162:	43 c0       	rjmp	.+134    	; 0x41ea <H_ESP8266_void_Init+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4164:	fe 01       	movw	r30, r28
    4166:	eb 55       	subi	r30, 0x5B	; 91
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	60 81       	ld	r22, Z
    416c:	71 81       	ldd	r23, Z+1	; 0x01
    416e:	82 81       	ldd	r24, Z+2	; 0x02
    4170:	93 81       	ldd	r25, Z+3	; 0x03
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	40 e2       	ldi	r20, 0x20	; 32
    4178:	51 e4       	ldi	r21, 0x41	; 65
    417a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	8e 01       	movw	r16, r28
    4184:	01 56       	subi	r16, 0x61	; 97
    4186:	1f 4f       	sbci	r17, 0xFF	; 255
    4188:	bc 01       	movw	r22, r24
    418a:	cd 01       	movw	r24, r26
    418c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	f8 01       	movw	r30, r16
    4196:	91 83       	std	Z+1, r25	; 0x01
    4198:	80 83       	st	Z, r24
    419a:	1f c0       	rjmp	.+62     	; 0x41da <H_ESP8266_void_Init+0x156>
    419c:	fe 01       	movw	r30, r28
    419e:	e3 56       	subi	r30, 0x63	; 99
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	80 e9       	ldi	r24, 0x90	; 144
    41a4:	91 e0       	ldi	r25, 0x01	; 1
    41a6:	91 83       	std	Z+1, r25	; 0x01
    41a8:	80 83       	st	Z, r24
    41aa:	fe 01       	movw	r30, r28
    41ac:	e3 56       	subi	r30, 0x63	; 99
    41ae:	ff 4f       	sbci	r31, 0xFF	; 255
    41b0:	80 81       	ld	r24, Z
    41b2:	91 81       	ldd	r25, Z+1	; 0x01
    41b4:	01 97       	sbiw	r24, 0x01	; 1
    41b6:	f1 f7       	brne	.-4      	; 0x41b4 <H_ESP8266_void_Init+0x130>
    41b8:	fe 01       	movw	r30, r28
    41ba:	e3 56       	subi	r30, 0x63	; 99
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	91 83       	std	Z+1, r25	; 0x01
    41c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c2:	de 01       	movw	r26, r28
    41c4:	a1 56       	subi	r26, 0x61	; 97
    41c6:	bf 4f       	sbci	r27, 0xFF	; 255
    41c8:	fe 01       	movw	r30, r28
    41ca:	e1 56       	subi	r30, 0x61	; 97
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	91 81       	ldd	r25, Z+1	; 0x01
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	11 96       	adiw	r26, 0x01	; 1
    41d6:	9c 93       	st	X, r25
    41d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41da:	fe 01       	movw	r30, r28
    41dc:	e1 56       	subi	r30, 0x61	; 97
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	80 81       	ld	r24, Z
    41e2:	91 81       	ldd	r25, Z+1	; 0x01
    41e4:	00 97       	sbiw	r24, 0x00	; 0
    41e6:	d1 f6       	brne	.-76     	; 0x419c <H_ESP8266_void_Init+0x118>
    41e8:	27 c0       	rjmp	.+78     	; 0x4238 <H_ESP8266_void_Init+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ea:	8e 01       	movw	r16, r28
    41ec:	01 56       	subi	r16, 0x61	; 97
    41ee:	1f 4f       	sbci	r17, 0xFF	; 255
    41f0:	fe 01       	movw	r30, r28
    41f2:	ef 55       	subi	r30, 0x5F	; 95
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	60 81       	ld	r22, Z
    41f8:	71 81       	ldd	r23, Z+1	; 0x01
    41fa:	82 81       	ldd	r24, Z+2	; 0x02
    41fc:	93 81       	ldd	r25, Z+3	; 0x03
    41fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	f8 01       	movw	r30, r16
    4208:	91 83       	std	Z+1, r25	; 0x01
    420a:	80 83       	st	Z, r24
    420c:	de 01       	movw	r26, r28
    420e:	a5 56       	subi	r26, 0x65	; 101
    4210:	bf 4f       	sbci	r27, 0xFF	; 255
    4212:	fe 01       	movw	r30, r28
    4214:	e1 56       	subi	r30, 0x61	; 97
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	80 81       	ld	r24, Z
    421a:	91 81       	ldd	r25, Z+1	; 0x01
    421c:	8d 93       	st	X+, r24
    421e:	9c 93       	st	X, r25
    4220:	fe 01       	movw	r30, r28
    4222:	e5 56       	subi	r30, 0x65	; 101
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <H_ESP8266_void_Init+0x1a6>
    422e:	fe 01       	movw	r30, r28
    4230:	e5 56       	subi	r30, 0x65	; 101
    4232:	ff 4f       	sbci	r31, 0xFF	; 255
    4234:	91 83       	std	Z+1, r25	; 0x01
    4236:	80 83       	st	Z, r24
	_delay_ms(10);
	H_LCD_void_sendString("ATE1 OK");
    4238:	87 e6       	ldi	r24, 0x67	; 103
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
	Clear_REC_Buffer();
    4240:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
    4244:	fe 01       	movw	r30, r28
    4246:	e9 56       	subi	r30, 0x69	; 105
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	aa ef       	ldi	r26, 0xFA	; 250
    4250:	b3 e4       	ldi	r27, 0x43	; 67
    4252:	80 83       	st	Z, r24
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	a2 83       	std	Z+2, r26	; 0x02
    4258:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    425a:	8e 01       	movw	r16, r28
    425c:	0d 56       	subi	r16, 0x6D	; 109
    425e:	1f 4f       	sbci	r17, 0xFF	; 255
    4260:	fe 01       	movw	r30, r28
    4262:	e9 56       	subi	r30, 0x69	; 105
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	60 81       	ld	r22, Z
    4268:	71 81       	ldd	r23, Z+1	; 0x01
    426a:	82 81       	ldd	r24, Z+2	; 0x02
    426c:	93 81       	ldd	r25, Z+3	; 0x03
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	4a e7       	ldi	r20, 0x7A	; 122
    4274:	55 e4       	ldi	r21, 0x45	; 69
    4276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	f8 01       	movw	r30, r16
    4280:	80 83       	st	Z, r24
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	a2 83       	std	Z+2, r26	; 0x02
    4286:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4288:	fe 01       	movw	r30, r28
    428a:	ed 56       	subi	r30, 0x6D	; 109
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	60 81       	ld	r22, Z
    4290:	71 81       	ldd	r23, Z+1	; 0x01
    4292:	82 81       	ldd	r24, Z+2	; 0x02
    4294:	93 81       	ldd	r25, Z+3	; 0x03
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	40 e8       	ldi	r20, 0x80	; 128
    429c:	5f e3       	ldi	r21, 0x3F	; 63
    429e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a2:	88 23       	and	r24, r24
    42a4:	44 f4       	brge	.+16     	; 0x42b6 <H_ESP8266_void_Init+0x232>
		__ticks = 1;
    42a6:	fe 01       	movw	r30, r28
    42a8:	ef 56       	subi	r30, 0x6F	; 111
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	91 83       	std	Z+1, r25	; 0x01
    42b2:	80 83       	st	Z, r24
    42b4:	64 c0       	rjmp	.+200    	; 0x437e <H_ESP8266_void_Init+0x2fa>
	else if (__tmp > 65535)
    42b6:	fe 01       	movw	r30, r28
    42b8:	ed 56       	subi	r30, 0x6D	; 109
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	60 81       	ld	r22, Z
    42be:	71 81       	ldd	r23, Z+1	; 0x01
    42c0:	82 81       	ldd	r24, Z+2	; 0x02
    42c2:	93 81       	ldd	r25, Z+3	; 0x03
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	3f ef       	ldi	r19, 0xFF	; 255
    42c8:	4f e7       	ldi	r20, 0x7F	; 127
    42ca:	57 e4       	ldi	r21, 0x47	; 71
    42cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42d0:	18 16       	cp	r1, r24
    42d2:	0c f0       	brlt	.+2      	; 0x42d6 <H_ESP8266_void_Init+0x252>
    42d4:	43 c0       	rjmp	.+134    	; 0x435c <H_ESP8266_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d6:	fe 01       	movw	r30, r28
    42d8:	e9 56       	subi	r30, 0x69	; 105
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	60 81       	ld	r22, Z
    42de:	71 81       	ldd	r23, Z+1	; 0x01
    42e0:	82 81       	ldd	r24, Z+2	; 0x02
    42e2:	93 81       	ldd	r25, Z+3	; 0x03
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	40 e2       	ldi	r20, 0x20	; 32
    42ea:	51 e4       	ldi	r21, 0x41	; 65
    42ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	8e 01       	movw	r16, r28
    42f6:	0f 56       	subi	r16, 0x6F	; 111
    42f8:	1f 4f       	sbci	r17, 0xFF	; 255
    42fa:	bc 01       	movw	r22, r24
    42fc:	cd 01       	movw	r24, r26
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	f8 01       	movw	r30, r16
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	80 83       	st	Z, r24
    430c:	1f c0       	rjmp	.+62     	; 0x434c <H_ESP8266_void_Init+0x2c8>
    430e:	fe 01       	movw	r30, r28
    4310:	e1 57       	subi	r30, 0x71	; 113
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	80 e9       	ldi	r24, 0x90	; 144
    4316:	91 e0       	ldi	r25, 0x01	; 1
    4318:	91 83       	std	Z+1, r25	; 0x01
    431a:	80 83       	st	Z, r24
    431c:	fe 01       	movw	r30, r28
    431e:	e1 57       	subi	r30, 0x71	; 113
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 81       	ld	r24, Z
    4324:	91 81       	ldd	r25, Z+1	; 0x01
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <H_ESP8266_void_Init+0x2a2>
    432a:	fe 01       	movw	r30, r28
    432c:	e1 57       	subi	r30, 0x71	; 113
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4334:	de 01       	movw	r26, r28
    4336:	af 56       	subi	r26, 0x6F	; 111
    4338:	bf 4f       	sbci	r27, 0xFF	; 255
    433a:	fe 01       	movw	r30, r28
    433c:	ef 56       	subi	r30, 0x6F	; 111
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	80 81       	ld	r24, Z
    4342:	91 81       	ldd	r25, Z+1	; 0x01
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	11 96       	adiw	r26, 0x01	; 1
    4348:	9c 93       	st	X, r25
    434a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434c:	fe 01       	movw	r30, r28
    434e:	ef 56       	subi	r30, 0x6F	; 111
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	80 81       	ld	r24, Z
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	00 97       	sbiw	r24, 0x00	; 0
    4358:	d1 f6       	brne	.-76     	; 0x430e <H_ESP8266_void_Init+0x28a>
    435a:	27 c0       	rjmp	.+78     	; 0x43aa <H_ESP8266_void_Init+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435c:	8e 01       	movw	r16, r28
    435e:	0f 56       	subi	r16, 0x6F	; 111
    4360:	1f 4f       	sbci	r17, 0xFF	; 255
    4362:	fe 01       	movw	r30, r28
    4364:	ed 56       	subi	r30, 0x6D	; 109
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	60 81       	ld	r22, Z
    436a:	71 81       	ldd	r23, Z+1	; 0x01
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	93 81       	ldd	r25, Z+3	; 0x03
    4370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	f8 01       	movw	r30, r16
    437a:	91 83       	std	Z+1, r25	; 0x01
    437c:	80 83       	st	Z, r24
    437e:	de 01       	movw	r26, r28
    4380:	a3 57       	subi	r26, 0x73	; 115
    4382:	bf 4f       	sbci	r27, 0xFF	; 255
    4384:	fe 01       	movw	r30, r28
    4386:	ef 56       	subi	r30, 0x6F	; 111
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	80 81       	ld	r24, Z
    438c:	91 81       	ldd	r25, Z+1	; 0x01
    438e:	8d 93       	st	X+, r24
    4390:	9c 93       	st	X, r25
    4392:	fe 01       	movw	r30, r28
    4394:	e3 57       	subi	r30, 0x73	; 115
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	80 81       	ld	r24, Z
    439a:	91 81       	ldd	r25, Z+1	; 0x01
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	f1 f7       	brne	.-4      	; 0x439c <H_ESP8266_void_Init+0x318>
    43a0:	fe 01       	movw	r30, r28
    43a2:	e3 57       	subi	r30, 0x73	; 115
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	91 83       	std	Z+1, r25	; 0x01
    43a8:	80 83       	st	Z, r24
	_delay_ms(500);

	UART_sendString("AT+CWMODE=3\r\n");
    43aa:	8f e6       	ldi	r24, 0x6F	; 111
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	while(!ConnectReceiveBuffer());
    43b2:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <ConnectReceiveBuffer>
    43b6:	88 23       	and	r24, r24
    43b8:	e1 f3       	breq	.-8      	; 0x43b2 <H_ESP8266_void_Init+0x32e>
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
    43c0:	fe 01       	movw	r30, r28
    43c2:	e7 57       	subi	r30, 0x77	; 119
    43c4:	ff 4f       	sbci	r31, 0xFF	; 255
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	a0 e2       	ldi	r26, 0x20	; 32
    43cc:	b1 e4       	ldi	r27, 0x41	; 65
    43ce:	80 83       	st	Z, r24
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	a2 83       	std	Z+2, r26	; 0x02
    43d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d6:	8e 01       	movw	r16, r28
    43d8:	0b 57       	subi	r16, 0x7B	; 123
    43da:	1f 4f       	sbci	r17, 0xFF	; 255
    43dc:	fe 01       	movw	r30, r28
    43de:	e7 57       	subi	r30, 0x77	; 119
    43e0:	ff 4f       	sbci	r31, 0xFF	; 255
    43e2:	60 81       	ld	r22, Z
    43e4:	71 81       	ldd	r23, Z+1	; 0x01
    43e6:	82 81       	ldd	r24, Z+2	; 0x02
    43e8:	93 81       	ldd	r25, Z+3	; 0x03
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	4a e7       	ldi	r20, 0x7A	; 122
    43f0:	55 e4       	ldi	r21, 0x45	; 69
    43f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f6:	dc 01       	movw	r26, r24
    43f8:	cb 01       	movw	r24, r22
    43fa:	f8 01       	movw	r30, r16
    43fc:	80 83       	st	Z, r24
    43fe:	91 83       	std	Z+1, r25	; 0x01
    4400:	a2 83       	std	Z+2, r26	; 0x02
    4402:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4404:	fe 01       	movw	r30, r28
    4406:	eb 57       	subi	r30, 0x7B	; 123
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	60 81       	ld	r22, Z
    440c:	71 81       	ldd	r23, Z+1	; 0x01
    440e:	82 81       	ldd	r24, Z+2	; 0x02
    4410:	93 81       	ldd	r25, Z+3	; 0x03
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e8       	ldi	r20, 0x80	; 128
    4418:	5f e3       	ldi	r21, 0x3F	; 63
    441a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    441e:	88 23       	and	r24, r24
    4420:	44 f4       	brge	.+16     	; 0x4432 <H_ESP8266_void_Init+0x3ae>
		__ticks = 1;
    4422:	fe 01       	movw	r30, r28
    4424:	ed 57       	subi	r30, 0x7D	; 125
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	91 83       	std	Z+1, r25	; 0x01
    442e:	80 83       	st	Z, r24
    4430:	64 c0       	rjmp	.+200    	; 0x44fa <H_ESP8266_void_Init+0x476>
	else if (__tmp > 65535)
    4432:	fe 01       	movw	r30, r28
    4434:	eb 57       	subi	r30, 0x7B	; 123
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	60 81       	ld	r22, Z
    443a:	71 81       	ldd	r23, Z+1	; 0x01
    443c:	82 81       	ldd	r24, Z+2	; 0x02
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	3f ef       	ldi	r19, 0xFF	; 255
    4444:	4f e7       	ldi	r20, 0x7F	; 127
    4446:	57 e4       	ldi	r21, 0x47	; 71
    4448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    444c:	18 16       	cp	r1, r24
    444e:	0c f0       	brlt	.+2      	; 0x4452 <H_ESP8266_void_Init+0x3ce>
    4450:	43 c0       	rjmp	.+134    	; 0x44d8 <H_ESP8266_void_Init+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4452:	fe 01       	movw	r30, r28
    4454:	e7 57       	subi	r30, 0x77	; 119
    4456:	ff 4f       	sbci	r31, 0xFF	; 255
    4458:	60 81       	ld	r22, Z
    445a:	71 81       	ldd	r23, Z+1	; 0x01
    445c:	82 81       	ldd	r24, Z+2	; 0x02
    445e:	93 81       	ldd	r25, Z+3	; 0x03
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	40 e2       	ldi	r20, 0x20	; 32
    4466:	51 e4       	ldi	r21, 0x41	; 65
    4468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	8e 01       	movw	r16, r28
    4472:	0d 57       	subi	r16, 0x7D	; 125
    4474:	1f 4f       	sbci	r17, 0xFF	; 255
    4476:	bc 01       	movw	r22, r24
    4478:	cd 01       	movw	r24, r26
    447a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	f8 01       	movw	r30, r16
    4484:	91 83       	std	Z+1, r25	; 0x01
    4486:	80 83       	st	Z, r24
    4488:	1f c0       	rjmp	.+62     	; 0x44c8 <H_ESP8266_void_Init+0x444>
    448a:	fe 01       	movw	r30, r28
    448c:	ef 57       	subi	r30, 0x7F	; 127
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	80 e9       	ldi	r24, 0x90	; 144
    4492:	91 e0       	ldi	r25, 0x01	; 1
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
    4498:	fe 01       	movw	r30, r28
    449a:	ef 57       	subi	r30, 0x7F	; 127
    449c:	ff 4f       	sbci	r31, 0xFF	; 255
    449e:	80 81       	ld	r24, Z
    44a0:	91 81       	ldd	r25, Z+1	; 0x01
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	f1 f7       	brne	.-4      	; 0x44a2 <H_ESP8266_void_Init+0x41e>
    44a6:	fe 01       	movw	r30, r28
    44a8:	ef 57       	subi	r30, 0x7F	; 127
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	91 83       	std	Z+1, r25	; 0x01
    44ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b0:	de 01       	movw	r26, r28
    44b2:	ad 57       	subi	r26, 0x7D	; 125
    44b4:	bf 4f       	sbci	r27, 0xFF	; 255
    44b6:	fe 01       	movw	r30, r28
    44b8:	ed 57       	subi	r30, 0x7D	; 125
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	11 96       	adiw	r26, 0x01	; 1
    44c4:	9c 93       	st	X, r25
    44c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c8:	fe 01       	movw	r30, r28
    44ca:	ed 57       	subi	r30, 0x7D	; 125
    44cc:	ff 4f       	sbci	r31, 0xFF	; 255
    44ce:	80 81       	ld	r24, Z
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	00 97       	sbiw	r24, 0x00	; 0
    44d4:	d1 f6       	brne	.-76     	; 0x448a <H_ESP8266_void_Init+0x406>
    44d6:	27 c0       	rjmp	.+78     	; 0x4526 <H_ESP8266_void_Init+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d8:	8e 01       	movw	r16, r28
    44da:	0d 57       	subi	r16, 0x7D	; 125
    44dc:	1f 4f       	sbci	r17, 0xFF	; 255
    44de:	fe 01       	movw	r30, r28
    44e0:	eb 57       	subi	r30, 0x7B	; 123
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	f8 01       	movw	r30, r16
    44f6:	91 83       	std	Z+1, r25	; 0x01
    44f8:	80 83       	st	Z, r24
    44fa:	de 01       	movw	r26, r28
    44fc:	a1 58       	subi	r26, 0x81	; 129
    44fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4500:	fe 01       	movw	r30, r28
    4502:	ed 57       	subi	r30, 0x7D	; 125
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	80 81       	ld	r24, Z
    4508:	91 81       	ldd	r25, Z+1	; 0x01
    450a:	8d 93       	st	X+, r24
    450c:	9c 93       	st	X, r25
    450e:	fe 01       	movw	r30, r28
    4510:	e1 58       	subi	r30, 0x81	; 129
    4512:	ff 4f       	sbci	r31, 0xFF	; 255
    4514:	80 81       	ld	r24, Z
    4516:	91 81       	ldd	r25, Z+1	; 0x01
    4518:	01 97       	sbiw	r24, 0x01	; 1
    451a:	f1 f7       	brne	.-4      	; 0x4518 <H_ESP8266_void_Init+0x494>
    451c:	fe 01       	movw	r30, r28
    451e:	e1 58       	subi	r30, 0x81	; 129
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	91 83       	std	Z+1, r25	; 0x01
    4524:	80 83       	st	Z, r24
	_delay_ms(10);
	H_LCD_void_sendString("CWMODE=3 OK");
    4526:	8d e7       	ldi	r24, 0x7D	; 125
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
	Clear_REC_Buffer();
    452e:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
    4532:	fe 01       	movw	r30, r28
    4534:	e5 58       	subi	r30, 0x85	; 133
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	aa ef       	ldi	r26, 0xFA	; 250
    453e:	b3 e4       	ldi	r27, 0x43	; 67
    4540:	80 83       	st	Z, r24
    4542:	91 83       	std	Z+1, r25	; 0x01
    4544:	a2 83       	std	Z+2, r26	; 0x02
    4546:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4548:	8e 01       	movw	r16, r28
    454a:	09 58       	subi	r16, 0x89	; 137
    454c:	1f 4f       	sbci	r17, 0xFF	; 255
    454e:	fe 01       	movw	r30, r28
    4550:	e5 58       	subi	r30, 0x85	; 133
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	60 81       	ld	r22, Z
    4556:	71 81       	ldd	r23, Z+1	; 0x01
    4558:	82 81       	ldd	r24, Z+2	; 0x02
    455a:	93 81       	ldd	r25, Z+3	; 0x03
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	4a e7       	ldi	r20, 0x7A	; 122
    4562:	55 e4       	ldi	r21, 0x45	; 69
    4564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	f8 01       	movw	r30, r16
    456e:	80 83       	st	Z, r24
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	a2 83       	std	Z+2, r26	; 0x02
    4574:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4576:	fe 01       	movw	r30, r28
    4578:	e9 58       	subi	r30, 0x89	; 137
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	60 81       	ld	r22, Z
    457e:	71 81       	ldd	r23, Z+1	; 0x01
    4580:	82 81       	ldd	r24, Z+2	; 0x02
    4582:	93 81       	ldd	r25, Z+3	; 0x03
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	40 e8       	ldi	r20, 0x80	; 128
    458a:	5f e3       	ldi	r21, 0x3F	; 63
    458c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4590:	88 23       	and	r24, r24
    4592:	44 f4       	brge	.+16     	; 0x45a4 <H_ESP8266_void_Init+0x520>
		__ticks = 1;
    4594:	fe 01       	movw	r30, r28
    4596:	eb 58       	subi	r30, 0x8B	; 139
    4598:	ff 4f       	sbci	r31, 0xFF	; 255
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	91 83       	std	Z+1, r25	; 0x01
    45a0:	80 83       	st	Z, r24
    45a2:	64 c0       	rjmp	.+200    	; 0x466c <H_ESP8266_void_Init+0x5e8>
	else if (__tmp > 65535)
    45a4:	fe 01       	movw	r30, r28
    45a6:	e9 58       	subi	r30, 0x89	; 137
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	60 81       	ld	r22, Z
    45ac:	71 81       	ldd	r23, Z+1	; 0x01
    45ae:	82 81       	ldd	r24, Z+2	; 0x02
    45b0:	93 81       	ldd	r25, Z+3	; 0x03
    45b2:	20 e0       	ldi	r18, 0x00	; 0
    45b4:	3f ef       	ldi	r19, 0xFF	; 255
    45b6:	4f e7       	ldi	r20, 0x7F	; 127
    45b8:	57 e4       	ldi	r21, 0x47	; 71
    45ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45be:	18 16       	cp	r1, r24
    45c0:	0c f0       	brlt	.+2      	; 0x45c4 <H_ESP8266_void_Init+0x540>
    45c2:	43 c0       	rjmp	.+134    	; 0x464a <H_ESP8266_void_Init+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c4:	fe 01       	movw	r30, r28
    45c6:	e5 58       	subi	r30, 0x85	; 133
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	60 81       	ld	r22, Z
    45cc:	71 81       	ldd	r23, Z+1	; 0x01
    45ce:	82 81       	ldd	r24, Z+2	; 0x02
    45d0:	93 81       	ldd	r25, Z+3	; 0x03
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	40 e2       	ldi	r20, 0x20	; 32
    45d8:	51 e4       	ldi	r21, 0x41	; 65
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	8e 01       	movw	r16, r28
    45e4:	0b 58       	subi	r16, 0x8B	; 139
    45e6:	1f 4f       	sbci	r17, 0xFF	; 255
    45e8:	bc 01       	movw	r22, r24
    45ea:	cd 01       	movw	r24, r26
    45ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	f8 01       	movw	r30, r16
    45f6:	91 83       	std	Z+1, r25	; 0x01
    45f8:	80 83       	st	Z, r24
    45fa:	1f c0       	rjmp	.+62     	; 0x463a <H_ESP8266_void_Init+0x5b6>
    45fc:	fe 01       	movw	r30, r28
    45fe:	ed 58       	subi	r30, 0x8D	; 141
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	80 e9       	ldi	r24, 0x90	; 144
    4604:	91 e0       	ldi	r25, 0x01	; 1
    4606:	91 83       	std	Z+1, r25	; 0x01
    4608:	80 83       	st	Z, r24
    460a:	fe 01       	movw	r30, r28
    460c:	ed 58       	subi	r30, 0x8D	; 141
    460e:	ff 4f       	sbci	r31, 0xFF	; 255
    4610:	80 81       	ld	r24, Z
    4612:	91 81       	ldd	r25, Z+1	; 0x01
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	f1 f7       	brne	.-4      	; 0x4614 <H_ESP8266_void_Init+0x590>
    4618:	fe 01       	movw	r30, r28
    461a:	ed 58       	subi	r30, 0x8D	; 141
    461c:	ff 4f       	sbci	r31, 0xFF	; 255
    461e:	91 83       	std	Z+1, r25	; 0x01
    4620:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4622:	de 01       	movw	r26, r28
    4624:	ab 58       	subi	r26, 0x8B	; 139
    4626:	bf 4f       	sbci	r27, 0xFF	; 255
    4628:	fe 01       	movw	r30, r28
    462a:	eb 58       	subi	r30, 0x8B	; 139
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	80 81       	ld	r24, Z
    4630:	91 81       	ldd	r25, Z+1	; 0x01
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	11 96       	adiw	r26, 0x01	; 1
    4636:	9c 93       	st	X, r25
    4638:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    463a:	fe 01       	movw	r30, r28
    463c:	eb 58       	subi	r30, 0x8B	; 139
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	80 81       	ld	r24, Z
    4642:	91 81       	ldd	r25, Z+1	; 0x01
    4644:	00 97       	sbiw	r24, 0x00	; 0
    4646:	d1 f6       	brne	.-76     	; 0x45fc <H_ESP8266_void_Init+0x578>
    4648:	27 c0       	rjmp	.+78     	; 0x4698 <H_ESP8266_void_Init+0x614>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    464a:	8e 01       	movw	r16, r28
    464c:	0b 58       	subi	r16, 0x8B	; 139
    464e:	1f 4f       	sbci	r17, 0xFF	; 255
    4650:	fe 01       	movw	r30, r28
    4652:	e9 58       	subi	r30, 0x89	; 137
    4654:	ff 4f       	sbci	r31, 0xFF	; 255
    4656:	60 81       	ld	r22, Z
    4658:	71 81       	ldd	r23, Z+1	; 0x01
    465a:	82 81       	ldd	r24, Z+2	; 0x02
    465c:	93 81       	ldd	r25, Z+3	; 0x03
    465e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	f8 01       	movw	r30, r16
    4668:	91 83       	std	Z+1, r25	; 0x01
    466a:	80 83       	st	Z, r24
    466c:	de 01       	movw	r26, r28
    466e:	af 58       	subi	r26, 0x8F	; 143
    4670:	bf 4f       	sbci	r27, 0xFF	; 255
    4672:	fe 01       	movw	r30, r28
    4674:	eb 58       	subi	r30, 0x8B	; 139
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	80 81       	ld	r24, Z
    467a:	91 81       	ldd	r25, Z+1	; 0x01
    467c:	8d 93       	st	X+, r24
    467e:	9c 93       	st	X, r25
    4680:	fe 01       	movw	r30, r28
    4682:	ef 58       	subi	r30, 0x8F	; 143
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	80 81       	ld	r24, Z
    4688:	91 81       	ldd	r25, Z+1	; 0x01
    468a:	01 97       	sbiw	r24, 0x01	; 1
    468c:	f1 f7       	brne	.-4      	; 0x468a <H_ESP8266_void_Init+0x606>
    468e:	fe 01       	movw	r30, r28
    4690:	ef 58       	subi	r30, 0x8F	; 143
    4692:	ff 4f       	sbci	r31, 0xFF	; 255
    4694:	91 83       	std	Z+1, r25	; 0x01
    4696:	80 83       	st	Z, r24
	_delay_ms(500);



	UART_sendString("AT+CIPMUX=0\r\n");					//Single channel
    4698:	89 e8       	ldi	r24, 0x89	; 137
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	while(!ConnectReceiveBuffer());
    46a0:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <ConnectReceiveBuffer>
    46a4:	88 23       	and	r24, r24
    46a6:	e1 f3       	breq	.-8      	; 0x46a0 <H_ESP8266_void_Init+0x61c>
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
    46ae:	fe 01       	movw	r30, r28
    46b0:	e3 59       	subi	r30, 0x93	; 147
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	80 e0       	ldi	r24, 0x00	; 0
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	a0 e2       	ldi	r26, 0x20	; 32
    46ba:	b1 e4       	ldi	r27, 0x41	; 65
    46bc:	80 83       	st	Z, r24
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	a2 83       	std	Z+2, r26	; 0x02
    46c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c4:	8e 01       	movw	r16, r28
    46c6:	07 59       	subi	r16, 0x97	; 151
    46c8:	1f 4f       	sbci	r17, 0xFF	; 255
    46ca:	fe 01       	movw	r30, r28
    46cc:	e3 59       	subi	r30, 0x93	; 147
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	60 81       	ld	r22, Z
    46d2:	71 81       	ldd	r23, Z+1	; 0x01
    46d4:	82 81       	ldd	r24, Z+2	; 0x02
    46d6:	93 81       	ldd	r25, Z+3	; 0x03
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	4a e7       	ldi	r20, 0x7A	; 122
    46de:	55 e4       	ldi	r21, 0x45	; 69
    46e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e4:	dc 01       	movw	r26, r24
    46e6:	cb 01       	movw	r24, r22
    46e8:	f8 01       	movw	r30, r16
    46ea:	80 83       	st	Z, r24
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	a2 83       	std	Z+2, r26	; 0x02
    46f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46f2:	fe 01       	movw	r30, r28
    46f4:	e7 59       	subi	r30, 0x97	; 151
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	60 81       	ld	r22, Z
    46fa:	71 81       	ldd	r23, Z+1	; 0x01
    46fc:	82 81       	ldd	r24, Z+2	; 0x02
    46fe:	93 81       	ldd	r25, Z+3	; 0x03
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	40 e8       	ldi	r20, 0x80	; 128
    4706:	5f e3       	ldi	r21, 0x3F	; 63
    4708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    470c:	88 23       	and	r24, r24
    470e:	44 f4       	brge	.+16     	; 0x4720 <H_ESP8266_void_Init+0x69c>
		__ticks = 1;
    4710:	fe 01       	movw	r30, r28
    4712:	e9 59       	subi	r30, 0x99	; 153
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	80 83       	st	Z, r24
    471e:	64 c0       	rjmp	.+200    	; 0x47e8 <H_ESP8266_void_Init+0x764>
	else if (__tmp > 65535)
    4720:	fe 01       	movw	r30, r28
    4722:	e7 59       	subi	r30, 0x97	; 151
    4724:	ff 4f       	sbci	r31, 0xFF	; 255
    4726:	60 81       	ld	r22, Z
    4728:	71 81       	ldd	r23, Z+1	; 0x01
    472a:	82 81       	ldd	r24, Z+2	; 0x02
    472c:	93 81       	ldd	r25, Z+3	; 0x03
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	3f ef       	ldi	r19, 0xFF	; 255
    4732:	4f e7       	ldi	r20, 0x7F	; 127
    4734:	57 e4       	ldi	r21, 0x47	; 71
    4736:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    473a:	18 16       	cp	r1, r24
    473c:	0c f0       	brlt	.+2      	; 0x4740 <H_ESP8266_void_Init+0x6bc>
    473e:	43 c0       	rjmp	.+134    	; 0x47c6 <H_ESP8266_void_Init+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4740:	fe 01       	movw	r30, r28
    4742:	e3 59       	subi	r30, 0x93	; 147
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	60 81       	ld	r22, Z
    4748:	71 81       	ldd	r23, Z+1	; 0x01
    474a:	82 81       	ldd	r24, Z+2	; 0x02
    474c:	93 81       	ldd	r25, Z+3	; 0x03
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	40 e2       	ldi	r20, 0x20	; 32
    4754:	51 e4       	ldi	r21, 0x41	; 65
    4756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	8e 01       	movw	r16, r28
    4760:	09 59       	subi	r16, 0x99	; 153
    4762:	1f 4f       	sbci	r17, 0xFF	; 255
    4764:	bc 01       	movw	r22, r24
    4766:	cd 01       	movw	r24, r26
    4768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476c:	dc 01       	movw	r26, r24
    476e:	cb 01       	movw	r24, r22
    4770:	f8 01       	movw	r30, r16
    4772:	91 83       	std	Z+1, r25	; 0x01
    4774:	80 83       	st	Z, r24
    4776:	1f c0       	rjmp	.+62     	; 0x47b6 <H_ESP8266_void_Init+0x732>
    4778:	fe 01       	movw	r30, r28
    477a:	eb 59       	subi	r30, 0x9B	; 155
    477c:	ff 4f       	sbci	r31, 0xFF	; 255
    477e:	80 e9       	ldi	r24, 0x90	; 144
    4780:	91 e0       	ldi	r25, 0x01	; 1
    4782:	91 83       	std	Z+1, r25	; 0x01
    4784:	80 83       	st	Z, r24
    4786:	fe 01       	movw	r30, r28
    4788:	eb 59       	subi	r30, 0x9B	; 155
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	80 81       	ld	r24, Z
    478e:	91 81       	ldd	r25, Z+1	; 0x01
    4790:	01 97       	sbiw	r24, 0x01	; 1
    4792:	f1 f7       	brne	.-4      	; 0x4790 <H_ESP8266_void_Init+0x70c>
    4794:	fe 01       	movw	r30, r28
    4796:	eb 59       	subi	r30, 0x9B	; 155
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	91 83       	std	Z+1, r25	; 0x01
    479c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    479e:	de 01       	movw	r26, r28
    47a0:	a9 59       	subi	r26, 0x99	; 153
    47a2:	bf 4f       	sbci	r27, 0xFF	; 255
    47a4:	fe 01       	movw	r30, r28
    47a6:	e9 59       	subi	r30, 0x99	; 153
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	80 81       	ld	r24, Z
    47ac:	91 81       	ldd	r25, Z+1	; 0x01
    47ae:	01 97       	sbiw	r24, 0x01	; 1
    47b0:	11 96       	adiw	r26, 0x01	; 1
    47b2:	9c 93       	st	X, r25
    47b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b6:	fe 01       	movw	r30, r28
    47b8:	e9 59       	subi	r30, 0x99	; 153
    47ba:	ff 4f       	sbci	r31, 0xFF	; 255
    47bc:	80 81       	ld	r24, Z
    47be:	91 81       	ldd	r25, Z+1	; 0x01
    47c0:	00 97       	sbiw	r24, 0x00	; 0
    47c2:	d1 f6       	brne	.-76     	; 0x4778 <H_ESP8266_void_Init+0x6f4>
    47c4:	27 c0       	rjmp	.+78     	; 0x4814 <H_ESP8266_void_Init+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c6:	8e 01       	movw	r16, r28
    47c8:	09 59       	subi	r16, 0x99	; 153
    47ca:	1f 4f       	sbci	r17, 0xFF	; 255
    47cc:	fe 01       	movw	r30, r28
    47ce:	e7 59       	subi	r30, 0x97	; 151
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	60 81       	ld	r22, Z
    47d4:	71 81       	ldd	r23, Z+1	; 0x01
    47d6:	82 81       	ldd	r24, Z+2	; 0x02
    47d8:	93 81       	ldd	r25, Z+3	; 0x03
    47da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47de:	dc 01       	movw	r26, r24
    47e0:	cb 01       	movw	r24, r22
    47e2:	f8 01       	movw	r30, r16
    47e4:	91 83       	std	Z+1, r25	; 0x01
    47e6:	80 83       	st	Z, r24
    47e8:	de 01       	movw	r26, r28
    47ea:	ad 59       	subi	r26, 0x9D	; 157
    47ec:	bf 4f       	sbci	r27, 0xFF	; 255
    47ee:	fe 01       	movw	r30, r28
    47f0:	e9 59       	subi	r30, 0x99	; 153
    47f2:	ff 4f       	sbci	r31, 0xFF	; 255
    47f4:	80 81       	ld	r24, Z
    47f6:	91 81       	ldd	r25, Z+1	; 0x01
    47f8:	8d 93       	st	X+, r24
    47fa:	9c 93       	st	X, r25
    47fc:	fe 01       	movw	r30, r28
    47fe:	ed 59       	subi	r30, 0x9D	; 157
    4800:	ff 4f       	sbci	r31, 0xFF	; 255
    4802:	80 81       	ld	r24, Z
    4804:	91 81       	ldd	r25, Z+1	; 0x01
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	f1 f7       	brne	.-4      	; 0x4806 <H_ESP8266_void_Init+0x782>
    480a:	fe 01       	movw	r30, r28
    480c:	ed 59       	subi	r30, 0x9D	; 157
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	91 83       	std	Z+1, r25	; 0x01
    4812:	80 83       	st	Z, r24
	_delay_ms(10);
	H_LCD_void_sendString("CIPMUX=0 OK");
    4814:	87 e9       	ldi	r24, 0x97	; 151
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
	Clear_REC_Buffer();
    481c:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
    4820:	fe 01       	movw	r30, r28
    4822:	e1 5a       	subi	r30, 0xA1	; 161
    4824:	ff 4f       	sbci	r31, 0xFF	; 255
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	aa ef       	ldi	r26, 0xFA	; 250
    482c:	b3 e4       	ldi	r27, 0x43	; 67
    482e:	80 83       	st	Z, r24
    4830:	91 83       	std	Z+1, r25	; 0x01
    4832:	a2 83       	std	Z+2, r26	; 0x02
    4834:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4836:	8e 01       	movw	r16, r28
    4838:	05 5a       	subi	r16, 0xA5	; 165
    483a:	1f 4f       	sbci	r17, 0xFF	; 255
    483c:	fe 01       	movw	r30, r28
    483e:	e1 5a       	subi	r30, 0xA1	; 161
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	60 81       	ld	r22, Z
    4844:	71 81       	ldd	r23, Z+1	; 0x01
    4846:	82 81       	ldd	r24, Z+2	; 0x02
    4848:	93 81       	ldd	r25, Z+3	; 0x03
    484a:	20 e0       	ldi	r18, 0x00	; 0
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	4a e7       	ldi	r20, 0x7A	; 122
    4850:	55 e4       	ldi	r21, 0x45	; 69
    4852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4856:	dc 01       	movw	r26, r24
    4858:	cb 01       	movw	r24, r22
    485a:	f8 01       	movw	r30, r16
    485c:	80 83       	st	Z, r24
    485e:	91 83       	std	Z+1, r25	; 0x01
    4860:	a2 83       	std	Z+2, r26	; 0x02
    4862:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4864:	fe 01       	movw	r30, r28
    4866:	e5 5a       	subi	r30, 0xA5	; 165
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	60 81       	ld	r22, Z
    486c:	71 81       	ldd	r23, Z+1	; 0x01
    486e:	82 81       	ldd	r24, Z+2	; 0x02
    4870:	93 81       	ldd	r25, Z+3	; 0x03
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	40 e8       	ldi	r20, 0x80	; 128
    4878:	5f e3       	ldi	r21, 0x3F	; 63
    487a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    487e:	88 23       	and	r24, r24
    4880:	44 f4       	brge	.+16     	; 0x4892 <H_ESP8266_void_Init+0x80e>
		__ticks = 1;
    4882:	fe 01       	movw	r30, r28
    4884:	e7 5a       	subi	r30, 0xA7	; 167
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	91 83       	std	Z+1, r25	; 0x01
    488e:	80 83       	st	Z, r24
    4890:	64 c0       	rjmp	.+200    	; 0x495a <H_ESP8266_void_Init+0x8d6>
	else if (__tmp > 65535)
    4892:	fe 01       	movw	r30, r28
    4894:	e5 5a       	subi	r30, 0xA5	; 165
    4896:	ff 4f       	sbci	r31, 0xFF	; 255
    4898:	60 81       	ld	r22, Z
    489a:	71 81       	ldd	r23, Z+1	; 0x01
    489c:	82 81       	ldd	r24, Z+2	; 0x02
    489e:	93 81       	ldd	r25, Z+3	; 0x03
    48a0:	20 e0       	ldi	r18, 0x00	; 0
    48a2:	3f ef       	ldi	r19, 0xFF	; 255
    48a4:	4f e7       	ldi	r20, 0x7F	; 127
    48a6:	57 e4       	ldi	r21, 0x47	; 71
    48a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48ac:	18 16       	cp	r1, r24
    48ae:	0c f0       	brlt	.+2      	; 0x48b2 <H_ESP8266_void_Init+0x82e>
    48b0:	43 c0       	rjmp	.+134    	; 0x4938 <H_ESP8266_void_Init+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48b2:	fe 01       	movw	r30, r28
    48b4:	e1 5a       	subi	r30, 0xA1	; 161
    48b6:	ff 4f       	sbci	r31, 0xFF	; 255
    48b8:	60 81       	ld	r22, Z
    48ba:	71 81       	ldd	r23, Z+1	; 0x01
    48bc:	82 81       	ldd	r24, Z+2	; 0x02
    48be:	93 81       	ldd	r25, Z+3	; 0x03
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	40 e2       	ldi	r20, 0x20	; 32
    48c6:	51 e4       	ldi	r21, 0x41	; 65
    48c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	8e 01       	movw	r16, r28
    48d2:	07 5a       	subi	r16, 0xA7	; 167
    48d4:	1f 4f       	sbci	r17, 0xFF	; 255
    48d6:	bc 01       	movw	r22, r24
    48d8:	cd 01       	movw	r24, r26
    48da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	f8 01       	movw	r30, r16
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	80 83       	st	Z, r24
    48e8:	1f c0       	rjmp	.+62     	; 0x4928 <H_ESP8266_void_Init+0x8a4>
    48ea:	fe 01       	movw	r30, r28
    48ec:	e9 5a       	subi	r30, 0xA9	; 169
    48ee:	ff 4f       	sbci	r31, 0xFF	; 255
    48f0:	80 e9       	ldi	r24, 0x90	; 144
    48f2:	91 e0       	ldi	r25, 0x01	; 1
    48f4:	91 83       	std	Z+1, r25	; 0x01
    48f6:	80 83       	st	Z, r24
    48f8:	fe 01       	movw	r30, r28
    48fa:	e9 5a       	subi	r30, 0xA9	; 169
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	80 81       	ld	r24, Z
    4900:	91 81       	ldd	r25, Z+1	; 0x01
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	f1 f7       	brne	.-4      	; 0x4902 <H_ESP8266_void_Init+0x87e>
    4906:	fe 01       	movw	r30, r28
    4908:	e9 5a       	subi	r30, 0xA9	; 169
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	91 83       	std	Z+1, r25	; 0x01
    490e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4910:	de 01       	movw	r26, r28
    4912:	a7 5a       	subi	r26, 0xA7	; 167
    4914:	bf 4f       	sbci	r27, 0xFF	; 255
    4916:	fe 01       	movw	r30, r28
    4918:	e7 5a       	subi	r30, 0xA7	; 167
    491a:	ff 4f       	sbci	r31, 0xFF	; 255
    491c:	80 81       	ld	r24, Z
    491e:	91 81       	ldd	r25, Z+1	; 0x01
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	11 96       	adiw	r26, 0x01	; 1
    4924:	9c 93       	st	X, r25
    4926:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4928:	fe 01       	movw	r30, r28
    492a:	e7 5a       	subi	r30, 0xA7	; 167
    492c:	ff 4f       	sbci	r31, 0xFF	; 255
    492e:	80 81       	ld	r24, Z
    4930:	91 81       	ldd	r25, Z+1	; 0x01
    4932:	00 97       	sbiw	r24, 0x00	; 0
    4934:	d1 f6       	brne	.-76     	; 0x48ea <H_ESP8266_void_Init+0x866>
    4936:	27 c0       	rjmp	.+78     	; 0x4986 <H_ESP8266_void_Init+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4938:	8e 01       	movw	r16, r28
    493a:	07 5a       	subi	r16, 0xA7	; 167
    493c:	1f 4f       	sbci	r17, 0xFF	; 255
    493e:	fe 01       	movw	r30, r28
    4940:	e5 5a       	subi	r30, 0xA5	; 165
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	60 81       	ld	r22, Z
    4946:	71 81       	ldd	r23, Z+1	; 0x01
    4948:	82 81       	ldd	r24, Z+2	; 0x02
    494a:	93 81       	ldd	r25, Z+3	; 0x03
    494c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	f8 01       	movw	r30, r16
    4956:	91 83       	std	Z+1, r25	; 0x01
    4958:	80 83       	st	Z, r24
    495a:	de 01       	movw	r26, r28
    495c:	ab 5a       	subi	r26, 0xAB	; 171
    495e:	bf 4f       	sbci	r27, 0xFF	; 255
    4960:	fe 01       	movw	r30, r28
    4962:	e7 5a       	subi	r30, 0xA7	; 167
    4964:	ff 4f       	sbci	r31, 0xFF	; 255
    4966:	80 81       	ld	r24, Z
    4968:	91 81       	ldd	r25, Z+1	; 0x01
    496a:	8d 93       	st	X+, r24
    496c:	9c 93       	st	X, r25
    496e:	fe 01       	movw	r30, r28
    4970:	eb 5a       	subi	r30, 0xAB	; 171
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	f1 f7       	brne	.-4      	; 0x4978 <H_ESP8266_void_Init+0x8f4>
    497c:	fe 01       	movw	r30, r28
    497e:	eb 5a       	subi	r30, 0xAB	; 171
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	91 83       	std	Z+1, r25	; 0x01
    4984:	80 83       	st	Z, r24
	_delay_ms(500);

	UART_sendString("AT+CIPMODE=0\r\n");				//Normal Mode
    4986:	83 ea       	ldi	r24, 0xA3	; 163
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	while(!ConnectReceiveBuffer());
    498e:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <ConnectReceiveBuffer>
    4992:	88 23       	and	r24, r24
    4994:	e1 f3       	breq	.-8      	; 0x498e <H_ESP8266_void_Init+0x90a>
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
    499c:	fe 01       	movw	r30, r28
    499e:	ef 5a       	subi	r30, 0xAF	; 175
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	a0 e2       	ldi	r26, 0x20	; 32
    49a8:	b1 e4       	ldi	r27, 0x41	; 65
    49aa:	80 83       	st	Z, r24
    49ac:	91 83       	std	Z+1, r25	; 0x01
    49ae:	a2 83       	std	Z+2, r26	; 0x02
    49b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b2:	8e 01       	movw	r16, r28
    49b4:	03 5b       	subi	r16, 0xB3	; 179
    49b6:	1f 4f       	sbci	r17, 0xFF	; 255
    49b8:	fe 01       	movw	r30, r28
    49ba:	ef 5a       	subi	r30, 0xAF	; 175
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	60 81       	ld	r22, Z
    49c0:	71 81       	ldd	r23, Z+1	; 0x01
    49c2:	82 81       	ldd	r24, Z+2	; 0x02
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	4a e7       	ldi	r20, 0x7A	; 122
    49cc:	55 e4       	ldi	r21, 0x45	; 69
    49ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	f8 01       	movw	r30, r16
    49d8:	80 83       	st	Z, r24
    49da:	91 83       	std	Z+1, r25	; 0x01
    49dc:	a2 83       	std	Z+2, r26	; 0x02
    49de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49e0:	fe 01       	movw	r30, r28
    49e2:	e3 5b       	subi	r30, 0xB3	; 179
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	40 e8       	ldi	r20, 0x80	; 128
    49f4:	5f e3       	ldi	r21, 0x3F	; 63
    49f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49fa:	88 23       	and	r24, r24
    49fc:	44 f4       	brge	.+16     	; 0x4a0e <H_ESP8266_void_Init+0x98a>
		__ticks = 1;
    49fe:	fe 01       	movw	r30, r28
    4a00:	e5 5b       	subi	r30, 0xB5	; 181
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	81 e0       	ldi	r24, 0x01	; 1
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	91 83       	std	Z+1, r25	; 0x01
    4a0a:	80 83       	st	Z, r24
    4a0c:	64 c0       	rjmp	.+200    	; 0x4ad6 <H_ESP8266_void_Init+0xa52>
	else if (__tmp > 65535)
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e3 5b       	subi	r30, 0xB3	; 179
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	60 81       	ld	r22, Z
    4a16:	71 81       	ldd	r23, Z+1	; 0x01
    4a18:	82 81       	ldd	r24, Z+2	; 0x02
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	3f ef       	ldi	r19, 0xFF	; 255
    4a20:	4f e7       	ldi	r20, 0x7F	; 127
    4a22:	57 e4       	ldi	r21, 0x47	; 71
    4a24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a28:	18 16       	cp	r1, r24
    4a2a:	0c f0       	brlt	.+2      	; 0x4a2e <H_ESP8266_void_Init+0x9aa>
    4a2c:	43 c0       	rjmp	.+134    	; 0x4ab4 <H_ESP8266_void_Init+0xa30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a2e:	fe 01       	movw	r30, r28
    4a30:	ef 5a       	subi	r30, 0xAF	; 175
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	60 81       	ld	r22, Z
    4a36:	71 81       	ldd	r23, Z+1	; 0x01
    4a38:	82 81       	ldd	r24, Z+2	; 0x02
    4a3a:	93 81       	ldd	r25, Z+3	; 0x03
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e2       	ldi	r20, 0x20	; 32
    4a42:	51 e4       	ldi	r21, 0x41	; 65
    4a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	8e 01       	movw	r16, r28
    4a4e:	05 5b       	subi	r16, 0xB5	; 181
    4a50:	1f 4f       	sbci	r17, 0xFF	; 255
    4a52:	bc 01       	movw	r22, r24
    4a54:	cd 01       	movw	r24, r26
    4a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	f8 01       	movw	r30, r16
    4a60:	91 83       	std	Z+1, r25	; 0x01
    4a62:	80 83       	st	Z, r24
    4a64:	1f c0       	rjmp	.+62     	; 0x4aa4 <H_ESP8266_void_Init+0xa20>
    4a66:	fe 01       	movw	r30, r28
    4a68:	e7 5b       	subi	r30, 0xB7	; 183
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	80 e9       	ldi	r24, 0x90	; 144
    4a6e:	91 e0       	ldi	r25, 0x01	; 1
    4a70:	91 83       	std	Z+1, r25	; 0x01
    4a72:	80 83       	st	Z, r24
    4a74:	fe 01       	movw	r30, r28
    4a76:	e7 5b       	subi	r30, 0xB7	; 183
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	80 81       	ld	r24, Z
    4a7c:	91 81       	ldd	r25, Z+1	; 0x01
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	f1 f7       	brne	.-4      	; 0x4a7e <H_ESP8266_void_Init+0x9fa>
    4a82:	fe 01       	movw	r30, r28
    4a84:	e7 5b       	subi	r30, 0xB7	; 183
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	91 83       	std	Z+1, r25	; 0x01
    4a8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8c:	de 01       	movw	r26, r28
    4a8e:	a5 5b       	subi	r26, 0xB5	; 181
    4a90:	bf 4f       	sbci	r27, 0xFF	; 255
    4a92:	fe 01       	movw	r30, r28
    4a94:	e5 5b       	subi	r30, 0xB5	; 181
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 81       	ld	r24, Z
    4a9a:	91 81       	ldd	r25, Z+1	; 0x01
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	11 96       	adiw	r26, 0x01	; 1
    4aa0:	9c 93       	st	X, r25
    4aa2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa4:	fe 01       	movw	r30, r28
    4aa6:	e5 5b       	subi	r30, 0xB5	; 181
    4aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aaa:	80 81       	ld	r24, Z
    4aac:	91 81       	ldd	r25, Z+1	; 0x01
    4aae:	00 97       	sbiw	r24, 0x00	; 0
    4ab0:	d1 f6       	brne	.-76     	; 0x4a66 <H_ESP8266_void_Init+0x9e2>
    4ab2:	27 c0       	rjmp	.+78     	; 0x4b02 <H_ESP8266_void_Init+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab4:	8e 01       	movw	r16, r28
    4ab6:	05 5b       	subi	r16, 0xB5	; 181
    4ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aba:	fe 01       	movw	r30, r28
    4abc:	e3 5b       	subi	r30, 0xB3	; 179
    4abe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac0:	60 81       	ld	r22, Z
    4ac2:	71 81       	ldd	r23, Z+1	; 0x01
    4ac4:	82 81       	ldd	r24, Z+2	; 0x02
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	f8 01       	movw	r30, r16
    4ad2:	91 83       	std	Z+1, r25	; 0x01
    4ad4:	80 83       	st	Z, r24
    4ad6:	de 01       	movw	r26, r28
    4ad8:	a9 5b       	subi	r26, 0xB9	; 185
    4ada:	bf 4f       	sbci	r27, 0xFF	; 255
    4adc:	fe 01       	movw	r30, r28
    4ade:	e5 5b       	subi	r30, 0xB5	; 181
    4ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae2:	80 81       	ld	r24, Z
    4ae4:	91 81       	ldd	r25, Z+1	; 0x01
    4ae6:	8d 93       	st	X+, r24
    4ae8:	9c 93       	st	X, r25
    4aea:	fe 01       	movw	r30, r28
    4aec:	e9 5b       	subi	r30, 0xB9	; 185
    4aee:	ff 4f       	sbci	r31, 0xFF	; 255
    4af0:	80 81       	ld	r24, Z
    4af2:	91 81       	ldd	r25, Z+1	; 0x01
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <H_ESP8266_void_Init+0xa70>
    4af8:	fe 01       	movw	r30, r28
    4afa:	e9 5b       	subi	r30, 0xB9	; 185
    4afc:	ff 4f       	sbci	r31, 0xFF	; 255
    4afe:	91 83       	std	Z+1, r25	; 0x01
    4b00:	80 83       	st	Z, r24
	_delay_ms(10);
	H_LCD_void_sendString("CIPMUX=0 OK");
    4b02:	87 e9       	ldi	r24, 0x97	; 151
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
	Clear_REC_Buffer();
    4b0a:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
    4b0e:	fe 01       	movw	r30, r28
    4b10:	ed 5b       	subi	r30, 0xBD	; 189
    4b12:	ff 4f       	sbci	r31, 0xFF	; 255
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	aa ef       	ldi	r26, 0xFA	; 250
    4b1a:	b3 e4       	ldi	r27, 0x43	; 67
    4b1c:	80 83       	st	Z, r24
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	a2 83       	std	Z+2, r26	; 0x02
    4b22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b24:	8e 01       	movw	r16, r28
    4b26:	01 5c       	subi	r16, 0xC1	; 193
    4b28:	1f 4f       	sbci	r17, 0xFF	; 255
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	ed 5b       	subi	r30, 0xBD	; 189
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	60 81       	ld	r22, Z
    4b32:	71 81       	ldd	r23, Z+1	; 0x01
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	93 81       	ldd	r25, Z+3	; 0x03
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	4a e7       	ldi	r20, 0x7A	; 122
    4b3e:	55 e4       	ldi	r21, 0x45	; 69
    4b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	f8 01       	movw	r30, r16
    4b4a:	80 83       	st	Z, r24
    4b4c:	91 83       	std	Z+1, r25	; 0x01
    4b4e:	a2 83       	std	Z+2, r26	; 0x02
    4b50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b52:	fe 01       	movw	r30, r28
    4b54:	ff 96       	adiw	r30, 0x3f	; 63
    4b56:	60 81       	ld	r22, Z
    4b58:	71 81       	ldd	r23, Z+1	; 0x01
    4b5a:	82 81       	ldd	r24, Z+2	; 0x02
    4b5c:	93 81       	ldd	r25, Z+3	; 0x03
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	30 e0       	ldi	r19, 0x00	; 0
    4b62:	40 e8       	ldi	r20, 0x80	; 128
    4b64:	5f e3       	ldi	r21, 0x3F	; 63
    4b66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b6a:	88 23       	and	r24, r24
    4b6c:	2c f4       	brge	.+10     	; 0x4b78 <H_ESP8266_void_Init+0xaf4>
		__ticks = 1;
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	9e af       	std	Y+62, r25	; 0x3e
    4b74:	8d af       	std	Y+61, r24	; 0x3d
    4b76:	46 c0       	rjmp	.+140    	; 0x4c04 <H_ESP8266_void_Init+0xb80>
	else if (__tmp > 65535)
    4b78:	fe 01       	movw	r30, r28
    4b7a:	ff 96       	adiw	r30, 0x3f	; 63
    4b7c:	60 81       	ld	r22, Z
    4b7e:	71 81       	ldd	r23, Z+1	; 0x01
    4b80:	82 81       	ldd	r24, Z+2	; 0x02
    4b82:	93 81       	ldd	r25, Z+3	; 0x03
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	3f ef       	ldi	r19, 0xFF	; 255
    4b88:	4f e7       	ldi	r20, 0x7F	; 127
    4b8a:	57 e4       	ldi	r21, 0x47	; 71
    4b8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b90:	18 16       	cp	r1, r24
    4b92:	64 f5       	brge	.+88     	; 0x4bec <H_ESP8266_void_Init+0xb68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b94:	fe 01       	movw	r30, r28
    4b96:	ed 5b       	subi	r30, 0xBD	; 189
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	60 81       	ld	r22, Z
    4b9c:	71 81       	ldd	r23, Z+1	; 0x01
    4b9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ba0:	93 81       	ldd	r25, Z+3	; 0x03
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	40 e2       	ldi	r20, 0x20	; 32
    4ba8:	51 e4       	ldi	r21, 0x41	; 65
    4baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	bc 01       	movw	r22, r24
    4bb4:	cd 01       	movw	r24, r26
    4bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bba:	dc 01       	movw	r26, r24
    4bbc:	cb 01       	movw	r24, r22
    4bbe:	9e af       	std	Y+62, r25	; 0x3e
    4bc0:	8d af       	std	Y+61, r24	; 0x3d
    4bc2:	0f c0       	rjmp	.+30     	; 0x4be2 <H_ESP8266_void_Init+0xb5e>
    4bc4:	80 e9       	ldi	r24, 0x90	; 144
    4bc6:	91 e0       	ldi	r25, 0x01	; 1
    4bc8:	9c af       	std	Y+60, r25	; 0x3c
    4bca:	8b af       	std	Y+59, r24	; 0x3b
    4bcc:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bce:	9c ad       	ldd	r25, Y+60	; 0x3c
    4bd0:	01 97       	sbiw	r24, 0x01	; 1
    4bd2:	f1 f7       	brne	.-4      	; 0x4bd0 <H_ESP8266_void_Init+0xb4c>
    4bd4:	9c af       	std	Y+60, r25	; 0x3c
    4bd6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bda:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	9e af       	std	Y+62, r25	; 0x3e
    4be0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be2:	8d ad       	ldd	r24, Y+61	; 0x3d
    4be4:	9e ad       	ldd	r25, Y+62	; 0x3e
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	69 f7       	brne	.-38     	; 0x4bc4 <H_ESP8266_void_Init+0xb40>
    4bea:	16 c0       	rjmp	.+44     	; 0x4c18 <H_ESP8266_void_Init+0xb94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bec:	fe 01       	movw	r30, r28
    4bee:	ff 96       	adiw	r30, 0x3f	; 63
    4bf0:	60 81       	ld	r22, Z
    4bf2:	71 81       	ldd	r23, Z+1	; 0x01
    4bf4:	82 81       	ldd	r24, Z+2	; 0x02
    4bf6:	93 81       	ldd	r25, Z+3	; 0x03
    4bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	9e af       	std	Y+62, r25	; 0x3e
    4c02:	8d af       	std	Y+61, r24	; 0x3d
    4c04:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c06:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c08:	9a af       	std	Y+58, r25	; 0x3a
    4c0a:	89 af       	std	Y+57, r24	; 0x39
    4c0c:	89 ad       	ldd	r24, Y+57	; 0x39
    4c0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	f1 f7       	brne	.-4      	; 0x4c10 <H_ESP8266_void_Init+0xb8c>
    4c14:	9a af       	std	Y+58, r25	; 0x3a
    4c16:	89 af       	std	Y+57, r24	; 0x39

	//UART_sendString("AT+CWJAP=\"AndroidAPF2BA\",\"tarek000\"\r\n");//tarek
//	UART_sendString("AT+CWJAP=\"WE_405464\",\"n2k21122_\"\r\n");//mostaa
	//UART_sendString("AT+CWJAP=\"AndroidAP4C5E\",\"12345687\"\r\n");

	UART_sendString("AT+CWJAP=\"WE_2161E0\",\"04002183\"\r\n");
    4c18:	82 eb       	ldi	r24, 0xB2	; 178
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	while(!ConnectReceiveBuffer());
    4c20:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <ConnectReceiveBuffer>
    4c24:	88 23       	and	r24, r24
    4c26:	e1 f3       	breq	.-8      	; 0x4c20 <H_ESP8266_void_Init+0xb9c>
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a0 e2       	ldi	r26, 0x20	; 32
    4c34:	b1 e4       	ldi	r27, 0x41	; 65
    4c36:	8d ab       	std	Y+53, r24	; 0x35
    4c38:	9e ab       	std	Y+54, r25	; 0x36
    4c3a:	af ab       	std	Y+55, r26	; 0x37
    4c3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    4c40:	7e a9       	ldd	r23, Y+54	; 0x36
    4c42:	8f a9       	ldd	r24, Y+55	; 0x37
    4c44:	98 ad       	ldd	r25, Y+56	; 0x38
    4c46:	20 e0       	ldi	r18, 0x00	; 0
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	4a e7       	ldi	r20, 0x7A	; 122
    4c4c:	55 e4       	ldi	r21, 0x45	; 69
    4c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c52:	dc 01       	movw	r26, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	89 ab       	std	Y+49, r24	; 0x31
    4c58:	9a ab       	std	Y+50, r25	; 0x32
    4c5a:	ab ab       	std	Y+51, r26	; 0x33
    4c5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    4c60:	7a a9       	ldd	r23, Y+50	; 0x32
    4c62:	8b a9       	ldd	r24, Y+51	; 0x33
    4c64:	9c a9       	ldd	r25, Y+52	; 0x34
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	40 e8       	ldi	r20, 0x80	; 128
    4c6c:	5f e3       	ldi	r21, 0x3F	; 63
    4c6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c72:	88 23       	and	r24, r24
    4c74:	2c f4       	brge	.+10     	; 0x4c80 <H_ESP8266_void_Init+0xbfc>
		__ticks = 1;
    4c76:	81 e0       	ldi	r24, 0x01	; 1
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	98 ab       	std	Y+48, r25	; 0x30
    4c7c:	8f a7       	std	Y+47, r24	; 0x2f
    4c7e:	3f c0       	rjmp	.+126    	; 0x4cfe <H_ESP8266_void_Init+0xc7a>
	else if (__tmp > 65535)
    4c80:	69 a9       	ldd	r22, Y+49	; 0x31
    4c82:	7a a9       	ldd	r23, Y+50	; 0x32
    4c84:	8b a9       	ldd	r24, Y+51	; 0x33
    4c86:	9c a9       	ldd	r25, Y+52	; 0x34
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	3f ef       	ldi	r19, 0xFF	; 255
    4c8c:	4f e7       	ldi	r20, 0x7F	; 127
    4c8e:	57 e4       	ldi	r21, 0x47	; 71
    4c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c94:	18 16       	cp	r1, r24
    4c96:	4c f5       	brge	.+82     	; 0x4cea <H_ESP8266_void_Init+0xc66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c98:	6d a9       	ldd	r22, Y+53	; 0x35
    4c9a:	7e a9       	ldd	r23, Y+54	; 0x36
    4c9c:	8f a9       	ldd	r24, Y+55	; 0x37
    4c9e:	98 ad       	ldd	r25, Y+56	; 0x38
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	40 e2       	ldi	r20, 0x20	; 32
    4ca6:	51 e4       	ldi	r21, 0x41	; 65
    4ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	bc 01       	movw	r22, r24
    4cb2:	cd 01       	movw	r24, r26
    4cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	98 ab       	std	Y+48, r25	; 0x30
    4cbe:	8f a7       	std	Y+47, r24	; 0x2f
    4cc0:	0f c0       	rjmp	.+30     	; 0x4ce0 <H_ESP8266_void_Init+0xc5c>
    4cc2:	80 e9       	ldi	r24, 0x90	; 144
    4cc4:	91 e0       	ldi	r25, 0x01	; 1
    4cc6:	9e a7       	std	Y+46, r25	; 0x2e
    4cc8:	8d a7       	std	Y+45, r24	; 0x2d
    4cca:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ccc:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	f1 f7       	brne	.-4      	; 0x4cce <H_ESP8266_void_Init+0xc4a>
    4cd2:	9e a7       	std	Y+46, r25	; 0x2e
    4cd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    4cda:	01 97       	sbiw	r24, 0x01	; 1
    4cdc:	98 ab       	std	Y+48, r25	; 0x30
    4cde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    4ce4:	00 97       	sbiw	r24, 0x00	; 0
    4ce6:	69 f7       	brne	.-38     	; 0x4cc2 <H_ESP8266_void_Init+0xc3e>
    4ce8:	14 c0       	rjmp	.+40     	; 0x4d12 <H_ESP8266_void_Init+0xc8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cea:	69 a9       	ldd	r22, Y+49	; 0x31
    4cec:	7a a9       	ldd	r23, Y+50	; 0x32
    4cee:	8b a9       	ldd	r24, Y+51	; 0x33
    4cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    4cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	98 ab       	std	Y+48, r25	; 0x30
    4cfc:	8f a7       	std	Y+47, r24	; 0x2f
    4cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d00:	98 a9       	ldd	r25, Y+48	; 0x30
    4d02:	9c a7       	std	Y+44, r25	; 0x2c
    4d04:	8b a7       	std	Y+43, r24	; 0x2b
    4d06:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d08:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d0a:	01 97       	sbiw	r24, 0x01	; 1
    4d0c:	f1 f7       	brne	.-4      	; 0x4d0a <H_ESP8266_void_Init+0xc86>
    4d0e:	9c a7       	std	Y+44, r25	; 0x2c
    4d10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	H_LCD_void_sendString("WIFI Connected");
    4d12:	84 ed       	ldi	r24, 0xD4	; 212
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
	Clear_REC_Buffer();
    4d1a:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
    4d1e:	80 e0       	ldi	r24, 0x00	; 0
    4d20:	90 e4       	ldi	r25, 0x40	; 64
    4d22:	ac e9       	ldi	r26, 0x9C	; 156
    4d24:	b5 e4       	ldi	r27, 0x45	; 69
    4d26:	8f a3       	std	Y+39, r24	; 0x27
    4d28:	98 a7       	std	Y+40, r25	; 0x28
    4d2a:	a9 a7       	std	Y+41, r26	; 0x29
    4d2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d2e:	6f a1       	ldd	r22, Y+39	; 0x27
    4d30:	78 a5       	ldd	r23, Y+40	; 0x28
    4d32:	89 a5       	ldd	r24, Y+41	; 0x29
    4d34:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	4a e7       	ldi	r20, 0x7A	; 122
    4d3c:	55 e4       	ldi	r21, 0x45	; 69
    4d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d42:	dc 01       	movw	r26, r24
    4d44:	cb 01       	movw	r24, r22
    4d46:	8b a3       	std	Y+35, r24	; 0x23
    4d48:	9c a3       	std	Y+36, r25	; 0x24
    4d4a:	ad a3       	std	Y+37, r26	; 0x25
    4d4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    4d50:	7c a1       	ldd	r23, Y+36	; 0x24
    4d52:	8d a1       	ldd	r24, Y+37	; 0x25
    4d54:	9e a1       	ldd	r25, Y+38	; 0x26
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	40 e8       	ldi	r20, 0x80	; 128
    4d5c:	5f e3       	ldi	r21, 0x3F	; 63
    4d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d62:	88 23       	and	r24, r24
    4d64:	2c f4       	brge	.+10     	; 0x4d70 <H_ESP8266_void_Init+0xcec>
		__ticks = 1;
    4d66:	81 e0       	ldi	r24, 0x01	; 1
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	9a a3       	std	Y+34, r25	; 0x22
    4d6c:	89 a3       	std	Y+33, r24	; 0x21
    4d6e:	3f c0       	rjmp	.+126    	; 0x4dee <H_ESP8266_void_Init+0xd6a>
	else if (__tmp > 65535)
    4d70:	6b a1       	ldd	r22, Y+35	; 0x23
    4d72:	7c a1       	ldd	r23, Y+36	; 0x24
    4d74:	8d a1       	ldd	r24, Y+37	; 0x25
    4d76:	9e a1       	ldd	r25, Y+38	; 0x26
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	3f ef       	ldi	r19, 0xFF	; 255
    4d7c:	4f e7       	ldi	r20, 0x7F	; 127
    4d7e:	57 e4       	ldi	r21, 0x47	; 71
    4d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d84:	18 16       	cp	r1, r24
    4d86:	4c f5       	brge	.+82     	; 0x4dda <H_ESP8266_void_Init+0xd56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d88:	6f a1       	ldd	r22, Y+39	; 0x27
    4d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    4d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    4d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d90:	20 e0       	ldi	r18, 0x00	; 0
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	40 e2       	ldi	r20, 0x20	; 32
    4d96:	51 e4       	ldi	r21, 0x41	; 65
    4d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d9c:	dc 01       	movw	r26, r24
    4d9e:	cb 01       	movw	r24, r22
    4da0:	bc 01       	movw	r22, r24
    4da2:	cd 01       	movw	r24, r26
    4da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	9a a3       	std	Y+34, r25	; 0x22
    4dae:	89 a3       	std	Y+33, r24	; 0x21
    4db0:	0f c0       	rjmp	.+30     	; 0x4dd0 <H_ESP8266_void_Init+0xd4c>
    4db2:	80 e9       	ldi	r24, 0x90	; 144
    4db4:	91 e0       	ldi	r25, 0x01	; 1
    4db6:	98 a3       	std	Y+32, r25	; 0x20
    4db8:	8f 8f       	std	Y+31, r24	; 0x1f
    4dba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dbc:	98 a1       	ldd	r25, Y+32	; 0x20
    4dbe:	01 97       	sbiw	r24, 0x01	; 1
    4dc0:	f1 f7       	brne	.-4      	; 0x4dbe <H_ESP8266_void_Init+0xd3a>
    4dc2:	98 a3       	std	Y+32, r25	; 0x20
    4dc4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc6:	89 a1       	ldd	r24, Y+33	; 0x21
    4dc8:	9a a1       	ldd	r25, Y+34	; 0x22
    4dca:	01 97       	sbiw	r24, 0x01	; 1
    4dcc:	9a a3       	std	Y+34, r25	; 0x22
    4dce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    4dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    4dd4:	00 97       	sbiw	r24, 0x00	; 0
    4dd6:	69 f7       	brne	.-38     	; 0x4db2 <H_ESP8266_void_Init+0xd2e>
    4dd8:	14 c0       	rjmp	.+40     	; 0x4e02 <H_ESP8266_void_Init+0xd7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dda:	6b a1       	ldd	r22, Y+35	; 0x23
    4ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    4dde:	8d a1       	ldd	r24, Y+37	; 0x25
    4de0:	9e a1       	ldd	r25, Y+38	; 0x26
    4de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	9a a3       	std	Y+34, r25	; 0x22
    4dec:	89 a3       	std	Y+33, r24	; 0x21
    4dee:	89 a1       	ldd	r24, Y+33	; 0x21
    4df0:	9a a1       	ldd	r25, Y+34	; 0x22
    4df2:	9e 8f       	std	Y+30, r25	; 0x1e
    4df4:	8d 8f       	std	Y+29, r24	; 0x1d
    4df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4df8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4dfa:	01 97       	sbiw	r24, 0x01	; 1
    4dfc:	f1 f7       	brne	.-4      	; 0x4dfa <H_ESP8266_void_Init+0xd76>
    4dfe:	9e 8f       	std	Y+30, r25	; 0x1e
    4e00:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5000);

	UART_sendString("AT+CIPSTART=\"TCP\",\"broker.mqttdashboard.com\",1883\r\n");
    4e02:	83 ee       	ldi	r24, 0xE3	; 227
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	while(!ConnectReceiveBuffer());
    4e0a:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <ConnectReceiveBuffer>
    4e0e:	88 23       	and	r24, r24
    4e10:	e1 f3       	breq	.-8      	; 0x4e0a <H_ESP8266_void_Init+0xd86>
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	a0 e2       	ldi	r26, 0x20	; 32
    4e1e:	b1 e4       	ldi	r27, 0x41	; 65
    4e20:	89 8f       	std	Y+25, r24	; 0x19
    4e22:	9a 8f       	std	Y+26, r25	; 0x1a
    4e24:	ab 8f       	std	Y+27, r26	; 0x1b
    4e26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e28:	69 8d       	ldd	r22, Y+25	; 0x19
    4e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e30:	20 e0       	ldi	r18, 0x00	; 0
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	4a e7       	ldi	r20, 0x7A	; 122
    4e36:	55 e4       	ldi	r21, 0x45	; 69
    4e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	8d 8b       	std	Y+21, r24	; 0x15
    4e42:	9e 8b       	std	Y+22, r25	; 0x16
    4e44:	af 8b       	std	Y+23, r26	; 0x17
    4e46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e48:	6d 89       	ldd	r22, Y+21	; 0x15
    4e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	40 e8       	ldi	r20, 0x80	; 128
    4e56:	5f e3       	ldi	r21, 0x3F	; 63
    4e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e5c:	88 23       	and	r24, r24
    4e5e:	2c f4       	brge	.+10     	; 0x4e6a <H_ESP8266_void_Init+0xde6>
		__ticks = 1;
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	9c 8b       	std	Y+20, r25	; 0x14
    4e66:	8b 8b       	std	Y+19, r24	; 0x13
    4e68:	3f c0       	rjmp	.+126    	; 0x4ee8 <H_ESP8266_void_Init+0xe64>
	else if (__tmp > 65535)
    4e6a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e6c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e6e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e70:	98 8d       	ldd	r25, Y+24	; 0x18
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	3f ef       	ldi	r19, 0xFF	; 255
    4e76:	4f e7       	ldi	r20, 0x7F	; 127
    4e78:	57 e4       	ldi	r21, 0x47	; 71
    4e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e7e:	18 16       	cp	r1, r24
    4e80:	4c f5       	brge	.+82     	; 0x4ed4 <H_ESP8266_void_Init+0xe50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e82:	69 8d       	ldd	r22, Y+25	; 0x19
    4e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	40 e2       	ldi	r20, 0x20	; 32
    4e90:	51 e4       	ldi	r21, 0x41	; 65
    4e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	bc 01       	movw	r22, r24
    4e9c:	cd 01       	movw	r24, r26
    4e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	9c 8b       	std	Y+20, r25	; 0x14
    4ea8:	8b 8b       	std	Y+19, r24	; 0x13
    4eaa:	0f c0       	rjmp	.+30     	; 0x4eca <H_ESP8266_void_Init+0xe46>
    4eac:	80 e9       	ldi	r24, 0x90	; 144
    4eae:	91 e0       	ldi	r25, 0x01	; 1
    4eb0:	9a 8b       	std	Y+18, r25	; 0x12
    4eb2:	89 8b       	std	Y+17, r24	; 0x11
    4eb4:	89 89       	ldd	r24, Y+17	; 0x11
    4eb6:	9a 89       	ldd	r25, Y+18	; 0x12
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	f1 f7       	brne	.-4      	; 0x4eb8 <H_ESP8266_void_Init+0xe34>
    4ebc:	9a 8b       	std	Y+18, r25	; 0x12
    4ebe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ec4:	01 97       	sbiw	r24, 0x01	; 1
    4ec6:	9c 8b       	std	Y+20, r25	; 0x14
    4ec8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eca:	8b 89       	ldd	r24, Y+19	; 0x13
    4ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	69 f7       	brne	.-38     	; 0x4eac <H_ESP8266_void_Init+0xe28>
    4ed2:	14 c0       	rjmp	.+40     	; 0x4efc <H_ESP8266_void_Init+0xe78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eda:	98 8d       	ldd	r25, Y+24	; 0x18
    4edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	9c 8b       	std	Y+20, r25	; 0x14
    4ee6:	8b 8b       	std	Y+19, r24	; 0x13
    4ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    4eea:	9c 89       	ldd	r25, Y+20	; 0x14
    4eec:	98 8b       	std	Y+16, r25	; 0x10
    4eee:	8f 87       	std	Y+15, r24	; 0x0f
    4ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ef2:	98 89       	ldd	r25, Y+16	; 0x10
    4ef4:	01 97       	sbiw	r24, 0x01	; 1
    4ef6:	f1 f7       	brne	.-4      	; 0x4ef4 <H_ESP8266_void_Init+0xe70>
    4ef8:	98 8b       	std	Y+16, r25	; 0x10
    4efa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	H_LCD_void_sendString("Broker Connected");
    4efc:	87 e1       	ldi	r24, 0x17	; 23
    4efe:	91 e0       	ldi	r25, 0x01	; 1
    4f00:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
	Clear_REC_Buffer();
    4f04:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	90 e4       	ldi	r25, 0x40	; 64
    4f0c:	ac e9       	ldi	r26, 0x9C	; 156
    4f0e:	b5 e4       	ldi	r27, 0x45	; 69
    4f10:	8b 87       	std	Y+11, r24	; 0x0b
    4f12:	9c 87       	std	Y+12, r25	; 0x0c
    4f14:	ad 87       	std	Y+13, r26	; 0x0d
    4f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	4a e7       	ldi	r20, 0x7A	; 122
    4f26:	55 e4       	ldi	r21, 0x45	; 69
    4f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	cb 01       	movw	r24, r22
    4f30:	8f 83       	std	Y+7, r24	; 0x07
    4f32:	98 87       	std	Y+8, r25	; 0x08
    4f34:	a9 87       	std	Y+9, r26	; 0x09
    4f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f38:	6f 81       	ldd	r22, Y+7	; 0x07
    4f3a:	78 85       	ldd	r23, Y+8	; 0x08
    4f3c:	89 85       	ldd	r24, Y+9	; 0x09
    4f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	40 e8       	ldi	r20, 0x80	; 128
    4f46:	5f e3       	ldi	r21, 0x3F	; 63
    4f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f4c:	88 23       	and	r24, r24
    4f4e:	2c f4       	brge	.+10     	; 0x4f5a <H_ESP8266_void_Init+0xed6>
		__ticks = 1;
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	9e 83       	std	Y+6, r25	; 0x06
    4f56:	8d 83       	std	Y+5, r24	; 0x05
    4f58:	3f c0       	rjmp	.+126    	; 0x4fd8 <H_ESP8266_void_Init+0xf54>
	else if (__tmp > 65535)
    4f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f5c:	78 85       	ldd	r23, Y+8	; 0x08
    4f5e:	89 85       	ldd	r24, Y+9	; 0x09
    4f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	3f ef       	ldi	r19, 0xFF	; 255
    4f66:	4f e7       	ldi	r20, 0x7F	; 127
    4f68:	57 e4       	ldi	r21, 0x47	; 71
    4f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f6e:	18 16       	cp	r1, r24
    4f70:	4c f5       	brge	.+82     	; 0x4fc4 <H_ESP8266_void_Init+0xf40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e2       	ldi	r20, 0x20	; 32
    4f80:	51 e4       	ldi	r21, 0x41	; 65
    4f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	bc 01       	movw	r22, r24
    4f8c:	cd 01       	movw	r24, r26
    4f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	9e 83       	std	Y+6, r25	; 0x06
    4f98:	8d 83       	std	Y+5, r24	; 0x05
    4f9a:	0f c0       	rjmp	.+30     	; 0x4fba <H_ESP8266_void_Init+0xf36>
    4f9c:	80 e9       	ldi	r24, 0x90	; 144
    4f9e:	91 e0       	ldi	r25, 0x01	; 1
    4fa0:	9c 83       	std	Y+4, r25	; 0x04
    4fa2:	8b 83       	std	Y+3, r24	; 0x03
    4fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa8:	01 97       	sbiw	r24, 0x01	; 1
    4faa:	f1 f7       	brne	.-4      	; 0x4fa8 <H_ESP8266_void_Init+0xf24>
    4fac:	9c 83       	std	Y+4, r25	; 0x04
    4fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	9e 83       	std	Y+6, r25	; 0x06
    4fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fba:	8d 81       	ldd	r24, Y+5	; 0x05
    4fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    4fbe:	00 97       	sbiw	r24, 0x00	; 0
    4fc0:	69 f7       	brne	.-38     	; 0x4f9c <H_ESP8266_void_Init+0xf18>
    4fc2:	14 c0       	rjmp	.+40     	; 0x4fec <H_ESP8266_void_Init+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc6:	78 85       	ldd	r23, Y+8	; 0x08
    4fc8:	89 85       	ldd	r24, Y+9	; 0x09
    4fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	9e 83       	std	Y+6, r25	; 0x06
    4fd6:	8d 83       	std	Y+5, r24	; 0x05
    4fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4fda:	9e 81       	ldd	r25, Y+6	; 0x06
    4fdc:	9a 83       	std	Y+2, r25	; 0x02
    4fde:	89 83       	std	Y+1, r24	; 0x01
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	f1 f7       	brne	.-4      	; 0x4fe4 <H_ESP8266_void_Init+0xf60>
    4fe8:	9a 83       	std	Y+2, r25	; 0x02
    4fea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);

}
    4fec:	c5 55       	subi	r28, 0x55	; 85
    4fee:	df 4f       	sbci	r29, 0xFF	; 255
    4ff0:	0f b6       	in	r0, 0x3f	; 63
    4ff2:	f8 94       	cli
    4ff4:	de bf       	out	0x3e, r29	; 62
    4ff6:	0f be       	out	0x3f, r0	; 63
    4ff8:	cd bf       	out	0x3d, r28	; 61
    4ffa:	cf 91       	pop	r28
    4ffc:	df 91       	pop	r29
    4ffe:	1f 91       	pop	r17
    5000:	0f 91       	pop	r16
    5002:	08 95       	ret

00005004 <H_ESP8266_void_sendConnect>:


void H_ESP8266_void_sendConnect(u8 *clientID)
{
    5004:	df 93       	push	r29
    5006:	cf 93       	push	r28
    5008:	cd b7       	in	r28, 0x3d	; 61
    500a:	de b7       	in	r29, 0x3e	; 62
    500c:	c0 51       	subi	r28, 0x10	; 16
    500e:	d1 40       	sbci	r29, 0x01	; 1
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	fe 01       	movw	r30, r28
    501c:	e1 5f       	subi	r30, 0xF1	; 241
    501e:	fe 4f       	sbci	r31, 0xFE	; 254
    5020:	91 83       	std	Z+1, r25	; 0x01
    5022:	80 83       	st	Z, r24
	u8 num = 14+(u8)strlen(clientID);
    5024:	fe 01       	movw	r30, r28
    5026:	e1 5f       	subi	r30, 0xF1	; 241
    5028:	fe 4f       	sbci	r31, 0xFE	; 254
    502a:	80 81       	ld	r24, Z
    502c:	91 81       	ldd	r25, Z+1	; 0x01
    502e:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    5032:	82 5f       	subi	r24, 0xF2	; 242
    5034:	8f 87       	std	Y+15, r24	; 0x0f
	u8 int_str[255];
	itoa(num,int_str,10);
    5036:	8f 85       	ldd	r24, Y+15	; 0x0f
    5038:	88 2f       	mov	r24, r24
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	9e 01       	movw	r18, r28
    503e:	20 5f       	subi	r18, 0xF0	; 240
    5040:	3f 4f       	sbci	r19, 0xFF	; 255
    5042:	b9 01       	movw	r22, r18
    5044:	4a e0       	ldi	r20, 0x0A	; 10
    5046:	50 e0       	ldi	r21, 0x00	; 0
    5048:	0e 94 ab 32 	call	0x6556	; 0x6556 <itoa>

	UART_sendString("AT+CIPSEND=");
    504c:	88 e2       	ldi	r24, 0x28	; 40
    504e:	91 e0       	ldi	r25, 0x01	; 1
    5050:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	UART_sendString(int_str);
    5054:	ce 01       	movw	r24, r28
    5056:	40 96       	adiw	r24, 0x10	; 16
    5058:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	UART_sendString("\r\n");
    505c:	84 e3       	ldi	r24, 0x34	; 52
    505e:	91 e0       	ldi	r25, 0x01	; 1
    5060:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
//	while(!Check_Respond("OK\r\n> "))
//	{
//		_delay_ms(1);
//	}
	MQTT_Connect(clientID);
    5064:	fe 01       	movw	r30, r28
    5066:	e1 5f       	subi	r30, 0xF1	; 241
    5068:	fe 4f       	sbci	r31, 0xFE	; 254
    506a:	80 81       	ld	r24, Z
    506c:	91 81       	ldd	r25, Z+1	; 0x01
    506e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <MQTT_Connect>
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	aa e7       	ldi	r26, 0x7A	; 122
    5078:	b4 e4       	ldi	r27, 0x44	; 68
    507a:	8b 87       	std	Y+11, r24	; 0x0b
    507c:	9c 87       	std	Y+12, r25	; 0x0c
    507e:	ad 87       	std	Y+13, r26	; 0x0d
    5080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5082:	6b 85       	ldd	r22, Y+11	; 0x0b
    5084:	7c 85       	ldd	r23, Y+12	; 0x0c
    5086:	8d 85       	ldd	r24, Y+13	; 0x0d
    5088:	9e 85       	ldd	r25, Y+14	; 0x0e
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	4a e7       	ldi	r20, 0x7A	; 122
    5090:	55 e4       	ldi	r21, 0x45	; 69
    5092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	8f 83       	std	Y+7, r24	; 0x07
    509c:	98 87       	std	Y+8, r25	; 0x08
    509e:	a9 87       	std	Y+9, r26	; 0x09
    50a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50a2:	6f 81       	ldd	r22, Y+7	; 0x07
    50a4:	78 85       	ldd	r23, Y+8	; 0x08
    50a6:	89 85       	ldd	r24, Y+9	; 0x09
    50a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	40 e8       	ldi	r20, 0x80	; 128
    50b0:	5f e3       	ldi	r21, 0x3F	; 63
    50b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50b6:	88 23       	and	r24, r24
    50b8:	2c f4       	brge	.+10     	; 0x50c4 <H_ESP8266_void_sendConnect+0xc0>
		__ticks = 1;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	9e 83       	std	Y+6, r25	; 0x06
    50c0:	8d 83       	std	Y+5, r24	; 0x05
    50c2:	3f c0       	rjmp	.+126    	; 0x5142 <H_ESP8266_void_sendConnect+0x13e>
	else if (__tmp > 65535)
    50c4:	6f 81       	ldd	r22, Y+7	; 0x07
    50c6:	78 85       	ldd	r23, Y+8	; 0x08
    50c8:	89 85       	ldd	r24, Y+9	; 0x09
    50ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    50cc:	20 e0       	ldi	r18, 0x00	; 0
    50ce:	3f ef       	ldi	r19, 0xFF	; 255
    50d0:	4f e7       	ldi	r20, 0x7F	; 127
    50d2:	57 e4       	ldi	r21, 0x47	; 71
    50d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50d8:	18 16       	cp	r1, r24
    50da:	4c f5       	brge	.+82     	; 0x512e <H_ESP8266_void_sendConnect+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    50de:	7c 85       	ldd	r23, Y+12	; 0x0c
    50e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    50e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	40 e2       	ldi	r20, 0x20	; 32
    50ea:	51 e4       	ldi	r21, 0x41	; 65
    50ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50f0:	dc 01       	movw	r26, r24
    50f2:	cb 01       	movw	r24, r22
    50f4:	bc 01       	movw	r22, r24
    50f6:	cd 01       	movw	r24, r26
    50f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50fc:	dc 01       	movw	r26, r24
    50fe:	cb 01       	movw	r24, r22
    5100:	9e 83       	std	Y+6, r25	; 0x06
    5102:	8d 83       	std	Y+5, r24	; 0x05
    5104:	0f c0       	rjmp	.+30     	; 0x5124 <H_ESP8266_void_sendConnect+0x120>
    5106:	80 e9       	ldi	r24, 0x90	; 144
    5108:	91 e0       	ldi	r25, 0x01	; 1
    510a:	9c 83       	std	Y+4, r25	; 0x04
    510c:	8b 83       	std	Y+3, r24	; 0x03
    510e:	8b 81       	ldd	r24, Y+3	; 0x03
    5110:	9c 81       	ldd	r25, Y+4	; 0x04
    5112:	01 97       	sbiw	r24, 0x01	; 1
    5114:	f1 f7       	brne	.-4      	; 0x5112 <H_ESP8266_void_sendConnect+0x10e>
    5116:	9c 83       	std	Y+4, r25	; 0x04
    5118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    511a:	8d 81       	ldd	r24, Y+5	; 0x05
    511c:	9e 81       	ldd	r25, Y+6	; 0x06
    511e:	01 97       	sbiw	r24, 0x01	; 1
    5120:	9e 83       	std	Y+6, r25	; 0x06
    5122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5124:	8d 81       	ldd	r24, Y+5	; 0x05
    5126:	9e 81       	ldd	r25, Y+6	; 0x06
    5128:	00 97       	sbiw	r24, 0x00	; 0
    512a:	69 f7       	brne	.-38     	; 0x5106 <H_ESP8266_void_sendConnect+0x102>
    512c:	14 c0       	rjmp	.+40     	; 0x5156 <H_ESP8266_void_sendConnect+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    512e:	6f 81       	ldd	r22, Y+7	; 0x07
    5130:	78 85       	ldd	r23, Y+8	; 0x08
    5132:	89 85       	ldd	r24, Y+9	; 0x09
    5134:	9a 85       	ldd	r25, Y+10	; 0x0a
    5136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	9e 83       	std	Y+6, r25	; 0x06
    5140:	8d 83       	std	Y+5, r24	; 0x05
    5142:	8d 81       	ldd	r24, Y+5	; 0x05
    5144:	9e 81       	ldd	r25, Y+6	; 0x06
    5146:	9a 83       	std	Y+2, r25	; 0x02
    5148:	89 83       	std	Y+1, r24	; 0x01
    514a:	89 81       	ldd	r24, Y+1	; 0x01
    514c:	9a 81       	ldd	r25, Y+2	; 0x02
    514e:	01 97       	sbiw	r24, 0x01	; 1
    5150:	f1 f7       	brne	.-4      	; 0x514e <H_ESP8266_void_sendConnect+0x14a>
    5152:	9a 83       	std	Y+2, r25	; 0x02
    5154:	89 83       	std	Y+1, r24	; 0x01
//	while(!Check_Word_in_Respond("+IPD"))
//	{
//		_delay_ms(1);
//	}
	_delay_ms(1000);
	Clear_REC_Buffer();
    5156:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
}
    515a:	c0 5f       	subi	r28, 0xF0	; 240
    515c:	de 4f       	sbci	r29, 0xFE	; 254
    515e:	0f b6       	in	r0, 0x3f	; 63
    5160:	f8 94       	cli
    5162:	de bf       	out	0x3e, r29	; 62
    5164:	0f be       	out	0x3f, r0	; 63
    5166:	cd bf       	out	0x3d, r28	; 61
    5168:	cf 91       	pop	r28
    516a:	df 91       	pop	r29
    516c:	08 95       	ret

0000516e <H_ESP8266_void_sendPublish>:

void H_ESP8266_void_sendPublish(u8 *topic,u8* msg)
{
    516e:	df 93       	push	r29
    5170:	cf 93       	push	r28
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
    5176:	c5 50       	subi	r28, 0x05	; 5
    5178:	d1 40       	sbci	r29, 0x01	; 1
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	de bf       	out	0x3e, r29	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	cd bf       	out	0x3d, r28	; 61
    5184:	fe 01       	movw	r30, r28
    5186:	ee 5f       	subi	r30, 0xFE	; 254
    5188:	fe 4f       	sbci	r31, 0xFE	; 254
    518a:	91 83       	std	Z+1, r25	; 0x01
    518c:	80 83       	st	Z, r24
    518e:	fe 01       	movw	r30, r28
    5190:	ec 5f       	subi	r30, 0xFC	; 252
    5192:	fe 4f       	sbci	r31, 0xFE	; 254
    5194:	71 83       	std	Z+1, r23	; 0x01
    5196:	60 83       	st	Z, r22
	SUB_Flag=0;
    5198:	10 92 0f 04 	sts	0x040F, r1

	u8 int_str[255];
	u8 Topic_len=(u8)strlen(topic);
    519c:	fe 01       	movw	r30, r28
    519e:	ee 5f       	subi	r30, 0xFE	; 254
    51a0:	fe 4f       	sbci	r31, 0xFE	; 254
    51a2:	80 81       	ld	r24, Z
    51a4:	91 81       	ldd	r25, Z+1	; 0x01
    51a6:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    51aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 msg_len=(u8)strlen(msg);
    51ac:	fe 01       	movw	r30, r28
    51ae:	ec 5f       	subi	r30, 0xFC	; 252
    51b0:	fe 4f       	sbci	r31, 0xFE	; 254
    51b2:	80 81       	ld	r24, Z
    51b4:	91 81       	ldd	r25, Z+1	; 0x01
    51b6:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    51ba:	89 83       	std	Y+1, r24	; 0x01
	itoa(6+Topic_len+msg_len,int_str,10);
    51bc:	8a 81       	ldd	r24, Y+2	; 0x02
    51be:	88 2f       	mov	r24, r24
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	9c 01       	movw	r18, r24
    51c4:	2a 5f       	subi	r18, 0xFA	; 250
    51c6:	3f 4f       	sbci	r19, 0xFF	; 255
    51c8:	89 81       	ldd	r24, Y+1	; 0x01
    51ca:	88 2f       	mov	r24, r24
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	82 0f       	add	r24, r18
    51d0:	93 1f       	adc	r25, r19
    51d2:	9e 01       	movw	r18, r28
    51d4:	2d 5f       	subi	r18, 0xFD	; 253
    51d6:	3f 4f       	sbci	r19, 0xFF	; 255
    51d8:	b9 01       	movw	r22, r18
    51da:	4a e0       	ldi	r20, 0x0A	; 10
    51dc:	50 e0       	ldi	r21, 0x00	; 0
    51de:	0e 94 ab 32 	call	0x6556	; 0x6556 <itoa>
	UART_sendString("AT+CIPSEND=");
    51e2:	88 e2       	ldi	r24, 0x28	; 40
    51e4:	91 e0       	ldi	r25, 0x01	; 1
    51e6:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	UART_sendString(int_str);
    51ea:	ce 01       	movw	r24, r28
    51ec:	03 96       	adiw	r24, 0x03	; 3
    51ee:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	UART_sendString("\r\n");
    51f2:	84 e3       	ldi	r24, 0x34	; 52
    51f4:	91 e0       	ldi	r25, 0x01	; 1
    51f6:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
//	while(!Check_Respond("\r\nOK\r\n> "))
//	{
//		_delay_ms(1);
//	}

	MQTT_Publish(topic, msg);
    51fa:	fe 01       	movw	r30, r28
    51fc:	ee 5f       	subi	r30, 0xFE	; 254
    51fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5200:	80 81       	ld	r24, Z
    5202:	91 81       	ldd	r25, Z+1	; 0x01
    5204:	fe 01       	movw	r30, r28
    5206:	ec 5f       	subi	r30, 0xFC	; 252
    5208:	fe 4f       	sbci	r31, 0xFE	; 254
    520a:	20 81       	ld	r18, Z
    520c:	31 81       	ldd	r19, Z+1	; 0x01
    520e:	b9 01       	movw	r22, r18
    5210:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <MQTT_Publish>
	Times=0;
    5214:	10 92 0c 04 	sts	0x040C, r1
	SUB_Flag=1;
    5218:	81 e0       	ldi	r24, 0x01	; 1
    521a:	80 93 0f 04 	sts	0x040F, r24

}
    521e:	cb 5f       	subi	r28, 0xFB	; 251
    5220:	de 4f       	sbci	r29, 0xFE	; 254
    5222:	0f b6       	in	r0, 0x3f	; 63
    5224:	f8 94       	cli
    5226:	de bf       	out	0x3e, r29	; 62
    5228:	0f be       	out	0x3f, r0	; 63
    522a:	cd bf       	out	0x3d, r28	; 61
    522c:	cf 91       	pop	r28
    522e:	df 91       	pop	r29
    5230:	08 95       	ret

00005232 <H_ESP8266_void_sendSubscribe>:

void H_ESP8266_void_sendSubscribe(u8* topic)
{
    5232:	df 93       	push	r29
    5234:	cf 93       	push	r28
    5236:	cd b7       	in	r28, 0x3d	; 61
    5238:	de b7       	in	r29, 0x3e	; 62
    523a:	c0 51       	subi	r28, 0x10	; 16
    523c:	d1 40       	sbci	r29, 0x01	; 1
    523e:	0f b6       	in	r0, 0x3f	; 63
    5240:	f8 94       	cli
    5242:	de bf       	out	0x3e, r29	; 62
    5244:	0f be       	out	0x3f, r0	; 63
    5246:	cd bf       	out	0x3d, r28	; 61
    5248:	fe 01       	movw	r30, r28
    524a:	e1 5f       	subi	r30, 0xF1	; 241
    524c:	fe 4f       	sbci	r31, 0xFE	; 254
    524e:	91 83       	std	Z+1, r25	; 0x01
    5250:	80 83       	st	Z, r24
	flag_phase=Connection_phase;
    5252:	10 92 a7 03 	sts	0x03A7, r1

	u8 int_str[255];
	u8 Topic_len=(u8)strlen(topic);
    5256:	fe 01       	movw	r30, r28
    5258:	e1 5f       	subi	r30, 0xF1	; 241
    525a:	fe 4f       	sbci	r31, 0xFE	; 254
    525c:	80 81       	ld	r24, Z
    525e:	91 81       	ldd	r25, Z+1	; 0x01
    5260:	0e 94 88 32 	call	0x6510	; 0x6510 <strlen>
    5264:	8f 87       	std	Y+15, r24	; 0x0f
	itoa(7+Topic_len,int_str,10);
    5266:	8f 85       	ldd	r24, Y+15	; 0x0f
    5268:	88 2f       	mov	r24, r24
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	07 96       	adiw	r24, 0x07	; 7
    526e:	9e 01       	movw	r18, r28
    5270:	20 5f       	subi	r18, 0xF0	; 240
    5272:	3f 4f       	sbci	r19, 0xFF	; 255
    5274:	b9 01       	movw	r22, r18
    5276:	4a e0       	ldi	r20, 0x0A	; 10
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	0e 94 ab 32 	call	0x6556	; 0x6556 <itoa>
	UART_sendString("AT+CIPSEND=");
    527e:	88 e2       	ldi	r24, 0x28	; 40
    5280:	91 e0       	ldi	r25, 0x01	; 1
    5282:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	UART_sendString(int_str);
    5286:	ce 01       	movw	r24, r28
    5288:	40 96       	adiw	r24, 0x10	; 16
    528a:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
	UART_sendString("\r\n");
    528e:	84 e3       	ldi	r24, 0x34	; 52
    5290:	91 e0       	ldi	r25, 0x01	; 1
    5292:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_sendString>
    5296:	80 e0       	ldi	r24, 0x00	; 0
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	aa ef       	ldi	r26, 0xFA	; 250
    529c:	b3 e4       	ldi	r27, 0x43	; 67
    529e:	8b 87       	std	Y+11, r24	; 0x0b
    52a0:	9c 87       	std	Y+12, r25	; 0x0c
    52a2:	ad 87       	std	Y+13, r26	; 0x0d
    52a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    52a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    52aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ae:	20 e0       	ldi	r18, 0x00	; 0
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	4a e7       	ldi	r20, 0x7A	; 122
    52b4:	55 e4       	ldi	r21, 0x45	; 69
    52b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ba:	dc 01       	movw	r26, r24
    52bc:	cb 01       	movw	r24, r22
    52be:	8f 83       	std	Y+7, r24	; 0x07
    52c0:	98 87       	std	Y+8, r25	; 0x08
    52c2:	a9 87       	std	Y+9, r26	; 0x09
    52c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52c6:	6f 81       	ldd	r22, Y+7	; 0x07
    52c8:	78 85       	ldd	r23, Y+8	; 0x08
    52ca:	89 85       	ldd	r24, Y+9	; 0x09
    52cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ce:	20 e0       	ldi	r18, 0x00	; 0
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	40 e8       	ldi	r20, 0x80	; 128
    52d4:	5f e3       	ldi	r21, 0x3F	; 63
    52d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52da:	88 23       	and	r24, r24
    52dc:	2c f4       	brge	.+10     	; 0x52e8 <H_ESP8266_void_sendSubscribe+0xb6>
		__ticks = 1;
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	9e 83       	std	Y+6, r25	; 0x06
    52e4:	8d 83       	std	Y+5, r24	; 0x05
    52e6:	3f c0       	rjmp	.+126    	; 0x5366 <H_ESP8266_void_sendSubscribe+0x134>
	else if (__tmp > 65535)
    52e8:	6f 81       	ldd	r22, Y+7	; 0x07
    52ea:	78 85       	ldd	r23, Y+8	; 0x08
    52ec:	89 85       	ldd	r24, Y+9	; 0x09
    52ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	3f ef       	ldi	r19, 0xFF	; 255
    52f4:	4f e7       	ldi	r20, 0x7F	; 127
    52f6:	57 e4       	ldi	r21, 0x47	; 71
    52f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52fc:	18 16       	cp	r1, r24
    52fe:	4c f5       	brge	.+82     	; 0x5352 <H_ESP8266_void_sendSubscribe+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5300:	6b 85       	ldd	r22, Y+11	; 0x0b
    5302:	7c 85       	ldd	r23, Y+12	; 0x0c
    5304:	8d 85       	ldd	r24, Y+13	; 0x0d
    5306:	9e 85       	ldd	r25, Y+14	; 0x0e
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	40 e2       	ldi	r20, 0x20	; 32
    530e:	51 e4       	ldi	r21, 0x41	; 65
    5310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5314:	dc 01       	movw	r26, r24
    5316:	cb 01       	movw	r24, r22
    5318:	bc 01       	movw	r22, r24
    531a:	cd 01       	movw	r24, r26
    531c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5320:	dc 01       	movw	r26, r24
    5322:	cb 01       	movw	r24, r22
    5324:	9e 83       	std	Y+6, r25	; 0x06
    5326:	8d 83       	std	Y+5, r24	; 0x05
    5328:	0f c0       	rjmp	.+30     	; 0x5348 <H_ESP8266_void_sendSubscribe+0x116>
    532a:	80 e9       	ldi	r24, 0x90	; 144
    532c:	91 e0       	ldi	r25, 0x01	; 1
    532e:	9c 83       	std	Y+4, r25	; 0x04
    5330:	8b 83       	std	Y+3, r24	; 0x03
    5332:	8b 81       	ldd	r24, Y+3	; 0x03
    5334:	9c 81       	ldd	r25, Y+4	; 0x04
    5336:	01 97       	sbiw	r24, 0x01	; 1
    5338:	f1 f7       	brne	.-4      	; 0x5336 <H_ESP8266_void_sendSubscribe+0x104>
    533a:	9c 83       	std	Y+4, r25	; 0x04
    533c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    533e:	8d 81       	ldd	r24, Y+5	; 0x05
    5340:	9e 81       	ldd	r25, Y+6	; 0x06
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	9e 83       	std	Y+6, r25	; 0x06
    5346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5348:	8d 81       	ldd	r24, Y+5	; 0x05
    534a:	9e 81       	ldd	r25, Y+6	; 0x06
    534c:	00 97       	sbiw	r24, 0x00	; 0
    534e:	69 f7       	brne	.-38     	; 0x532a <H_ESP8266_void_sendSubscribe+0xf8>
    5350:	14 c0       	rjmp	.+40     	; 0x537a <H_ESP8266_void_sendSubscribe+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5352:	6f 81       	ldd	r22, Y+7	; 0x07
    5354:	78 85       	ldd	r23, Y+8	; 0x08
    5356:	89 85       	ldd	r24, Y+9	; 0x09
    5358:	9a 85       	ldd	r25, Y+10	; 0x0a
    535a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    535e:	dc 01       	movw	r26, r24
    5360:	cb 01       	movw	r24, r22
    5362:	9e 83       	std	Y+6, r25	; 0x06
    5364:	8d 83       	std	Y+5, r24	; 0x05
    5366:	8d 81       	ldd	r24, Y+5	; 0x05
    5368:	9e 81       	ldd	r25, Y+6	; 0x06
    536a:	9a 83       	std	Y+2, r25	; 0x02
    536c:	89 83       	std	Y+1, r24	; 0x01
    536e:	89 81       	ldd	r24, Y+1	; 0x01
    5370:	9a 81       	ldd	r25, Y+2	; 0x02
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	f1 f7       	brne	.-4      	; 0x5372 <H_ESP8266_void_sendSubscribe+0x140>
    5376:	9a 83       	std	Y+2, r25	; 0x02
    5378:	89 83       	std	Y+1, r24	; 0x01
//	while(!Check_Respond("\r\nOK\r\n> "))
//	{
//		_delay_ms(1);
//	}
	_delay_ms(500);
	MQTT_Subscribe(topic);
    537a:	fe 01       	movw	r30, r28
    537c:	e1 5f       	subi	r30, 0xF1	; 241
    537e:	fe 4f       	sbci	r31, 0xFE	; 254
    5380:	80 81       	ld	r24, Z
    5382:	91 81       	ldd	r25, Z+1	; 0x01
    5384:	0e 94 83 18 	call	0x3106	; 0x3106 <MQTT_Subscribe>

	flag_phase=Subscribe_phase;
    5388:	81 e0       	ldi	r24, 0x01	; 1
    538a:	80 93 a7 03 	sts	0x03A7, r24
}
    538e:	c0 5f       	subi	r28, 0xF0	; 240
    5390:	de 4f       	sbci	r29, 0xFE	; 254
    5392:	0f b6       	in	r0, 0x3f	; 63
    5394:	f8 94       	cli
    5396:	de bf       	out	0x3e, r29	; 62
    5398:	0f be       	out	0x3f, r0	; 63
    539a:	cd bf       	out	0x3d, r28	; 61
    539c:	cf 91       	pop	r28
    539e:	df 91       	pop	r29
    53a0:	08 95       	ret

000053a2 <ConnectReceiveBuffer>:
//}



u8 ConnectReceiveBuffer(void)
{
    53a2:	df 93       	push	r29
    53a4:	cf 93       	push	r28
    53a6:	0f 92       	push	r0
    53a8:	cd b7       	in	r28, 0x3d	; 61
    53aa:	de b7       	in	r29, 0x3e	; 62
	UART_receiveByteInterrupt(&RX_DATA);
    53ac:	8a ed       	ldi	r24, 0xDA	; 218
    53ae:	94 e0       	ldi	r25, 0x04	; 4
    53b0:	0e 94 e7 07 	call	0xfce	; 0xfce <UART_receiveByteInterrupt>
	if(RX_DATA>='0')
    53b4:	80 91 da 04 	lds	r24, 0x04DA
    53b8:	80 33       	cpi	r24, 0x30	; 48
    53ba:	70 f0       	brcs	.+28     	; 0x53d8 <ConnectReceiveBuffer+0x36>
			RESPONSE_BUFFER[Counter++]=RX_DATA;
    53bc:	30 91 a6 03 	lds	r19, 0x03A6
    53c0:	83 2f       	mov	r24, r19
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	20 91 da 04 	lds	r18, 0x04DA
    53c8:	fc 01       	movw	r30, r24
    53ca:	ee 5e       	subi	r30, 0xEE	; 238
    53cc:	fb 4f       	sbci	r31, 0xFB	; 251
    53ce:	20 83       	st	Z, r18
    53d0:	83 2f       	mov	r24, r19
    53d2:	8f 5f       	subi	r24, 0xFF	; 255
    53d4:	80 93 a6 03 	sts	0x03A6, r24
	if(RX_DATA=='K')
    53d8:	80 91 da 04 	lds	r24, 0x04DA
    53dc:	8b 34       	cpi	r24, 0x4B	; 75
    53de:	59 f4       	brne	.+22     	; 0x53f6 <ConnectReceiveBuffer+0x54>
	{
		RESPONSE_BUFFER[Counter]='\0';
    53e0:	80 91 a6 03 	lds	r24, 0x03A6
    53e4:	88 2f       	mov	r24, r24
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	fc 01       	movw	r30, r24
    53ea:	ee 5e       	subi	r30, 0xEE	; 238
    53ec:	fb 4f       	sbci	r31, 0xFB	; 251
    53ee:	10 82       	st	Z, r1
		return TRUE;
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	89 83       	std	Y+1, r24	; 0x01
    53f4:	01 c0       	rjmp	.+2      	; 0x53f8 <ConnectReceiveBuffer+0x56>
	}
	return FALSE;
    53f6:	19 82       	std	Y+1, r1	; 0x01
    53f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    53fa:	0f 90       	pop	r0
    53fc:	cf 91       	pop	r28
    53fe:	df 91       	pop	r29
    5400:	08 95       	ret

00005402 <SubReceiveBuffer>:


void SubReceiveBuffer(void)
{
    5402:	df 93       	push	r29
    5404:	cf 93       	push	r28
    5406:	cd b7       	in	r28, 0x3d	; 61
    5408:	de b7       	in	r29, 0x3e	; 62
    540a:	62 97       	sbiw	r28, 0x12	; 18
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	f8 94       	cli
    5410:	de bf       	out	0x3e, r29	; 62
    5412:	0f be       	out	0x3f, r0	; 63
    5414:	cd bf       	out	0x3d, r28	; 61
	u8 *ptr;
	u8 print=0;
    5416:	18 8a       	std	Y+16, r1	; 0x10
	u8 i=0;
    5418:	1f 86       	std	Y+15, r1	; 0x0f
	UART_receiveByteInterrupt(&RX_DATA);
    541a:	8a ed       	ldi	r24, 0xDA	; 218
    541c:	94 e0       	ldi	r25, 0x04	; 4
    541e:	0e 94 e7 07 	call	0xfce	; 0xfce <UART_receiveByteInterrupt>

	if(RX_DATA>='0')
    5422:	80 91 da 04 	lds	r24, 0x04DA
    5426:	80 33       	cpi	r24, 0x30	; 48
    5428:	70 f0       	brcs	.+28     	; 0x5446 <SubReceiveBuffer+0x44>
	{
		RESPONSE_BUFFER[Counter++]=RX_DATA;
    542a:	30 91 a6 03 	lds	r19, 0x03A6
    542e:	83 2f       	mov	r24, r19
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	20 91 da 04 	lds	r18, 0x04DA
    5436:	fc 01       	movw	r30, r24
    5438:	ee 5e       	subi	r30, 0xEE	; 238
    543a:	fb 4f       	sbci	r31, 0xFB	; 251
    543c:	20 83       	st	Z, r18
    543e:	83 2f       	mov	r24, r19
    5440:	8f 5f       	subi	r24, 0xFF	; 255
    5442:	80 93 a6 03 	sts	0x03A6, r24
	}
	if(RX_DATA=='_')
    5446:	80 91 da 04 	lds	r24, 0x04DA
    544a:	8f 35       	cpi	r24, 0x5F	; 95
    544c:	09 f0       	breq	.+2      	; 0x5450 <SubReceiveBuffer+0x4e>
    544e:	b6 c0       	rjmp	.+364    	; 0x55bc <SubReceiveBuffer+0x1ba>
	{
		H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
		RESPONSE_BUFFER[Counter]='\0';
    5456:	80 91 a6 03 	lds	r24, 0x03A6
    545a:	88 2f       	mov	r24, r24
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	fc 01       	movw	r30, r24
    5460:	ee 5e       	subi	r30, 0xEE	; 238
    5462:	fb 4f       	sbci	r31, 0xFB	; 251
    5464:	10 82       	st	Z, r1
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	a8 e4       	ldi	r26, 0x48	; 72
    546c:	b2 e4       	ldi	r27, 0x42	; 66
    546e:	8b 87       	std	Y+11, r24	; 0x0b
    5470:	9c 87       	std	Y+12, r25	; 0x0c
    5472:	ad 87       	std	Y+13, r26	; 0x0d
    5474:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5476:	6b 85       	ldd	r22, Y+11	; 0x0b
    5478:	7c 85       	ldd	r23, Y+12	; 0x0c
    547a:	8d 85       	ldd	r24, Y+13	; 0x0d
    547c:	9e 85       	ldd	r25, Y+14	; 0x0e
    547e:	20 e0       	ldi	r18, 0x00	; 0
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	4a e7       	ldi	r20, 0x7A	; 122
    5484:	55 e4       	ldi	r21, 0x45	; 69
    5486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	8f 83       	std	Y+7, r24	; 0x07
    5490:	98 87       	std	Y+8, r25	; 0x08
    5492:	a9 87       	std	Y+9, r26	; 0x09
    5494:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5496:	6f 81       	ldd	r22, Y+7	; 0x07
    5498:	78 85       	ldd	r23, Y+8	; 0x08
    549a:	89 85       	ldd	r24, Y+9	; 0x09
    549c:	9a 85       	ldd	r25, Y+10	; 0x0a
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	40 e8       	ldi	r20, 0x80	; 128
    54a4:	5f e3       	ldi	r21, 0x3F	; 63
    54a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54aa:	88 23       	and	r24, r24
    54ac:	2c f4       	brge	.+10     	; 0x54b8 <SubReceiveBuffer+0xb6>
		__ticks = 1;
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	9e 83       	std	Y+6, r25	; 0x06
    54b4:	8d 83       	std	Y+5, r24	; 0x05
    54b6:	3f c0       	rjmp	.+126    	; 0x5536 <SubReceiveBuffer+0x134>
	else if (__tmp > 65535)
    54b8:	6f 81       	ldd	r22, Y+7	; 0x07
    54ba:	78 85       	ldd	r23, Y+8	; 0x08
    54bc:	89 85       	ldd	r24, Y+9	; 0x09
    54be:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	3f ef       	ldi	r19, 0xFF	; 255
    54c4:	4f e7       	ldi	r20, 0x7F	; 127
    54c6:	57 e4       	ldi	r21, 0x47	; 71
    54c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54cc:	18 16       	cp	r1, r24
    54ce:	4c f5       	brge	.+82     	; 0x5522 <SubReceiveBuffer+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    54d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    54d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	40 e2       	ldi	r20, 0x20	; 32
    54de:	51 e4       	ldi	r21, 0x41	; 65
    54e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	bc 01       	movw	r22, r24
    54ea:	cd 01       	movw	r24, r26
    54ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54f0:	dc 01       	movw	r26, r24
    54f2:	cb 01       	movw	r24, r22
    54f4:	9e 83       	std	Y+6, r25	; 0x06
    54f6:	8d 83       	std	Y+5, r24	; 0x05
    54f8:	0f c0       	rjmp	.+30     	; 0x5518 <SubReceiveBuffer+0x116>
    54fa:	80 e9       	ldi	r24, 0x90	; 144
    54fc:	91 e0       	ldi	r25, 0x01	; 1
    54fe:	9c 83       	std	Y+4, r25	; 0x04
    5500:	8b 83       	std	Y+3, r24	; 0x03
    5502:	8b 81       	ldd	r24, Y+3	; 0x03
    5504:	9c 81       	ldd	r25, Y+4	; 0x04
    5506:	01 97       	sbiw	r24, 0x01	; 1
    5508:	f1 f7       	brne	.-4      	; 0x5506 <SubReceiveBuffer+0x104>
    550a:	9c 83       	std	Y+4, r25	; 0x04
    550c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    550e:	8d 81       	ldd	r24, Y+5	; 0x05
    5510:	9e 81       	ldd	r25, Y+6	; 0x06
    5512:	01 97       	sbiw	r24, 0x01	; 1
    5514:	9e 83       	std	Y+6, r25	; 0x06
    5516:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5518:	8d 81       	ldd	r24, Y+5	; 0x05
    551a:	9e 81       	ldd	r25, Y+6	; 0x06
    551c:	00 97       	sbiw	r24, 0x00	; 0
    551e:	69 f7       	brne	.-38     	; 0x54fa <SubReceiveBuffer+0xf8>
    5520:	14 c0       	rjmp	.+40     	; 0x554a <SubReceiveBuffer+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5522:	6f 81       	ldd	r22, Y+7	; 0x07
    5524:	78 85       	ldd	r23, Y+8	; 0x08
    5526:	89 85       	ldd	r24, Y+9	; 0x09
    5528:	9a 85       	ldd	r25, Y+10	; 0x0a
    552a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    552e:	dc 01       	movw	r26, r24
    5530:	cb 01       	movw	r24, r22
    5532:	9e 83       	std	Y+6, r25	; 0x06
    5534:	8d 83       	std	Y+5, r24	; 0x05
    5536:	8d 81       	ldd	r24, Y+5	; 0x05
    5538:	9e 81       	ldd	r25, Y+6	; 0x06
    553a:	9a 83       	std	Y+2, r25	; 0x02
    553c:	89 83       	std	Y+1, r24	; 0x01
    553e:	89 81       	ldd	r24, Y+1	; 0x01
    5540:	9a 81       	ldd	r25, Y+2	; 0x02
    5542:	01 97       	sbiw	r24, 0x01	; 1
    5544:	f1 f7       	brne	.-4      	; 0x5542 <SubReceiveBuffer+0x140>
    5546:	9a 83       	std	Y+2, r25	; 0x02
    5548:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		ptr=strstr(RESPONSE_BUFFER,"COMMAND");
    554a:	82 e1       	ldi	r24, 0x12	; 18
    554c:	94 e0       	ldi	r25, 0x04	; 4
    554e:	27 e3       	ldi	r18, 0x37	; 55
    5550:	31 e0       	ldi	r19, 0x01	; 1
    5552:	b9 01       	movw	r22, r18
    5554:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5558:	9a 8b       	std	Y+18, r25	; 0x12
    555a:	89 8b       	std	Y+17, r24	; 0x11
    555c:	16 c0       	rjmp	.+44     	; 0x558a <SubReceiveBuffer+0x188>
		while(ptr[i+7]!='_')
		{
			copy_RESPONSE_BUFFER[i]=ptr[i+7];
    555e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5560:	48 2f       	mov	r20, r24
    5562:	50 e0       	ldi	r21, 0x00	; 0
    5564:	8f 85       	ldd	r24, Y+15	; 0x0f
    5566:	88 2f       	mov	r24, r24
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	9c 01       	movw	r18, r24
    556c:	29 5f       	subi	r18, 0xF9	; 249
    556e:	3f 4f       	sbci	r19, 0xFF	; 255
    5570:	89 89       	ldd	r24, Y+17	; 0x11
    5572:	9a 89       	ldd	r25, Y+18	; 0x12
    5574:	fc 01       	movw	r30, r24
    5576:	e2 0f       	add	r30, r18
    5578:	f3 1f       	adc	r31, r19
    557a:	80 81       	ld	r24, Z
    557c:	fa 01       	movw	r30, r20
    557e:	ea 58       	subi	r30, 0x8A	; 138
    5580:	fb 4f       	sbci	r31, 0xFB	; 251
    5582:	80 83       	st	Z, r24
			i++;
    5584:	8f 85       	ldd	r24, Y+15	; 0x0f
    5586:	8f 5f       	subi	r24, 0xFF	; 255
    5588:	8f 87       	std	Y+15, r24	; 0x0f
	{
		H_LCD_void_sendCommand(LCD_CMD_CLEAR);
		RESPONSE_BUFFER[Counter]='\0';
		_delay_ms(50);
		ptr=strstr(RESPONSE_BUFFER,"COMMAND");
		while(ptr[i+7]!='_')
    558a:	8f 85       	ldd	r24, Y+15	; 0x0f
    558c:	88 2f       	mov	r24, r24
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	9c 01       	movw	r18, r24
    5592:	29 5f       	subi	r18, 0xF9	; 249
    5594:	3f 4f       	sbci	r19, 0xFF	; 255
    5596:	89 89       	ldd	r24, Y+17	; 0x11
    5598:	9a 89       	ldd	r25, Y+18	; 0x12
    559a:	fc 01       	movw	r30, r24
    559c:	e2 0f       	add	r30, r18
    559e:	f3 1f       	adc	r31, r19
    55a0:	80 81       	ld	r24, Z
    55a2:	8f 35       	cpi	r24, 0x5F	; 95
    55a4:	e1 f6       	brne	.-72     	; 0x555e <SubReceiveBuffer+0x15c>
		{
			copy_RESPONSE_BUFFER[i]=ptr[i+7];
			i++;
		}
		copy_RESPONSE_BUFFER[i]='\0';
    55a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    55a8:	88 2f       	mov	r24, r24
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	fc 01       	movw	r30, r24
    55ae:	ea 58       	subi	r30, 0x8A	; 138
    55b0:	fb 4f       	sbci	r31, 0xFB	; 251
    55b2:	10 82       	st	Z, r1
//		H_LCD_void_sendString(copy_RESPONSE_BUFFER);
		Clear_REC_Buffer();
    55b4:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <Clear_REC_Buffer>
		Counter=0;
    55b8:	10 92 a6 03 	sts	0x03A6, r1
	}


}
    55bc:	62 96       	adiw	r28, 0x12	; 18
    55be:	0f b6       	in	r0, 0x3f	; 63
    55c0:	f8 94       	cli
    55c2:	de bf       	out	0x3e, r29	; 62
    55c4:	0f be       	out	0x3f, r0	; 63
    55c6:	cd bf       	out	0x3d, r28	; 61
    55c8:	cf 91       	pop	r28
    55ca:	df 91       	pop	r29
    55cc:	08 95       	ret

000055ce <Clear_REC_Buffer>:




void Clear_REC_Buffer(void)
{
    55ce:	df 93       	push	r29
    55d0:	cf 93       	push	r28
    55d2:	cd b7       	in	r28, 0x3d	; 61
    55d4:	de b7       	in	r29, 0x3e	; 62
	memset(RESPONSE_BUFFER,0,DEFAULT_BUFFER_SIZE);
    55d6:	82 e1       	ldi	r24, 0x12	; 18
    55d8:	94 e0       	ldi	r25, 0x04	; 4
    55da:	60 e0       	ldi	r22, 0x00	; 0
    55dc:	70 e0       	ldi	r23, 0x00	; 0
    55de:	44 e6       	ldi	r20, 0x64	; 100
    55e0:	50 e0       	ldi	r21, 0x00	; 0
    55e2:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <memset>
	Counter = 0;
    55e6:	10 92 a6 03 	sts	0x03A6, r1
}
    55ea:	cf 91       	pop	r28
    55ec:	df 91       	pop	r29
    55ee:	08 95       	ret

000055f0 <H_ESP_ReceiveString>:

void H_ESP_ReceiveString(u8* OutputString)
{
    55f0:	df 93       	push	r29
    55f2:	cf 93       	push	r28
    55f4:	00 d0       	rcall	.+0      	; 0x55f6 <H_ESP_ReceiveString+0x6>
    55f6:	cd b7       	in	r28, 0x3d	; 61
    55f8:	de b7       	in	r29, 0x3e	; 62
    55fa:	9a 83       	std	Y+2, r25	; 0x02
    55fc:	89 83       	std	Y+1, r24	; 0x01
	strcpy(OutputString, copy_RESPONSE_BUFFER);
    55fe:	89 81       	ldd	r24, Y+1	; 0x01
    5600:	9a 81       	ldd	r25, Y+2	; 0x02
    5602:	26 e7       	ldi	r18, 0x76	; 118
    5604:	34 e0       	ldi	r19, 0x04	; 4
    5606:	b9 01       	movw	r22, r18
    5608:	0e 94 81 32 	call	0x6502	; 0x6502 <strcpy>
	memset(copy_RESPONSE_BUFFER,0,DEFAULT_BUFFER_SIZE);
    560c:	86 e7       	ldi	r24, 0x76	; 118
    560e:	94 e0       	ldi	r25, 0x04	; 4
    5610:	60 e0       	ldi	r22, 0x00	; 0
    5612:	70 e0       	ldi	r23, 0x00	; 0
    5614:	44 e6       	ldi	r20, 0x64	; 100
    5616:	50 e0       	ldi	r21, 0x00	; 0
    5618:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <memset>
}
    561c:	0f 90       	pop	r0
    561e:	0f 90       	pop	r0
    5620:	cf 91       	pop	r28
    5622:	df 91       	pop	r29
    5624:	08 95       	ret

00005626 <UART_TEST>:


void UART_TEST(void)
{
    5626:	df 93       	push	r29
    5628:	cf 93       	push	r28
    562a:	cd b7       	in	r28, 0x3d	; 61
    562c:	de b7       	in	r29, 0x3e	; 62
	M_GI_disable();
    562e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <M_GI_disable>

	if(flag_phase == Connection_phase)
    5632:	80 91 a7 03 	lds	r24, 0x03A7
    5636:	88 23       	and	r24, r24
    5638:	19 f4       	brne	.+6      	; 0x5640 <UART_TEST+0x1a>
	{
		ConnectReceiveBuffer();
    563a:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <ConnectReceiveBuffer>
    563e:	06 c0       	rjmp	.+12     	; 0x564c <UART_TEST+0x26>
	}
	else if(flag_phase==Subscribe_phase)
    5640:	80 91 a7 03 	lds	r24, 0x03A7
    5644:	81 30       	cpi	r24, 0x01	; 1
    5646:	11 f4       	brne	.+4      	; 0x564c <UART_TEST+0x26>
	{
		SubReceiveBuffer();
    5648:	0e 94 01 2a 	call	0x5402	; 0x5402 <SubReceiveBuffer>
	}

	if(Counter == DEFAULT_BUFFER_SIZE){
    564c:	80 91 a6 03 	lds	r24, 0x03A6
    5650:	84 36       	cpi	r24, 0x64	; 100
    5652:	11 f4       	brne	.+4      	; 0x5658 <UART_TEST+0x32>
		Counter = 0; //pointer = 0;
    5654:	10 92 a6 03 	sts	0x03A6, r1
	}

	M_GI_enable();
    5658:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <M_GI_enable>

}
    565c:	cf 91       	pop	r28
    565e:	df 91       	pop	r29
    5660:	08 95       	ret

00005662 <H_DC_MOTOR_voidInit>:
#include "Dio_int.h"
#include "DC_MOTOR_cfg.h"
#include "DC_MOTOR_int.h"

void H_DC_MOTOR_voidInit()
{
    5662:	df 93       	push	r29
    5664:	cf 93       	push	r28
    5666:	00 d0       	rcall	.+0      	; 0x5668 <H_DC_MOTOR_voidInit+0x6>
    5668:	00 d0       	rcall	.+0      	; 0x566a <H_DC_MOTOR_voidInit+0x8>
    566a:	cd b7       	in	r28, 0x3d	; 61
    566c:	de b7       	in	r29, 0x3e	; 62
	timer0_config_t t;
	t.timer_mode = TIMER0_PWM_PHASE_CORRECT_MODE;
    566e:	88 e0       	ldi	r24, 0x08	; 8
    5670:	89 83       	std	Y+1, r24	; 0x01
	t.oc_mode_configs = TIMER0_COMPARE_OUTPUT_PHASE_CORRECT_PWM_CLEAR_MODE;
    5672:	82 e0       	ldi	r24, 0x02	; 2
    5674:	8a 83       	std	Y+2, r24	; 0x02
	M_Timer0_void_Init(&t);
    5676:	ce 01       	movw	r24, r28
    5678:	01 96       	adiw	r24, 0x01	; 1
    567a:	0e 94 92 0a 	call	0x1524	; 0x1524 <M_Timer0_void_Init>
}
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	cf 91       	pop	r28
    5688:	df 91       	pop	r29
    568a:	08 95       	ret

0000568c <H_DC_MOTOR_voidSetDutyCycle>:

void H_DC_MOTOR_voidSetDutyCycle(u8 duty)
{
    568c:	df 93       	push	r29
    568e:	cf 93       	push	r28
    5690:	0f 92       	push	r0
    5692:	cd b7       	in	r28, 0x3d	; 61
    5694:	de b7       	in	r29, 0x3e	; 62
    5696:	89 83       	std	Y+1, r24	; 0x01
	M_Timer0_void_setphaseCorrectPWM(DC_MOTOR_FREQUENCY, duty);
    5698:	84 e6       	ldi	r24, 0x64	; 100
    569a:	69 81       	ldd	r22, Y+1	; 0x01
    569c:	0e 94 80 0c 	call	0x1900	; 0x1900 <M_Timer0_void_setphaseCorrectPWM>
}
    56a0:	0f 90       	pop	r0
    56a2:	cf 91       	pop	r28
    56a4:	df 91       	pop	r29
    56a6:	08 95       	ret

000056a8 <H_DC_MOTOR_voidStart>:

void H_DC_MOTOR_voidStart(void)
{
    56a8:	df 93       	push	r29
    56aa:	cf 93       	push	r28
    56ac:	cd b7       	in	r28, 0x3d	; 61
    56ae:	de b7       	in	r29, 0x3e	; 62
//	H_DC_MOTOR_voidInit();
	M_Timer0_void_start();
    56b0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <M_Timer0_void_start>
}
    56b4:	cf 91       	pop	r28
    56b6:	df 91       	pop	r29
    56b8:	08 95       	ret

000056ba <H_DC_MOTOR_voidStop>:

void H_DC_MOTOR_voidStop(void)
{
    56ba:	df 93       	push	r29
    56bc:	cf 93       	push	r28
    56be:	cd b7       	in	r28, 0x3d	; 61
    56c0:	de b7       	in	r29, 0x3e	; 62
//	timer0_config_t t;
//	t.timer_mode = TIMER0_PWM_PHASE_CORRECT_MODE;
//	t.oc_mode_configs = TIMER0_COMPARE_OUTPUT_PHASE_CORRECT_PWM_NORMAL_MODE;
//	M_Timer0_void_Init(&t);
	M_Timer0_void_setphaseCorrectPWM(DC_MOTOR_FREQUENCY, 0);
    56c2:	84 e6       	ldi	r24, 0x64	; 100
    56c4:	60 e0       	ldi	r22, 0x00	; 0
    56c6:	0e 94 80 0c 	call	0x1900	; 0x1900 <M_Timer0_void_setphaseCorrectPWM>
//	M_Timer0_void_stop();
}
    56ca:	cf 91       	pop	r28
    56cc:	df 91       	pop	r29
    56ce:	08 95       	ret

000056d0 <debug>:
#include "ESP8266_int.h"
/*External interrupt flag
when EXT_INT happens flag =1;
*/
void debug(u8 num)
{
    56d0:	df 93       	push	r29
    56d2:	cf 93       	push	r28
    56d4:	cd b7       	in	r28, 0x3d	; 61
    56d6:	de b7       	in	r29, 0x3e	; 62
    56d8:	2f 97       	sbiw	r28, 0x0f	; 15
    56da:	0f b6       	in	r0, 0x3f	; 63
    56dc:	f8 94       	cli
    56de:	de bf       	out	0x3e, r29	; 62
    56e0:	0f be       	out	0x3f, r0	; 63
    56e2:	cd bf       	out	0x3d, r28	; 61
    56e4:	8f 87       	std	Y+15, r24	; 0x0f
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	H_LCD_void_sendIntNum(num);
    56ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    56ee:	88 2f       	mov	r24, r24
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	a0 e0       	ldi	r26, 0x00	; 0
    56f4:	b0 e0       	ldi	r27, 0x00	; 0
    56f6:	bc 01       	movw	r22, r24
    56f8:	cd 01       	movw	r24, r26
    56fa:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <H_LCD_void_sendIntNum>
    56fe:	80 e0       	ldi	r24, 0x00	; 0
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	aa ef       	ldi	r26, 0xFA	; 250
    5704:	b4 e4       	ldi	r27, 0x44	; 68
    5706:	8b 87       	std	Y+11, r24	; 0x0b
    5708:	9c 87       	std	Y+12, r25	; 0x0c
    570a:	ad 87       	std	Y+13, r26	; 0x0d
    570c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    570e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5710:	7c 85       	ldd	r23, Y+12	; 0x0c
    5712:	8d 85       	ldd	r24, Y+13	; 0x0d
    5714:	9e 85       	ldd	r25, Y+14	; 0x0e
    5716:	20 e0       	ldi	r18, 0x00	; 0
    5718:	30 e0       	ldi	r19, 0x00	; 0
    571a:	4a e7       	ldi	r20, 0x7A	; 122
    571c:	55 e4       	ldi	r21, 0x45	; 69
    571e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	8f 83       	std	Y+7, r24	; 0x07
    5728:	98 87       	std	Y+8, r25	; 0x08
    572a:	a9 87       	std	Y+9, r26	; 0x09
    572c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    572e:	6f 81       	ldd	r22, Y+7	; 0x07
    5730:	78 85       	ldd	r23, Y+8	; 0x08
    5732:	89 85       	ldd	r24, Y+9	; 0x09
    5734:	9a 85       	ldd	r25, Y+10	; 0x0a
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	40 e8       	ldi	r20, 0x80	; 128
    573c:	5f e3       	ldi	r21, 0x3F	; 63
    573e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5742:	88 23       	and	r24, r24
    5744:	2c f4       	brge	.+10     	; 0x5750 <debug+0x80>
		__ticks = 1;
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	9e 83       	std	Y+6, r25	; 0x06
    574c:	8d 83       	std	Y+5, r24	; 0x05
    574e:	3f c0       	rjmp	.+126    	; 0x57ce <debug+0xfe>
	else if (__tmp > 65535)
    5750:	6f 81       	ldd	r22, Y+7	; 0x07
    5752:	78 85       	ldd	r23, Y+8	; 0x08
    5754:	89 85       	ldd	r24, Y+9	; 0x09
    5756:	9a 85       	ldd	r25, Y+10	; 0x0a
    5758:	20 e0       	ldi	r18, 0x00	; 0
    575a:	3f ef       	ldi	r19, 0xFF	; 255
    575c:	4f e7       	ldi	r20, 0x7F	; 127
    575e:	57 e4       	ldi	r21, 0x47	; 71
    5760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5764:	18 16       	cp	r1, r24
    5766:	4c f5       	brge	.+82     	; 0x57ba <debug+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5768:	6b 85       	ldd	r22, Y+11	; 0x0b
    576a:	7c 85       	ldd	r23, Y+12	; 0x0c
    576c:	8d 85       	ldd	r24, Y+13	; 0x0d
    576e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5770:	20 e0       	ldi	r18, 0x00	; 0
    5772:	30 e0       	ldi	r19, 0x00	; 0
    5774:	40 e2       	ldi	r20, 0x20	; 32
    5776:	51 e4       	ldi	r21, 0x41	; 65
    5778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    577c:	dc 01       	movw	r26, r24
    577e:	cb 01       	movw	r24, r22
    5780:	bc 01       	movw	r22, r24
    5782:	cd 01       	movw	r24, r26
    5784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5788:	dc 01       	movw	r26, r24
    578a:	cb 01       	movw	r24, r22
    578c:	9e 83       	std	Y+6, r25	; 0x06
    578e:	8d 83       	std	Y+5, r24	; 0x05
    5790:	0f c0       	rjmp	.+30     	; 0x57b0 <debug+0xe0>
    5792:	80 e9       	ldi	r24, 0x90	; 144
    5794:	91 e0       	ldi	r25, 0x01	; 1
    5796:	9c 83       	std	Y+4, r25	; 0x04
    5798:	8b 83       	std	Y+3, r24	; 0x03
    579a:	8b 81       	ldd	r24, Y+3	; 0x03
    579c:	9c 81       	ldd	r25, Y+4	; 0x04
    579e:	01 97       	sbiw	r24, 0x01	; 1
    57a0:	f1 f7       	brne	.-4      	; 0x579e <debug+0xce>
    57a2:	9c 83       	std	Y+4, r25	; 0x04
    57a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57a6:	8d 81       	ldd	r24, Y+5	; 0x05
    57a8:	9e 81       	ldd	r25, Y+6	; 0x06
    57aa:	01 97       	sbiw	r24, 0x01	; 1
    57ac:	9e 83       	std	Y+6, r25	; 0x06
    57ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57b0:	8d 81       	ldd	r24, Y+5	; 0x05
    57b2:	9e 81       	ldd	r25, Y+6	; 0x06
    57b4:	00 97       	sbiw	r24, 0x00	; 0
    57b6:	69 f7       	brne	.-38     	; 0x5792 <debug+0xc2>
    57b8:	14 c0       	rjmp	.+40     	; 0x57e2 <debug+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ba:	6f 81       	ldd	r22, Y+7	; 0x07
    57bc:	78 85       	ldd	r23, Y+8	; 0x08
    57be:	89 85       	ldd	r24, Y+9	; 0x09
    57c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    57c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c6:	dc 01       	movw	r26, r24
    57c8:	cb 01       	movw	r24, r22
    57ca:	9e 83       	std	Y+6, r25	; 0x06
    57cc:	8d 83       	std	Y+5, r24	; 0x05
    57ce:	8d 81       	ldd	r24, Y+5	; 0x05
    57d0:	9e 81       	ldd	r25, Y+6	; 0x06
    57d2:	9a 83       	std	Y+2, r25	; 0x02
    57d4:	89 83       	std	Y+1, r24	; 0x01
    57d6:	89 81       	ldd	r24, Y+1	; 0x01
    57d8:	9a 81       	ldd	r25, Y+2	; 0x02
    57da:	01 97       	sbiw	r24, 0x01	; 1
    57dc:	f1 f7       	brne	.-4      	; 0x57da <debug+0x10a>
    57de:	9a 83       	std	Y+2, r25	; 0x02
    57e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	H_LCD_void_sendData(' ');
    57e2:	80 e2       	ldi	r24, 0x20	; 32
    57e4:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <H_LCD_void_sendData>
}
    57e8:	2f 96       	adiw	r28, 0x0f	; 15
    57ea:	0f b6       	in	r0, 0x3f	; 63
    57ec:	f8 94       	cli
    57ee:	de bf       	out	0x3e, r29	; 62
    57f0:	0f be       	out	0x3f, r0	; 63
    57f2:	cd bf       	out	0x3d, r28	; 61
    57f4:	cf 91       	pop	r28
    57f6:	df 91       	pop	r29
    57f8:	08 95       	ret

000057fa <debugStr>:

void debugStr(const u8* str)
{
    57fa:	df 93       	push	r29
    57fc:	cf 93       	push	r28
    57fe:	cd b7       	in	r28, 0x3d	; 61
    5800:	de b7       	in	r29, 0x3e	; 62
    5802:	60 97       	sbiw	r28, 0x10	; 16
    5804:	0f b6       	in	r0, 0x3f	; 63
    5806:	f8 94       	cli
    5808:	de bf       	out	0x3e, r29	; 62
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	cd bf       	out	0x3d, r28	; 61
    580e:	98 8b       	std	Y+16, r25	; 0x10
    5810:	8f 87       	std	Y+15, r24	; 0x0f
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    5812:	81 e0       	ldi	r24, 0x01	; 1
    5814:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	H_LCD_void_sendString(str);
    5818:	8f 85       	ldd	r24, Y+15	; 0x0f
    581a:	98 89       	ldd	r25, Y+16	; 0x10
    581c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
    5820:	80 e0       	ldi	r24, 0x00	; 0
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	aa ef       	ldi	r26, 0xFA	; 250
    5826:	b3 e4       	ldi	r27, 0x43	; 67
    5828:	8b 87       	std	Y+11, r24	; 0x0b
    582a:	9c 87       	std	Y+12, r25	; 0x0c
    582c:	ad 87       	std	Y+13, r26	; 0x0d
    582e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5830:	6b 85       	ldd	r22, Y+11	; 0x0b
    5832:	7c 85       	ldd	r23, Y+12	; 0x0c
    5834:	8d 85       	ldd	r24, Y+13	; 0x0d
    5836:	9e 85       	ldd	r25, Y+14	; 0x0e
    5838:	20 e0       	ldi	r18, 0x00	; 0
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	4a e7       	ldi	r20, 0x7A	; 122
    583e:	55 e4       	ldi	r21, 0x45	; 69
    5840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5844:	dc 01       	movw	r26, r24
    5846:	cb 01       	movw	r24, r22
    5848:	8f 83       	std	Y+7, r24	; 0x07
    584a:	98 87       	std	Y+8, r25	; 0x08
    584c:	a9 87       	std	Y+9, r26	; 0x09
    584e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5850:	6f 81       	ldd	r22, Y+7	; 0x07
    5852:	78 85       	ldd	r23, Y+8	; 0x08
    5854:	89 85       	ldd	r24, Y+9	; 0x09
    5856:	9a 85       	ldd	r25, Y+10	; 0x0a
    5858:	20 e0       	ldi	r18, 0x00	; 0
    585a:	30 e0       	ldi	r19, 0x00	; 0
    585c:	40 e8       	ldi	r20, 0x80	; 128
    585e:	5f e3       	ldi	r21, 0x3F	; 63
    5860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5864:	88 23       	and	r24, r24
    5866:	2c f4       	brge	.+10     	; 0x5872 <debugStr+0x78>
		__ticks = 1;
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	90 e0       	ldi	r25, 0x00	; 0
    586c:	9e 83       	std	Y+6, r25	; 0x06
    586e:	8d 83       	std	Y+5, r24	; 0x05
    5870:	3f c0       	rjmp	.+126    	; 0x58f0 <debugStr+0xf6>
	else if (__tmp > 65535)
    5872:	6f 81       	ldd	r22, Y+7	; 0x07
    5874:	78 85       	ldd	r23, Y+8	; 0x08
    5876:	89 85       	ldd	r24, Y+9	; 0x09
    5878:	9a 85       	ldd	r25, Y+10	; 0x0a
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	3f ef       	ldi	r19, 0xFF	; 255
    587e:	4f e7       	ldi	r20, 0x7F	; 127
    5880:	57 e4       	ldi	r21, 0x47	; 71
    5882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5886:	18 16       	cp	r1, r24
    5888:	4c f5       	brge	.+82     	; 0x58dc <debugStr+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    588a:	6b 85       	ldd	r22, Y+11	; 0x0b
    588c:	7c 85       	ldd	r23, Y+12	; 0x0c
    588e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5890:	9e 85       	ldd	r25, Y+14	; 0x0e
    5892:	20 e0       	ldi	r18, 0x00	; 0
    5894:	30 e0       	ldi	r19, 0x00	; 0
    5896:	40 e2       	ldi	r20, 0x20	; 32
    5898:	51 e4       	ldi	r21, 0x41	; 65
    589a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    589e:	dc 01       	movw	r26, r24
    58a0:	cb 01       	movw	r24, r22
    58a2:	bc 01       	movw	r22, r24
    58a4:	cd 01       	movw	r24, r26
    58a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	9e 83       	std	Y+6, r25	; 0x06
    58b0:	8d 83       	std	Y+5, r24	; 0x05
    58b2:	0f c0       	rjmp	.+30     	; 0x58d2 <debugStr+0xd8>
    58b4:	80 e9       	ldi	r24, 0x90	; 144
    58b6:	91 e0       	ldi	r25, 0x01	; 1
    58b8:	9c 83       	std	Y+4, r25	; 0x04
    58ba:	8b 83       	std	Y+3, r24	; 0x03
    58bc:	8b 81       	ldd	r24, Y+3	; 0x03
    58be:	9c 81       	ldd	r25, Y+4	; 0x04
    58c0:	01 97       	sbiw	r24, 0x01	; 1
    58c2:	f1 f7       	brne	.-4      	; 0x58c0 <debugStr+0xc6>
    58c4:	9c 83       	std	Y+4, r25	; 0x04
    58c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58c8:	8d 81       	ldd	r24, Y+5	; 0x05
    58ca:	9e 81       	ldd	r25, Y+6	; 0x06
    58cc:	01 97       	sbiw	r24, 0x01	; 1
    58ce:	9e 83       	std	Y+6, r25	; 0x06
    58d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58d2:	8d 81       	ldd	r24, Y+5	; 0x05
    58d4:	9e 81       	ldd	r25, Y+6	; 0x06
    58d6:	00 97       	sbiw	r24, 0x00	; 0
    58d8:	69 f7       	brne	.-38     	; 0x58b4 <debugStr+0xba>
    58da:	14 c0       	rjmp	.+40     	; 0x5904 <debugStr+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58dc:	6f 81       	ldd	r22, Y+7	; 0x07
    58de:	78 85       	ldd	r23, Y+8	; 0x08
    58e0:	89 85       	ldd	r24, Y+9	; 0x09
    58e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e8:	dc 01       	movw	r26, r24
    58ea:	cb 01       	movw	r24, r22
    58ec:	9e 83       	std	Y+6, r25	; 0x06
    58ee:	8d 83       	std	Y+5, r24	; 0x05
    58f0:	8d 81       	ldd	r24, Y+5	; 0x05
    58f2:	9e 81       	ldd	r25, Y+6	; 0x06
    58f4:	9a 83       	std	Y+2, r25	; 0x02
    58f6:	89 83       	std	Y+1, r24	; 0x01
    58f8:	89 81       	ldd	r24, Y+1	; 0x01
    58fa:	9a 81       	ldd	r25, Y+2	; 0x02
    58fc:	01 97       	sbiw	r24, 0x01	; 1
    58fe:	f1 f7       	brne	.-4      	; 0x58fc <debugStr+0x102>
    5900:	9a 83       	std	Y+2, r25	; 0x02
    5902:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    5904:	60 96       	adiw	r28, 0x10	; 16
    5906:	0f b6       	in	r0, 0x3f	; 63
    5908:	f8 94       	cli
    590a:	de bf       	out	0x3e, r29	; 62
    590c:	0f be       	out	0x3f, r0	; 63
    590e:	cd bf       	out	0x3d, r28	; 61
    5910:	cf 91       	pop	r28
    5912:	df 91       	pop	r29
    5914:	08 95       	ret

00005916 <EXT_callBack>:
extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];
static volatile u8 loginSuccess = 1, ledOn = 0;

void EXT_callBack(void)
{
    5916:	df 93       	push	r29
    5918:	cf 93       	push	r28
    591a:	cd b7       	in	r28, 0x3d	; 61
    591c:	de b7       	in	r29, 0x3e	; 62
	loginSuccess = 1;
    591e:	81 e0       	ldi	r24, 0x01	; 1
    5920:	80 93 39 03 	sts	0x0339, r24
//	debugStr("Welcom Home");
}
    5924:	cf 91       	pop	r28
    5926:	df 91       	pop	r29
    5928:	08 95       	ret

0000592a <app_init>:


void app_init()
{
    592a:	df 93       	push	r29
    592c:	cf 93       	push	r28
    592e:	cd b7       	in	r28, 0x3d	; 61
    5930:	de b7       	in	r29, 0x3e	; 62

	M_GI_enable();
    5932:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <M_GI_enable>

	Port_Init(PORT_Config_Arr);
    5936:	86 e4       	ldi	r24, 0x46	; 70
    5938:	93 e0       	ldi	r25, 0x03	; 3
    593a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <Port_Init>

	M_EXTI_void_enableInt(EXTI_INT0);
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	0e 94 0d 10 	call	0x201a	; 0x201a <M_EXTI_void_enableInt>

	M_EXTI_void_setCallBackFunction(EXT_callBack, EXTI_INT0);
    5944:	8b e8       	ldi	r24, 0x8B	; 139
    5946:	9c e2       	ldi	r25, 0x2C	; 44
    5948:	60 e0       	ldi	r22, 0x00	; 0
    594a:	0e 94 a5 10 	call	0x214a	; 0x214a <M_EXTI_void_setCallBackFunction>

	H_LCD_void_Init();
    594e:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <H_LCD_void_Init>

	ESP01_init();
    5952:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <ESP01_init>

	H_LDR_voidInit();
    5956:	0e 94 d7 19 	call	0x33ae	; 0x33ae <H_LDR_voidInit>

	H_DC_MOTOR_voidInit();
    595a:	0e 94 31 2b 	call	0x5662	; 0x5662 <H_DC_MOTOR_voidInit>

	H_LED_voidPWM_int();
    595e:	0e 94 a2 19 	call	0x3344	; 0x3344 <H_LED_voidPWM_int>
}
    5962:	cf 91       	pop	r28
    5964:	df 91       	pop	r29
    5966:	08 95       	ret

00005968 <app_start>:

void app_start()
{
    5968:	df 93       	push	r29
    596a:	cf 93       	push	r28
    596c:	cd b7       	in	r28, 0x3d	; 61
    596e:	de b7       	in	r29, 0x3e	; 62
    5970:	6e 97       	sbiw	r28, 0x1e	; 30
    5972:	0f b6       	in	r0, 0x3f	; 63
    5974:	f8 94       	cli
    5976:	de bf       	out	0x3e, r29	; 62
    5978:	0f be       	out	0x3f, r0	; 63
    597a:	cd bf       	out	0x3d, r28	; 61

	u8 Temp_value = 0;
    597c:	1d 8e       	std	Y+29, r1	; 0x1d
	volatile u8 wifi_comm = 0;
    597e:	1e 8e       	std	Y+30, r1	; 0x1e
	while (1)
	{
		if (loginSuccess == 1)
    5980:	80 91 39 03 	lds	r24, 0x0339
    5984:	81 30       	cpi	r24, 0x01	; 1
    5986:	e1 f7       	brne	.-8      	; 0x5980 <app_start+0x18>
		{
//			if()
//			{
//				loginSuccess++;
//			}
			Read_Temp();
    5988:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <Read_Temp>
    598c:	80 e0       	ldi	r24, 0x00	; 0
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	a0 e8       	ldi	r26, 0x80	; 128
    5992:	bf e3       	ldi	r27, 0x3F	; 63
    5994:	89 8f       	std	Y+25, r24	; 0x19
    5996:	9a 8f       	std	Y+26, r25	; 0x1a
    5998:	ab 8f       	std	Y+27, r26	; 0x1b
    599a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    599c:	69 8d       	ldd	r22, Y+25	; 0x19
    599e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59a4:	20 e0       	ldi	r18, 0x00	; 0
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	4a e7       	ldi	r20, 0x7A	; 122
    59aa:	55 e4       	ldi	r21, 0x45	; 69
    59ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	8d 8b       	std	Y+21, r24	; 0x15
    59b6:	9e 8b       	std	Y+22, r25	; 0x16
    59b8:	af 8b       	std	Y+23, r26	; 0x17
    59ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    59bc:	6d 89       	ldd	r22, Y+21	; 0x15
    59be:	7e 89       	ldd	r23, Y+22	; 0x16
    59c0:	8f 89       	ldd	r24, Y+23	; 0x17
    59c2:	98 8d       	ldd	r25, Y+24	; 0x18
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	40 e8       	ldi	r20, 0x80	; 128
    59ca:	5f e3       	ldi	r21, 0x3F	; 63
    59cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59d0:	88 23       	and	r24, r24
    59d2:	2c f4       	brge	.+10     	; 0x59de <app_start+0x76>
		__ticks = 1;
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	9c 8b       	std	Y+20, r25	; 0x14
    59da:	8b 8b       	std	Y+19, r24	; 0x13
    59dc:	3f c0       	rjmp	.+126    	; 0x5a5c <app_start+0xf4>
	else if (__tmp > 65535)
    59de:	6d 89       	ldd	r22, Y+21	; 0x15
    59e0:	7e 89       	ldd	r23, Y+22	; 0x16
    59e2:	8f 89       	ldd	r24, Y+23	; 0x17
    59e4:	98 8d       	ldd	r25, Y+24	; 0x18
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	3f ef       	ldi	r19, 0xFF	; 255
    59ea:	4f e7       	ldi	r20, 0x7F	; 127
    59ec:	57 e4       	ldi	r21, 0x47	; 71
    59ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59f2:	18 16       	cp	r1, r24
    59f4:	4c f5       	brge	.+82     	; 0x5a48 <app_start+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59f6:	69 8d       	ldd	r22, Y+25	; 0x19
    59f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59fe:	20 e0       	ldi	r18, 0x00	; 0
    5a00:	30 e0       	ldi	r19, 0x00	; 0
    5a02:	40 e2       	ldi	r20, 0x20	; 32
    5a04:	51 e4       	ldi	r21, 0x41	; 65
    5a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a0a:	dc 01       	movw	r26, r24
    5a0c:	cb 01       	movw	r24, r22
    5a0e:	bc 01       	movw	r22, r24
    5a10:	cd 01       	movw	r24, r26
    5a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a16:	dc 01       	movw	r26, r24
    5a18:	cb 01       	movw	r24, r22
    5a1a:	9c 8b       	std	Y+20, r25	; 0x14
    5a1c:	8b 8b       	std	Y+19, r24	; 0x13
    5a1e:	0f c0       	rjmp	.+30     	; 0x5a3e <app_start+0xd6>
    5a20:	80 e9       	ldi	r24, 0x90	; 144
    5a22:	91 e0       	ldi	r25, 0x01	; 1
    5a24:	9a 8b       	std	Y+18, r25	; 0x12
    5a26:	89 8b       	std	Y+17, r24	; 0x11
    5a28:	89 89       	ldd	r24, Y+17	; 0x11
    5a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    5a2c:	01 97       	sbiw	r24, 0x01	; 1
    5a2e:	f1 f7       	brne	.-4      	; 0x5a2c <app_start+0xc4>
    5a30:	9a 8b       	std	Y+18, r25	; 0x12
    5a32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a34:	8b 89       	ldd	r24, Y+19	; 0x13
    5a36:	9c 89       	ldd	r25, Y+20	; 0x14
    5a38:	01 97       	sbiw	r24, 0x01	; 1
    5a3a:	9c 8b       	std	Y+20, r25	; 0x14
    5a3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    5a40:	9c 89       	ldd	r25, Y+20	; 0x14
    5a42:	00 97       	sbiw	r24, 0x00	; 0
    5a44:	69 f7       	brne	.-38     	; 0x5a20 <app_start+0xb8>
    5a46:	14 c0       	rjmp	.+40     	; 0x5a70 <app_start+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a48:	6d 89       	ldd	r22, Y+21	; 0x15
    5a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a54:	dc 01       	movw	r26, r24
    5a56:	cb 01       	movw	r24, r22
    5a58:	9c 8b       	std	Y+20, r25	; 0x14
    5a5a:	8b 8b       	std	Y+19, r24	; 0x13
    5a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5a60:	98 8b       	std	Y+16, r25	; 0x10
    5a62:	8f 87       	std	Y+15, r24	; 0x0f
    5a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a66:	98 89       	ldd	r25, Y+16	; 0x10
    5a68:	01 97       	sbiw	r24, 0x01	; 1
    5a6a:	f1 f7       	brne	.-4      	; 0x5a68 <app_start+0x100>
    5a6c:	98 8b       	std	Y+16, r25	; 0x10
    5a6e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			Temp_value = Read_Temp(); // Read LM35 Temp from channel 1
    5a70:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <Read_Temp>
    5a74:	8d 8f       	std	Y+29, r24	; 0x1d

			wifi_comm = Wifi_receive_command(); // receive WiFi command
    5a76:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <Wifi_receive_command>
    5a7a:	8e 8f       	std	Y+30, r24	; 0x1e

			if (ledOn) //LED ON by LDR_value PWM
    5a7c:	80 91 10 04 	lds	r24, 0x0410
    5a80:	88 23       	and	r24, r24
    5a82:	09 f4       	brne	.+2      	; 0x5a86 <app_start+0x11e>
    5a84:	79 c0       	rjmp	.+242    	; 0x5b78 <app_start+0x210>
			{
				Darkness_read();
    5a86:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <Darkness_read>
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	90 e0       	ldi	r25, 0x00	; 0
    5a8e:	a0 e2       	ldi	r26, 0x20	; 32
    5a90:	b1 e4       	ldi	r27, 0x41	; 65
    5a92:	8b 87       	std	Y+11, r24	; 0x0b
    5a94:	9c 87       	std	Y+12, r25	; 0x0c
    5a96:	ad 87       	std	Y+13, r26	; 0x0d
    5a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	4a e7       	ldi	r20, 0x7A	; 122
    5aa8:	55 e4       	ldi	r21, 0x45	; 69
    5aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aae:	dc 01       	movw	r26, r24
    5ab0:	cb 01       	movw	r24, r22
    5ab2:	8f 83       	std	Y+7, r24	; 0x07
    5ab4:	98 87       	std	Y+8, r25	; 0x08
    5ab6:	a9 87       	std	Y+9, r26	; 0x09
    5ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5aba:	6f 81       	ldd	r22, Y+7	; 0x07
    5abc:	78 85       	ldd	r23, Y+8	; 0x08
    5abe:	89 85       	ldd	r24, Y+9	; 0x09
    5ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	40 e8       	ldi	r20, 0x80	; 128
    5ac8:	5f e3       	ldi	r21, 0x3F	; 63
    5aca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ace:	88 23       	and	r24, r24
    5ad0:	2c f4       	brge	.+10     	; 0x5adc <app_start+0x174>
		__ticks = 1;
    5ad2:	81 e0       	ldi	r24, 0x01	; 1
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	9e 83       	std	Y+6, r25	; 0x06
    5ad8:	8d 83       	std	Y+5, r24	; 0x05
    5ada:	3f c0       	rjmp	.+126    	; 0x5b5a <app_start+0x1f2>
	else if (__tmp > 65535)
    5adc:	6f 81       	ldd	r22, Y+7	; 0x07
    5ade:	78 85       	ldd	r23, Y+8	; 0x08
    5ae0:	89 85       	ldd	r24, Y+9	; 0x09
    5ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	3f ef       	ldi	r19, 0xFF	; 255
    5ae8:	4f e7       	ldi	r20, 0x7F	; 127
    5aea:	57 e4       	ldi	r21, 0x47	; 71
    5aec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5af0:	18 16       	cp	r1, r24
    5af2:	4c f5       	brge	.+82     	; 0x5b46 <app_start+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	40 e2       	ldi	r20, 0x20	; 32
    5b02:	51 e4       	ldi	r21, 0x41	; 65
    5b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b08:	dc 01       	movw	r26, r24
    5b0a:	cb 01       	movw	r24, r22
    5b0c:	bc 01       	movw	r22, r24
    5b0e:	cd 01       	movw	r24, r26
    5b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b14:	dc 01       	movw	r26, r24
    5b16:	cb 01       	movw	r24, r22
    5b18:	9e 83       	std	Y+6, r25	; 0x06
    5b1a:	8d 83       	std	Y+5, r24	; 0x05
    5b1c:	0f c0       	rjmp	.+30     	; 0x5b3c <app_start+0x1d4>
    5b1e:	80 e9       	ldi	r24, 0x90	; 144
    5b20:	91 e0       	ldi	r25, 0x01	; 1
    5b22:	9c 83       	std	Y+4, r25	; 0x04
    5b24:	8b 83       	std	Y+3, r24	; 0x03
    5b26:	8b 81       	ldd	r24, Y+3	; 0x03
    5b28:	9c 81       	ldd	r25, Y+4	; 0x04
    5b2a:	01 97       	sbiw	r24, 0x01	; 1
    5b2c:	f1 f7       	brne	.-4      	; 0x5b2a <app_start+0x1c2>
    5b2e:	9c 83       	std	Y+4, r25	; 0x04
    5b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b32:	8d 81       	ldd	r24, Y+5	; 0x05
    5b34:	9e 81       	ldd	r25, Y+6	; 0x06
    5b36:	01 97       	sbiw	r24, 0x01	; 1
    5b38:	9e 83       	std	Y+6, r25	; 0x06
    5b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b40:	00 97       	sbiw	r24, 0x00	; 0
    5b42:	69 f7       	brne	.-38     	; 0x5b1e <app_start+0x1b6>
    5b44:	14 c0       	rjmp	.+40     	; 0x5b6e <app_start+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b46:	6f 81       	ldd	r22, Y+7	; 0x07
    5b48:	78 85       	ldd	r23, Y+8	; 0x08
    5b4a:	89 85       	ldd	r24, Y+9	; 0x09
    5b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b52:	dc 01       	movw	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	9e 83       	std	Y+6, r25	; 0x06
    5b58:	8d 83       	std	Y+5, r24	; 0x05
    5b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b5e:	9a 83       	std	Y+2, r25	; 0x02
    5b60:	89 83       	std	Y+1, r24	; 0x01
    5b62:	89 81       	ldd	r24, Y+1	; 0x01
    5b64:	9a 81       	ldd	r25, Y+2	; 0x02
    5b66:	01 97       	sbiw	r24, 0x01	; 1
    5b68:	f1 f7       	brne	.-4      	; 0x5b66 <app_start+0x1fe>
    5b6a:	9a 83       	std	Y+2, r25	; 0x02
    5b6c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);//delay to read
				LED_ON_PWM(Darkness_read());
    5b6e:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <Darkness_read>
    5b72:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <LED_ON_PWM>
    5b76:	02 c0       	rjmp	.+4      	; 0x5b7c <app_start+0x214>
			}
			else
			{
				turn_led_off();
    5b78:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <turn_led_off>
			}
			if (wifi_comm == MOTOR_OFF)  //MOTOR ON by 0% PWM
    5b7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5b7e:	83 30       	cpi	r24, 0x03	; 3
    5b80:	19 f4       	brne	.+6      	; 0x5b88 <app_start+0x220>
			{
				turn_MOTOR_off();
    5b82:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <turn_MOTOR_off>
    5b86:	fc ce       	rjmp	.-520    	; 0x5980 <app_start+0x18>
			}
			else if (wifi_comm == MOTOR_30_PWM_ON)  //MOTOR ON by 30% PWM
    5b88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5b8a:	84 30       	cpi	r24, 0x04	; 4
    5b8c:	21 f4       	brne	.+8      	; 0x5b96 <app_start+0x22e>
			{
				turn_MOTOR_on(30);
    5b8e:	8e e1       	ldi	r24, 0x1E	; 30
    5b90:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <turn_MOTOR_on>
    5b94:	f5 ce       	rjmp	.-534    	; 0x5980 <app_start+0x18>
			}
			else if (wifi_comm == MOTOR_70_PWM_ON)  //MOTOR ON by 70% PWM
    5b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5b98:	85 30       	cpi	r24, 0x05	; 5
    5b9a:	21 f4       	brne	.+8      	; 0x5ba4 <app_start+0x23c>
			{
				turn_MOTOR_on(70);
    5b9c:	86 e4       	ldi	r24, 0x46	; 70
    5b9e:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <turn_MOTOR_on>
    5ba2:	ee ce       	rjmp	.-548    	; 0x5980 <app_start+0x18>
			}
			else if (wifi_comm == LOGOUT_SYSTEM) // logout
    5ba4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ba6:	86 30       	cpi	r24, 0x06	; 6
    5ba8:	41 f4       	brne	.+16     	; 0x5bba <app_start+0x252>
			{
				turn_MOTOR_off();
    5baa:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <turn_MOTOR_off>
				LED_ON_PWM(0);
    5bae:	80 e0       	ldi	r24, 0x00	; 0
    5bb0:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <LED_ON_PWM>
				loginSuccess=0;
    5bb4:	10 92 39 03 	sts	0x0339, r1
    5bb8:	e3 ce       	rjmp	.-570    	; 0x5980 <app_start+0x18>
			}
			else if (wifi_comm == TEMP_SEND)  //MOTOR ON by 70% PWM
    5bba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5bbc:	87 30       	cpi	r24, 0x07	; 7
    5bbe:	09 f0       	breq	.+2      	; 0x5bc2 <app_start+0x25a>
    5bc0:	df ce       	rjmp	.-578    	; 0x5980 <app_start+0x18>
			{
				Wifi_send_temp(Temp_value); // send Temp_value To mobile app
    5bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5bc4:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <Wifi_send_temp>
    5bc8:	db ce       	rjmp	.-586    	; 0x5980 <app_start+0x18>

00005bca <Wifi_send_temp>:
		}
	}
}

void Wifi_send_temp(u8 temp)
{
    5bca:	df 93       	push	r29
    5bcc:	cf 93       	push	r28
    5bce:	cd b7       	in	r28, 0x3d	; 61
    5bd0:	de b7       	in	r29, 0x3e	; 62
    5bd2:	a3 97       	sbiw	r28, 0x23	; 35
    5bd4:	0f b6       	in	r0, 0x3f	; 63
    5bd6:	f8 94       	cli
    5bd8:	de bf       	out	0x3e, r29	; 62
    5bda:	0f be       	out	0x3f, r0	; 63
    5bdc:	cd bf       	out	0x3d, r28	; 61
    5bde:	8b a3       	std	Y+35, r24	; 0x23
	u8 string[20];
	sprintf(string,"Temp = %d",temp);
    5be0:	8b a1       	ldd	r24, Y+35	; 0x23
    5be2:	28 2f       	mov	r18, r24
    5be4:	30 e0       	ldi	r19, 0x00	; 0
    5be6:	00 d0       	rcall	.+0      	; 0x5be8 <Wifi_send_temp+0x1e>
    5be8:	00 d0       	rcall	.+0      	; 0x5bea <Wifi_send_temp+0x20>
    5bea:	00 d0       	rcall	.+0      	; 0x5bec <Wifi_send_temp+0x22>
    5bec:	ed b7       	in	r30, 0x3d	; 61
    5bee:	fe b7       	in	r31, 0x3e	; 62
    5bf0:	31 96       	adiw	r30, 0x01	; 1
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	0f 96       	adiw	r24, 0x0f	; 15
    5bf6:	91 83       	std	Z+1, r25	; 0x01
    5bf8:	80 83       	st	Z, r24
    5bfa:	8f e3       	ldi	r24, 0x3F	; 63
    5bfc:	91 e0       	ldi	r25, 0x01	; 1
    5bfe:	93 83       	std	Z+3, r25	; 0x03
    5c00:	82 83       	std	Z+2, r24	; 0x02
    5c02:	35 83       	std	Z+5, r19	; 0x05
    5c04:	24 83       	std	Z+4, r18	; 0x04
    5c06:	0e 94 cc 32 	call	0x6598	; 0x6598 <sprintf>
    5c0a:	8d b7       	in	r24, 0x3d	; 61
    5c0c:	9e b7       	in	r25, 0x3e	; 62
    5c0e:	06 96       	adiw	r24, 0x06	; 6
    5c10:	0f b6       	in	r0, 0x3f	; 63
    5c12:	f8 94       	cli
    5c14:	9e bf       	out	0x3e, r25	; 62
    5c16:	0f be       	out	0x3f, r0	; 63
    5c18:	8d bf       	out	0x3d, r24	; 61
    5c1a:	80 e0       	ldi	r24, 0x00	; 0
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	aa ef       	ldi	r26, 0xFA	; 250
    5c20:	b3 e4       	ldi	r27, 0x43	; 67
    5c22:	8b 87       	std	Y+11, r24	; 0x0b
    5c24:	9c 87       	std	Y+12, r25	; 0x0c
    5c26:	ad 87       	std	Y+13, r26	; 0x0d
    5c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c32:	20 e0       	ldi	r18, 0x00	; 0
    5c34:	30 e0       	ldi	r19, 0x00	; 0
    5c36:	4a e7       	ldi	r20, 0x7A	; 122
    5c38:	55 e4       	ldi	r21, 0x45	; 69
    5c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c3e:	dc 01       	movw	r26, r24
    5c40:	cb 01       	movw	r24, r22
    5c42:	8f 83       	std	Y+7, r24	; 0x07
    5c44:	98 87       	std	Y+8, r25	; 0x08
    5c46:	a9 87       	std	Y+9, r26	; 0x09
    5c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    5c4c:	78 85       	ldd	r23, Y+8	; 0x08
    5c4e:	89 85       	ldd	r24, Y+9	; 0x09
    5c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	40 e8       	ldi	r20, 0x80	; 128
    5c58:	5f e3       	ldi	r21, 0x3F	; 63
    5c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c5e:	88 23       	and	r24, r24
    5c60:	2c f4       	brge	.+10     	; 0x5c6c <Wifi_send_temp+0xa2>
		__ticks = 1;
    5c62:	81 e0       	ldi	r24, 0x01	; 1
    5c64:	90 e0       	ldi	r25, 0x00	; 0
    5c66:	9e 83       	std	Y+6, r25	; 0x06
    5c68:	8d 83       	std	Y+5, r24	; 0x05
    5c6a:	3f c0       	rjmp	.+126    	; 0x5cea <Wifi_send_temp+0x120>
	else if (__tmp > 65535)
    5c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    5c6e:	78 85       	ldd	r23, Y+8	; 0x08
    5c70:	89 85       	ldd	r24, Y+9	; 0x09
    5c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c74:	20 e0       	ldi	r18, 0x00	; 0
    5c76:	3f ef       	ldi	r19, 0xFF	; 255
    5c78:	4f e7       	ldi	r20, 0x7F	; 127
    5c7a:	57 e4       	ldi	r21, 0x47	; 71
    5c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c80:	18 16       	cp	r1, r24
    5c82:	4c f5       	brge	.+82     	; 0x5cd6 <Wifi_send_temp+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	30 e0       	ldi	r19, 0x00	; 0
    5c90:	40 e2       	ldi	r20, 0x20	; 32
    5c92:	51 e4       	ldi	r21, 0x41	; 65
    5c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c98:	dc 01       	movw	r26, r24
    5c9a:	cb 01       	movw	r24, r22
    5c9c:	bc 01       	movw	r22, r24
    5c9e:	cd 01       	movw	r24, r26
    5ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ca4:	dc 01       	movw	r26, r24
    5ca6:	cb 01       	movw	r24, r22
    5ca8:	9e 83       	std	Y+6, r25	; 0x06
    5caa:	8d 83       	std	Y+5, r24	; 0x05
    5cac:	0f c0       	rjmp	.+30     	; 0x5ccc <Wifi_send_temp+0x102>
    5cae:	80 e9       	ldi	r24, 0x90	; 144
    5cb0:	91 e0       	ldi	r25, 0x01	; 1
    5cb2:	9c 83       	std	Y+4, r25	; 0x04
    5cb4:	8b 83       	std	Y+3, r24	; 0x03
    5cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    5cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    5cba:	01 97       	sbiw	r24, 0x01	; 1
    5cbc:	f1 f7       	brne	.-4      	; 0x5cba <Wifi_send_temp+0xf0>
    5cbe:	9c 83       	std	Y+4, r25	; 0x04
    5cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc6:	01 97       	sbiw	r24, 0x01	; 1
    5cc8:	9e 83       	std	Y+6, r25	; 0x06
    5cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    5cce:	9e 81       	ldd	r25, Y+6	; 0x06
    5cd0:	00 97       	sbiw	r24, 0x00	; 0
    5cd2:	69 f7       	brne	.-38     	; 0x5cae <Wifi_send_temp+0xe4>
    5cd4:	14 c0       	rjmp	.+40     	; 0x5cfe <Wifi_send_temp+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    5cd8:	78 85       	ldd	r23, Y+8	; 0x08
    5cda:	89 85       	ldd	r24, Y+9	; 0x09
    5cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce2:	dc 01       	movw	r26, r24
    5ce4:	cb 01       	movw	r24, r22
    5ce6:	9e 83       	std	Y+6, r25	; 0x06
    5ce8:	8d 83       	std	Y+5, r24	; 0x05
    5cea:	8d 81       	ldd	r24, Y+5	; 0x05
    5cec:	9e 81       	ldd	r25, Y+6	; 0x06
    5cee:	9a 83       	std	Y+2, r25	; 0x02
    5cf0:	89 83       	std	Y+1, r24	; 0x01
    5cf2:	89 81       	ldd	r24, Y+1	; 0x01
    5cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf6:	01 97       	sbiw	r24, 0x01	; 1
    5cf8:	f1 f7       	brne	.-4      	; 0x5cf6 <Wifi_send_temp+0x12c>
    5cfa:	9a 83       	std	Y+2, r25	; 0x02
    5cfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
//	H_ESP8266_void_sendPublish("OPENLABPRO", string);
	H_ESP8266_void_sendPublish("TEMP/setpoint/state",string);
    5cfe:	89 e4       	ldi	r24, 0x49	; 73
    5d00:	91 e0       	ldi	r25, 0x01	; 1
    5d02:	9e 01       	movw	r18, r28
    5d04:	21 5f       	subi	r18, 0xF1	; 241
    5d06:	3f 4f       	sbci	r19, 0xFF	; 255
    5d08:	b9 01       	movw	r22, r18
    5d0a:	0e 94 b7 28 	call	0x516e	; 0x516e <H_ESP8266_void_sendPublish>
	H_LCD_void_sendString("Done Sending");
    5d0e:	8d e5       	ldi	r24, 0x5D	; 93
    5d10:	91 e0       	ldi	r25, 0x01	; 1
    5d12:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
}
    5d16:	a3 96       	adiw	r28, 0x23	; 35
    5d18:	0f b6       	in	r0, 0x3f	; 63
    5d1a:	f8 94       	cli
    5d1c:	de bf       	out	0x3e, r29	; 62
    5d1e:	0f be       	out	0x3f, r0	; 63
    5d20:	cd bf       	out	0x3d, r28	; 61
    5d22:	cf 91       	pop	r28
    5d24:	df 91       	pop	r29
    5d26:	08 95       	ret

00005d28 <Read_Temp>:

u8 Read_Temp(void)
{
    5d28:	df 93       	push	r29
    5d2a:	cf 93       	push	r28
    5d2c:	cd b7       	in	r28, 0x3d	; 61
    5d2e:	de b7       	in	r29, 0x3e	; 62
	return H_LM35_s16_getTemp();
    5d30:	0e 94 34 19 	call	0x3268	; 0x3268 <H_LM35_s16_getTemp>
}
    5d34:	cf 91       	pop	r28
    5d36:	df 91       	pop	r29
    5d38:	08 95       	ret

00005d3a <Wifi_receive_command>:
u8 Wifi_receive_command(void)
{
    5d3a:	df 93       	push	r29
    5d3c:	cf 93       	push	r28
    5d3e:	cd b7       	in	r28, 0x3d	; 61
    5d40:	de b7       	in	r29, 0x3e	; 62
    5d42:	c5 56       	subi	r28, 0x65	; 101
    5d44:	d0 40       	sbci	r29, 0x00	; 0
    5d46:	0f b6       	in	r0, 0x3f	; 63
    5d48:	f8 94       	cli
    5d4a:	de bf       	out	0x3e, r29	; 62
    5d4c:	0f be       	out	0x3f, r0	; 63
    5d4e:	cd bf       	out	0x3d, r28	; 61
//	debugStr("Here We are");
	u8 string[100];
	H_ESP_ReceiveString(string);
    5d50:	ce 01       	movw	r24, r28
    5d52:	01 96       	adiw	r24, 0x01	; 1
    5d54:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <H_ESP_ReceiveString>

	if(strstr((const char*)string, "LEDON") != NULL)
    5d58:	2a e6       	ldi	r18, 0x6A	; 106
    5d5a:	31 e0       	ldi	r19, 0x01	; 1
    5d5c:	ce 01       	movw	r24, r28
    5d5e:	01 96       	adiw	r24, 0x01	; 1
    5d60:	b9 01       	movw	r22, r18
    5d62:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5d66:	00 97       	sbiw	r24, 0x00	; 0
    5d68:	61 f0       	breq	.+24     	; 0x5d82 <Wifi_receive_command+0x48>
	{
		debugStr("Turn on LED");
    5d6a:	80 e7       	ldi	r24, 0x70	; 112
    5d6c:	91 e0       	ldi	r25, 0x01	; 1
    5d6e:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <debugStr>
		ledOn = 1;
    5d72:	81 e0       	ldi	r24, 0x01	; 1
    5d74:	80 93 10 04 	sts	0x0410, r24
		return LED_ON;
    5d78:	81 e0       	ldi	r24, 0x01	; 1
    5d7a:	a6 96       	adiw	r28, 0x26	; 38
    5d7c:	8f af       	std	Y+63, r24	; 0x3f
    5d7e:	a6 97       	sbiw	r28, 0x26	; 38
    5d80:	71 c0       	rjmp	.+226    	; 0x5e64 <Wifi_receive_command+0x12a>
	}
	else if (strstr((const char*)string, A_LED_OFF)!= NULL)
    5d82:	2c e7       	ldi	r18, 0x7C	; 124
    5d84:	31 e0       	ldi	r19, 0x01	; 1
    5d86:	ce 01       	movw	r24, r28
    5d88:	01 96       	adiw	r24, 0x01	; 1
    5d8a:	b9 01       	movw	r22, r18
    5d8c:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5d90:	00 97       	sbiw	r24, 0x00	; 0
    5d92:	59 f0       	breq	.+22     	; 0x5daa <Wifi_receive_command+0x70>
	{
		debugStr("Turn OFF LED");
    5d94:	83 e8       	ldi	r24, 0x83	; 131
    5d96:	91 e0       	ldi	r25, 0x01	; 1
    5d98:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <debugStr>
		ledOn = 0;
    5d9c:	10 92 10 04 	sts	0x0410, r1
		return LED_OFF;
    5da0:	82 e0       	ldi	r24, 0x02	; 2
    5da2:	a6 96       	adiw	r28, 0x26	; 38
    5da4:	8f af       	std	Y+63, r24	; 0x3f
    5da6:	a6 97       	sbiw	r28, 0x26	; 38
    5da8:	5d c0       	rjmp	.+186    	; 0x5e64 <Wifi_receive_command+0x12a>
	}
	else if(strstr((const char*)string, A_MOTOR_OFF)!= NULL)
    5daa:	20 e9       	ldi	r18, 0x90	; 144
    5dac:	31 e0       	ldi	r19, 0x01	; 1
    5dae:	ce 01       	movw	r24, r28
    5db0:	01 96       	adiw	r24, 0x01	; 1
    5db2:	b9 01       	movw	r22, r18
    5db4:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5db8:	00 97       	sbiw	r24, 0x00	; 0
    5dba:	49 f0       	breq	.+18     	; 0x5dce <Wifi_receive_command+0x94>
	{
		debugStr("Turn on Motor");
    5dbc:	89 e9       	ldi	r24, 0x99	; 153
    5dbe:	91 e0       	ldi	r25, 0x01	; 1
    5dc0:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <debugStr>
		return MOTOR_OFF;
    5dc4:	83 e0       	ldi	r24, 0x03	; 3
    5dc6:	a6 96       	adiw	r28, 0x26	; 38
    5dc8:	8f af       	std	Y+63, r24	; 0x3f
    5dca:	a6 97       	sbiw	r28, 0x26	; 38
    5dcc:	4b c0       	rjmp	.+150    	; 0x5e64 <Wifi_receive_command+0x12a>
	}
	else if (strstr((const char*)string, A_MOTOR_30_PWM_ON)!= NULL)
    5dce:	27 ea       	ldi	r18, 0xA7	; 167
    5dd0:	31 e0       	ldi	r19, 0x01	; 1
    5dd2:	ce 01       	movw	r24, r28
    5dd4:	01 96       	adiw	r24, 0x01	; 1
    5dd6:	b9 01       	movw	r22, r18
    5dd8:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5ddc:	00 97       	sbiw	r24, 0x00	; 0
    5dde:	49 f0       	breq	.+18     	; 0x5df2 <Wifi_receive_command+0xb8>
	{
		debugStr("Motor 30% Duty");
    5de0:	8f ea       	ldi	r24, 0xAF	; 175
    5de2:	91 e0       	ldi	r25, 0x01	; 1
    5de4:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <debugStr>
		return MOTOR_30_PWM_ON;
    5de8:	84 e0       	ldi	r24, 0x04	; 4
    5dea:	a6 96       	adiw	r28, 0x26	; 38
    5dec:	8f af       	std	Y+63, r24	; 0x3f
    5dee:	a6 97       	sbiw	r28, 0x26	; 38
    5df0:	39 c0       	rjmp	.+114    	; 0x5e64 <Wifi_receive_command+0x12a>
	}
	else if (strstr((const char*)string, A_MOTOR_70_PWM_ON)!= NULL)
    5df2:	2e eb       	ldi	r18, 0xBE	; 190
    5df4:	31 e0       	ldi	r19, 0x01	; 1
    5df6:	ce 01       	movw	r24, r28
    5df8:	01 96       	adiw	r24, 0x01	; 1
    5dfa:	b9 01       	movw	r22, r18
    5dfc:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5e00:	00 97       	sbiw	r24, 0x00	; 0
    5e02:	49 f0       	breq	.+18     	; 0x5e16 <Wifi_receive_command+0xdc>
	{
		debugStr("Motor 70% Duty");
    5e04:	86 ec       	ldi	r24, 0xC6	; 198
    5e06:	91 e0       	ldi	r25, 0x01	; 1
    5e08:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <debugStr>
		return MOTOR_70_PWM_ON;
    5e0c:	85 e0       	ldi	r24, 0x05	; 5
    5e0e:	a6 96       	adiw	r28, 0x26	; 38
    5e10:	8f af       	std	Y+63, r24	; 0x3f
    5e12:	a6 97       	sbiw	r28, 0x26	; 38
    5e14:	27 c0       	rjmp	.+78     	; 0x5e64 <Wifi_receive_command+0x12a>
	}
	else if (strstr((const char*)string, A_LOGOUT_SYSTEM)!= NULL)
    5e16:	25 ed       	ldi	r18, 0xD5	; 213
    5e18:	31 e0       	ldi	r19, 0x01	; 1
    5e1a:	ce 01       	movw	r24, r28
    5e1c:	01 96       	adiw	r24, 0x01	; 1
    5e1e:	b9 01       	movw	r22, r18
    5e20:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5e24:	00 97       	sbiw	r24, 0x00	; 0
    5e26:	49 f0       	breq	.+18     	; 0x5e3a <Wifi_receive_command+0x100>
	{
		debugStr("Log out");
    5e28:	8c ed       	ldi	r24, 0xDC	; 220
    5e2a:	91 e0       	ldi	r25, 0x01	; 1
    5e2c:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <debugStr>
		return LOGOUT_SYSTEM;
    5e30:	86 e0       	ldi	r24, 0x06	; 6
    5e32:	a6 96       	adiw	r28, 0x26	; 38
    5e34:	8f af       	std	Y+63, r24	; 0x3f
    5e36:	a6 97       	sbiw	r28, 0x26	; 38
    5e38:	15 c0       	rjmp	.+42     	; 0x5e64 <Wifi_receive_command+0x12a>
	}
	else if (strstr((const char*)string, A_TEMP_SEND)!= NULL)
    5e3a:	24 ee       	ldi	r18, 0xE4	; 228
    5e3c:	31 e0       	ldi	r19, 0x01	; 1
    5e3e:	ce 01       	movw	r24, r28
    5e40:	01 96       	adiw	r24, 0x01	; 1
    5e42:	b9 01       	movw	r22, r18
    5e44:	0e 94 91 32 	call	0x6522	; 0x6522 <strstr>
    5e48:	00 97       	sbiw	r24, 0x00	; 0
    5e4a:	49 f0       	breq	.+18     	; 0x5e5e <Wifi_receive_command+0x124>
	{
		debugStr("Send Temp");
    5e4c:	89 ee       	ldi	r24, 0xE9	; 233
    5e4e:	91 e0       	ldi	r25, 0x01	; 1
    5e50:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <debugStr>
		return TEMP_SEND;
    5e54:	87 e0       	ldi	r24, 0x07	; 7
    5e56:	a6 96       	adiw	r28, 0x26	; 38
    5e58:	8f af       	std	Y+63, r24	; 0x3f
    5e5a:	a6 97       	sbiw	r28, 0x26	; 38
    5e5c:	03 c0       	rjmp	.+6      	; 0x5e64 <Wifi_receive_command+0x12a>
	}
	return 0;
    5e5e:	a6 96       	adiw	r28, 0x26	; 38
    5e60:	1f ae       	std	Y+63, r1	; 0x3f
    5e62:	a6 97       	sbiw	r28, 0x26	; 38
    5e64:	a6 96       	adiw	r28, 0x26	; 38
    5e66:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e68:	a6 97       	sbiw	r28, 0x26	; 38
}
    5e6a:	cb 59       	subi	r28, 0x9B	; 155
    5e6c:	df 4f       	sbci	r29, 0xFF	; 255
    5e6e:	0f b6       	in	r0, 0x3f	; 63
    5e70:	f8 94       	cli
    5e72:	de bf       	out	0x3e, r29	; 62
    5e74:	0f be       	out	0x3f, r0	; 63
    5e76:	cd bf       	out	0x3d, r28	; 61
    5e78:	cf 91       	pop	r28
    5e7a:	df 91       	pop	r29
    5e7c:	08 95       	ret

00005e7e <Darkness_read>:
u8 Darkness_read()
{
    5e7e:	df 93       	push	r29
    5e80:	cf 93       	push	r28
    5e82:	0f 92       	push	r0
    5e84:	cd b7       	in	r28, 0x3d	; 61
    5e86:	de b7       	in	r29, 0x3e	; 62
	u8 darknessValue = (H_LDR_u8GetLighteningValue() * 100) / 180;
    5e88:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <H_LDR_u8GetLighteningValue>
    5e8c:	28 2f       	mov	r18, r24
    5e8e:	30 e0       	ldi	r19, 0x00	; 0
    5e90:	84 e6       	ldi	r24, 0x64	; 100
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	ac 01       	movw	r20, r24
    5e96:	24 9f       	mul	r18, r20
    5e98:	c0 01       	movw	r24, r0
    5e9a:	25 9f       	mul	r18, r21
    5e9c:	90 0d       	add	r25, r0
    5e9e:	34 9f       	mul	r19, r20
    5ea0:	90 0d       	add	r25, r0
    5ea2:	11 24       	eor	r1, r1
    5ea4:	24 eb       	ldi	r18, 0xB4	; 180
    5ea6:	30 e0       	ldi	r19, 0x00	; 0
    5ea8:	b9 01       	movw	r22, r18
    5eaa:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__divmodhi4>
    5eae:	cb 01       	movw	r24, r22
    5eb0:	89 83       	std	Y+1, r24	; 0x01
	if (darknessValue > 100) darknessValue = 100;
    5eb2:	89 81       	ldd	r24, Y+1	; 0x01
    5eb4:	85 36       	cpi	r24, 0x65	; 101
    5eb6:	10 f0       	brcs	.+4      	; 0x5ebc <Darkness_read+0x3e>
    5eb8:	84 e6       	ldi	r24, 0x64	; 100
    5eba:	89 83       	std	Y+1, r24	; 0x01
	return darknessValue;
    5ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
    5ebe:	0f 90       	pop	r0
    5ec0:	cf 91       	pop	r28
    5ec2:	df 91       	pop	r29
    5ec4:	08 95       	ret

00005ec6 <LED_ON_PWM>:
void LED_ON_PWM(u8 duty)
{
    5ec6:	df 93       	push	r29
    5ec8:	cf 93       	push	r28
    5eca:	0f 92       	push	r0
    5ecc:	cd b7       	in	r28, 0x3d	; 61
    5ece:	de b7       	in	r29, 0x3e	; 62
    5ed0:	89 83       	std	Y+1, r24	; 0x01
	H_LED_voidSetLedIntesity(duty);
    5ed2:	89 81       	ldd	r24, Y+1	; 0x01
    5ed4:	88 2f       	mov	r24, r24
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	0e 94 af 19 	call	0x335e	; 0x335e <H_LED_voidSetLedIntesity>
	H_LED_void_turnON();
    5edc:	0e 94 c0 19 	call	0x3380	; 0x3380 <H_LED_void_turnON>
}
    5ee0:	0f 90       	pop	r0
    5ee2:	cf 91       	pop	r28
    5ee4:	df 91       	pop	r29
    5ee6:	08 95       	ret

00005ee8 <turn_led_off>:

void turn_led_off(void)
{
    5ee8:	df 93       	push	r29
    5eea:	cf 93       	push	r28
    5eec:	cd b7       	in	r28, 0x3d	; 61
    5eee:	de b7       	in	r29, 0x3e	; 62
	H_LED_void_turnOFF();
    5ef0:	0e 94 c9 19 	call	0x3392	; 0x3392 <H_LED_void_turnOFF>
}
    5ef4:	cf 91       	pop	r28
    5ef6:	df 91       	pop	r29
    5ef8:	08 95       	ret

00005efa <turn_MOTOR_off>:

void turn_MOTOR_off(void)
{
    5efa:	df 93       	push	r29
    5efc:	cf 93       	push	r28
    5efe:	cd b7       	in	r28, 0x3d	; 61
    5f00:	de b7       	in	r29, 0x3e	; 62
//	H_DC_MOTOR_voidSetDutyCycle(0);
	H_DC_MOTOR_voidStop();
    5f02:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <H_DC_MOTOR_voidStop>
}
    5f06:	cf 91       	pop	r28
    5f08:	df 91       	pop	r29
    5f0a:	08 95       	ret

00005f0c <turn_MOTOR_on>:
void turn_MOTOR_on(u8 duty)
{
    5f0c:	df 93       	push	r29
    5f0e:	cf 93       	push	r28
    5f10:	0f 92       	push	r0
    5f12:	cd b7       	in	r28, 0x3d	; 61
    5f14:	de b7       	in	r29, 0x3e	; 62
    5f16:	89 83       	std	Y+1, r24	; 0x01
	H_DC_MOTOR_voidSetDutyCycle(duty);
    5f18:	89 81       	ldd	r24, Y+1	; 0x01
    5f1a:	0e 94 46 2b 	call	0x568c	; 0x568c <H_DC_MOTOR_voidSetDutyCycle>
	H_DC_MOTOR_voidStart();
    5f1e:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <H_DC_MOTOR_voidStart>
}
    5f22:	0f 90       	pop	r0
    5f24:	cf 91       	pop	r28
    5f26:	df 91       	pop	r29
    5f28:	08 95       	ret

00005f2a <ESP01_init>:

void ESP01_init()
{
    5f2a:	df 93       	push	r29
    5f2c:	cf 93       	push	r28
    5f2e:	cd b7       	in	r28, 0x3d	; 61
    5f30:	de b7       	in	r29, 0x3e	; 62
    5f32:	e8 97       	sbiw	r28, 0x38	; 56
    5f34:	0f b6       	in	r0, 0x3f	; 63
    5f36:	f8 94       	cli
    5f38:	de bf       	out	0x3e, r29	; 62
    5f3a:	0f be       	out	0x3f, r0	; 63
    5f3c:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    5f3e:	81 e0       	ldi	r24, 0x01	; 1
    5f40:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	H_LCD_void_sendString("Init.");
    5f44:	83 ef       	ldi	r24, 0xF3	; 243
    5f46:	91 e0       	ldi	r25, 0x01	; 1
    5f48:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>

	H_ESP8266_void_Init();
    5f4c:	0e 94 42 20 	call	0x4084	; 0x4084 <H_ESP8266_void_Init>

	H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    5f50:	81 e0       	ldi	r24, 0x01	; 1
    5f52:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	H_LCD_void_sendString("Init..");
    5f56:	89 ef       	ldi	r24, 0xF9	; 249
    5f58:	91 e0       	ldi	r25, 0x01	; 1
    5f5a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>

	 H_ESP8266_void_sendConnect("TST");
    5f5e:	80 e0       	ldi	r24, 0x00	; 0
    5f60:	92 e0       	ldi	r25, 0x02	; 2
    5f62:	0e 94 02 28 	call	0x5004	; 0x5004 <H_ESP8266_void_sendConnect>

	 H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    5f66:	81 e0       	ldi	r24, 0x01	; 1
    5f68:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	 H_LCD_void_sendString("Init...");
    5f6c:	84 e0       	ldi	r24, 0x04	; 4
    5f6e:	92 e0       	ldi	r25, 0x02	; 2
    5f70:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
    5f74:	80 e0       	ldi	r24, 0x00	; 0
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	aa e7       	ldi	r26, 0x7A	; 122
    5f7a:	b4 e4       	ldi	r27, 0x44	; 68
    5f7c:	8d ab       	std	Y+53, r24	; 0x35
    5f7e:	9e ab       	std	Y+54, r25	; 0x36
    5f80:	af ab       	std	Y+55, r26	; 0x37
    5f82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f84:	6d a9       	ldd	r22, Y+53	; 0x35
    5f86:	7e a9       	ldd	r23, Y+54	; 0x36
    5f88:	8f a9       	ldd	r24, Y+55	; 0x37
    5f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    5f8c:	20 e0       	ldi	r18, 0x00	; 0
    5f8e:	30 e0       	ldi	r19, 0x00	; 0
    5f90:	4a e7       	ldi	r20, 0x7A	; 122
    5f92:	55 e4       	ldi	r21, 0x45	; 69
    5f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f98:	dc 01       	movw	r26, r24
    5f9a:	cb 01       	movw	r24, r22
    5f9c:	89 ab       	std	Y+49, r24	; 0x31
    5f9e:	9a ab       	std	Y+50, r25	; 0x32
    5fa0:	ab ab       	std	Y+51, r26	; 0x33
    5fa2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5fa4:	69 a9       	ldd	r22, Y+49	; 0x31
    5fa6:	7a a9       	ldd	r23, Y+50	; 0x32
    5fa8:	8b a9       	ldd	r24, Y+51	; 0x33
    5faa:	9c a9       	ldd	r25, Y+52	; 0x34
    5fac:	20 e0       	ldi	r18, 0x00	; 0
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	40 e8       	ldi	r20, 0x80	; 128
    5fb2:	5f e3       	ldi	r21, 0x3F	; 63
    5fb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fb8:	88 23       	and	r24, r24
    5fba:	2c f4       	brge	.+10     	; 0x5fc6 <ESP01_init+0x9c>
		__ticks = 1;
    5fbc:	81 e0       	ldi	r24, 0x01	; 1
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	98 ab       	std	Y+48, r25	; 0x30
    5fc2:	8f a7       	std	Y+47, r24	; 0x2f
    5fc4:	3f c0       	rjmp	.+126    	; 0x6044 <ESP01_init+0x11a>
	else if (__tmp > 65535)
    5fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    5fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    5fca:	8b a9       	ldd	r24, Y+51	; 0x33
    5fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    5fce:	20 e0       	ldi	r18, 0x00	; 0
    5fd0:	3f ef       	ldi	r19, 0xFF	; 255
    5fd2:	4f e7       	ldi	r20, 0x7F	; 127
    5fd4:	57 e4       	ldi	r21, 0x47	; 71
    5fd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fda:	18 16       	cp	r1, r24
    5fdc:	4c f5       	brge	.+82     	; 0x6030 <ESP01_init+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fde:	6d a9       	ldd	r22, Y+53	; 0x35
    5fe0:	7e a9       	ldd	r23, Y+54	; 0x36
    5fe2:	8f a9       	ldd	r24, Y+55	; 0x37
    5fe4:	98 ad       	ldd	r25, Y+56	; 0x38
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	40 e2       	ldi	r20, 0x20	; 32
    5fec:	51 e4       	ldi	r21, 0x41	; 65
    5fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ff2:	dc 01       	movw	r26, r24
    5ff4:	cb 01       	movw	r24, r22
    5ff6:	bc 01       	movw	r22, r24
    5ff8:	cd 01       	movw	r24, r26
    5ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ffe:	dc 01       	movw	r26, r24
    6000:	cb 01       	movw	r24, r22
    6002:	98 ab       	std	Y+48, r25	; 0x30
    6004:	8f a7       	std	Y+47, r24	; 0x2f
    6006:	0f c0       	rjmp	.+30     	; 0x6026 <ESP01_init+0xfc>
    6008:	80 e9       	ldi	r24, 0x90	; 144
    600a:	91 e0       	ldi	r25, 0x01	; 1
    600c:	9e a7       	std	Y+46, r25	; 0x2e
    600e:	8d a7       	std	Y+45, r24	; 0x2d
    6010:	8d a5       	ldd	r24, Y+45	; 0x2d
    6012:	9e a5       	ldd	r25, Y+46	; 0x2e
    6014:	01 97       	sbiw	r24, 0x01	; 1
    6016:	f1 f7       	brne	.-4      	; 0x6014 <ESP01_init+0xea>
    6018:	9e a7       	std	Y+46, r25	; 0x2e
    601a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    601c:	8f a5       	ldd	r24, Y+47	; 0x2f
    601e:	98 a9       	ldd	r25, Y+48	; 0x30
    6020:	01 97       	sbiw	r24, 0x01	; 1
    6022:	98 ab       	std	Y+48, r25	; 0x30
    6024:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6026:	8f a5       	ldd	r24, Y+47	; 0x2f
    6028:	98 a9       	ldd	r25, Y+48	; 0x30
    602a:	00 97       	sbiw	r24, 0x00	; 0
    602c:	69 f7       	brne	.-38     	; 0x6008 <ESP01_init+0xde>
    602e:	14 c0       	rjmp	.+40     	; 0x6058 <ESP01_init+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6030:	69 a9       	ldd	r22, Y+49	; 0x31
    6032:	7a a9       	ldd	r23, Y+50	; 0x32
    6034:	8b a9       	ldd	r24, Y+51	; 0x33
    6036:	9c a9       	ldd	r25, Y+52	; 0x34
    6038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    603c:	dc 01       	movw	r26, r24
    603e:	cb 01       	movw	r24, r22
    6040:	98 ab       	std	Y+48, r25	; 0x30
    6042:	8f a7       	std	Y+47, r24	; 0x2f
    6044:	8f a5       	ldd	r24, Y+47	; 0x2f
    6046:	98 a9       	ldd	r25, Y+48	; 0x30
    6048:	9c a7       	std	Y+44, r25	; 0x2c
    604a:	8b a7       	std	Y+43, r24	; 0x2b
    604c:	8b a5       	ldd	r24, Y+43	; 0x2b
    604e:	9c a5       	ldd	r25, Y+44	; 0x2c
    6050:	01 97       	sbiw	r24, 0x01	; 1
    6052:	f1 f7       	brne	.-4      	; 0x6050 <ESP01_init+0x126>
    6054:	9c a7       	std	Y+44, r25	; 0x2c
    6056:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(1000);

	 H_ESP8266_void_sendPublish("OPENLABPRO","HELLO");
    6058:	8c e0       	ldi	r24, 0x0C	; 12
    605a:	92 e0       	ldi	r25, 0x02	; 2
    605c:	27 e1       	ldi	r18, 0x17	; 23
    605e:	32 e0       	ldi	r19, 0x02	; 2
    6060:	b9 01       	movw	r22, r18
    6062:	0e 94 b7 28 	call	0x516e	; 0x516e <H_ESP8266_void_sendPublish>
    6066:	80 e0       	ldi	r24, 0x00	; 0
    6068:	90 e4       	ldi	r25, 0x40	; 64
    606a:	ac e9       	ldi	r26, 0x9C	; 156
    606c:	b5 e4       	ldi	r27, 0x45	; 69
    606e:	8f a3       	std	Y+39, r24	; 0x27
    6070:	98 a7       	std	Y+40, r25	; 0x28
    6072:	a9 a7       	std	Y+41, r26	; 0x29
    6074:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6076:	6f a1       	ldd	r22, Y+39	; 0x27
    6078:	78 a5       	ldd	r23, Y+40	; 0x28
    607a:	89 a5       	ldd	r24, Y+41	; 0x29
    607c:	9a a5       	ldd	r25, Y+42	; 0x2a
    607e:	20 e0       	ldi	r18, 0x00	; 0
    6080:	30 e0       	ldi	r19, 0x00	; 0
    6082:	4a e7       	ldi	r20, 0x7A	; 122
    6084:	55 e4       	ldi	r21, 0x45	; 69
    6086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    608a:	dc 01       	movw	r26, r24
    608c:	cb 01       	movw	r24, r22
    608e:	8b a3       	std	Y+35, r24	; 0x23
    6090:	9c a3       	std	Y+36, r25	; 0x24
    6092:	ad a3       	std	Y+37, r26	; 0x25
    6094:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6096:	6b a1       	ldd	r22, Y+35	; 0x23
    6098:	7c a1       	ldd	r23, Y+36	; 0x24
    609a:	8d a1       	ldd	r24, Y+37	; 0x25
    609c:	9e a1       	ldd	r25, Y+38	; 0x26
    609e:	20 e0       	ldi	r18, 0x00	; 0
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	40 e8       	ldi	r20, 0x80	; 128
    60a4:	5f e3       	ldi	r21, 0x3F	; 63
    60a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60aa:	88 23       	and	r24, r24
    60ac:	2c f4       	brge	.+10     	; 0x60b8 <ESP01_init+0x18e>
		__ticks = 1;
    60ae:	81 e0       	ldi	r24, 0x01	; 1
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	9a a3       	std	Y+34, r25	; 0x22
    60b4:	89 a3       	std	Y+33, r24	; 0x21
    60b6:	3f c0       	rjmp	.+126    	; 0x6136 <ESP01_init+0x20c>
	else if (__tmp > 65535)
    60b8:	6b a1       	ldd	r22, Y+35	; 0x23
    60ba:	7c a1       	ldd	r23, Y+36	; 0x24
    60bc:	8d a1       	ldd	r24, Y+37	; 0x25
    60be:	9e a1       	ldd	r25, Y+38	; 0x26
    60c0:	20 e0       	ldi	r18, 0x00	; 0
    60c2:	3f ef       	ldi	r19, 0xFF	; 255
    60c4:	4f e7       	ldi	r20, 0x7F	; 127
    60c6:	57 e4       	ldi	r21, 0x47	; 71
    60c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60cc:	18 16       	cp	r1, r24
    60ce:	4c f5       	brge	.+82     	; 0x6122 <ESP01_init+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60d0:	6f a1       	ldd	r22, Y+39	; 0x27
    60d2:	78 a5       	ldd	r23, Y+40	; 0x28
    60d4:	89 a5       	ldd	r24, Y+41	; 0x29
    60d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    60d8:	20 e0       	ldi	r18, 0x00	; 0
    60da:	30 e0       	ldi	r19, 0x00	; 0
    60dc:	40 e2       	ldi	r20, 0x20	; 32
    60de:	51 e4       	ldi	r21, 0x41	; 65
    60e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60e4:	dc 01       	movw	r26, r24
    60e6:	cb 01       	movw	r24, r22
    60e8:	bc 01       	movw	r22, r24
    60ea:	cd 01       	movw	r24, r26
    60ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f0:	dc 01       	movw	r26, r24
    60f2:	cb 01       	movw	r24, r22
    60f4:	9a a3       	std	Y+34, r25	; 0x22
    60f6:	89 a3       	std	Y+33, r24	; 0x21
    60f8:	0f c0       	rjmp	.+30     	; 0x6118 <ESP01_init+0x1ee>
    60fa:	80 e9       	ldi	r24, 0x90	; 144
    60fc:	91 e0       	ldi	r25, 0x01	; 1
    60fe:	98 a3       	std	Y+32, r25	; 0x20
    6100:	8f 8f       	std	Y+31, r24	; 0x1f
    6102:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6104:	98 a1       	ldd	r25, Y+32	; 0x20
    6106:	01 97       	sbiw	r24, 0x01	; 1
    6108:	f1 f7       	brne	.-4      	; 0x6106 <ESP01_init+0x1dc>
    610a:	98 a3       	std	Y+32, r25	; 0x20
    610c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    610e:	89 a1       	ldd	r24, Y+33	; 0x21
    6110:	9a a1       	ldd	r25, Y+34	; 0x22
    6112:	01 97       	sbiw	r24, 0x01	; 1
    6114:	9a a3       	std	Y+34, r25	; 0x22
    6116:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6118:	89 a1       	ldd	r24, Y+33	; 0x21
    611a:	9a a1       	ldd	r25, Y+34	; 0x22
    611c:	00 97       	sbiw	r24, 0x00	; 0
    611e:	69 f7       	brne	.-38     	; 0x60fa <ESP01_init+0x1d0>
    6120:	14 c0       	rjmp	.+40     	; 0x614a <ESP01_init+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6122:	6b a1       	ldd	r22, Y+35	; 0x23
    6124:	7c a1       	ldd	r23, Y+36	; 0x24
    6126:	8d a1       	ldd	r24, Y+37	; 0x25
    6128:	9e a1       	ldd	r25, Y+38	; 0x26
    612a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    612e:	dc 01       	movw	r26, r24
    6130:	cb 01       	movw	r24, r22
    6132:	9a a3       	std	Y+34, r25	; 0x22
    6134:	89 a3       	std	Y+33, r24	; 0x21
    6136:	89 a1       	ldd	r24, Y+33	; 0x21
    6138:	9a a1       	ldd	r25, Y+34	; 0x22
    613a:	9e 8f       	std	Y+30, r25	; 0x1e
    613c:	8d 8f       	std	Y+29, r24	; 0x1d
    613e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6140:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6142:	01 97       	sbiw	r24, 0x01	; 1
    6144:	f1 f7       	brne	.-4      	; 0x6142 <ESP01_init+0x218>
    6146:	9e 8f       	std	Y+30, r25	; 0x1e
    6148:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5000);

	 H_ESP8266_void_sendSubscribe("OPENLABPRO");
    614a:	8c e0       	ldi	r24, 0x0C	; 12
    614c:	92 e0       	ldi	r25, 0x02	; 2
    614e:	0e 94 19 29 	call	0x5232	; 0x5232 <H_ESP8266_void_sendSubscribe>

	 H_LCD_void_sendCommand(LCD_CMD_CLEAR);
    6152:	81 e0       	ldi	r24, 0x01	; 1
    6154:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <H_LCD_void_sendCommand>
	 H_LCD_void_sendIntNum(3);
    6158:	63 e0       	ldi	r22, 0x03	; 3
    615a:	70 e0       	ldi	r23, 0x00	; 0
    615c:	80 e0       	ldi	r24, 0x00	; 0
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <H_LCD_void_sendIntNum>
	 H_LCD_void_sendString("Init done");
    6164:	8d e1       	ldi	r24, 0x1D	; 29
    6166:	92 e0       	ldi	r25, 0x02	; 2
    6168:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <H_LCD_void_sendString>
    616c:	80 e0       	ldi	r24, 0x00	; 0
    616e:	90 e0       	ldi	r25, 0x00	; 0
    6170:	aa e7       	ldi	r26, 0x7A	; 122
    6172:	b4 e4       	ldi	r27, 0x44	; 68
    6174:	89 8f       	std	Y+25, r24	; 0x19
    6176:	9a 8f       	std	Y+26, r25	; 0x1a
    6178:	ab 8f       	std	Y+27, r26	; 0x1b
    617a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    617c:	69 8d       	ldd	r22, Y+25	; 0x19
    617e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6184:	20 e0       	ldi	r18, 0x00	; 0
    6186:	30 e0       	ldi	r19, 0x00	; 0
    6188:	4a e7       	ldi	r20, 0x7A	; 122
    618a:	55 e4       	ldi	r21, 0x45	; 69
    618c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6190:	dc 01       	movw	r26, r24
    6192:	cb 01       	movw	r24, r22
    6194:	8d 8b       	std	Y+21, r24	; 0x15
    6196:	9e 8b       	std	Y+22, r25	; 0x16
    6198:	af 8b       	std	Y+23, r26	; 0x17
    619a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    619c:	6d 89       	ldd	r22, Y+21	; 0x15
    619e:	7e 89       	ldd	r23, Y+22	; 0x16
    61a0:	8f 89       	ldd	r24, Y+23	; 0x17
    61a2:	98 8d       	ldd	r25, Y+24	; 0x18
    61a4:	20 e0       	ldi	r18, 0x00	; 0
    61a6:	30 e0       	ldi	r19, 0x00	; 0
    61a8:	40 e8       	ldi	r20, 0x80	; 128
    61aa:	5f e3       	ldi	r21, 0x3F	; 63
    61ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61b0:	88 23       	and	r24, r24
    61b2:	2c f4       	brge	.+10     	; 0x61be <ESP01_init+0x294>
		__ticks = 1;
    61b4:	81 e0       	ldi	r24, 0x01	; 1
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	9c 8b       	std	Y+20, r25	; 0x14
    61ba:	8b 8b       	std	Y+19, r24	; 0x13
    61bc:	3f c0       	rjmp	.+126    	; 0x623c <ESP01_init+0x312>
	else if (__tmp > 65535)
    61be:	6d 89       	ldd	r22, Y+21	; 0x15
    61c0:	7e 89       	ldd	r23, Y+22	; 0x16
    61c2:	8f 89       	ldd	r24, Y+23	; 0x17
    61c4:	98 8d       	ldd	r25, Y+24	; 0x18
    61c6:	20 e0       	ldi	r18, 0x00	; 0
    61c8:	3f ef       	ldi	r19, 0xFF	; 255
    61ca:	4f e7       	ldi	r20, 0x7F	; 127
    61cc:	57 e4       	ldi	r21, 0x47	; 71
    61ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61d2:	18 16       	cp	r1, r24
    61d4:	4c f5       	brge	.+82     	; 0x6228 <ESP01_init+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61d6:	69 8d       	ldd	r22, Y+25	; 0x19
    61d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61de:	20 e0       	ldi	r18, 0x00	; 0
    61e0:	30 e0       	ldi	r19, 0x00	; 0
    61e2:	40 e2       	ldi	r20, 0x20	; 32
    61e4:	51 e4       	ldi	r21, 0x41	; 65
    61e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61ea:	dc 01       	movw	r26, r24
    61ec:	cb 01       	movw	r24, r22
    61ee:	bc 01       	movw	r22, r24
    61f0:	cd 01       	movw	r24, r26
    61f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61f6:	dc 01       	movw	r26, r24
    61f8:	cb 01       	movw	r24, r22
    61fa:	9c 8b       	std	Y+20, r25	; 0x14
    61fc:	8b 8b       	std	Y+19, r24	; 0x13
    61fe:	0f c0       	rjmp	.+30     	; 0x621e <ESP01_init+0x2f4>
    6200:	80 e9       	ldi	r24, 0x90	; 144
    6202:	91 e0       	ldi	r25, 0x01	; 1
    6204:	9a 8b       	std	Y+18, r25	; 0x12
    6206:	89 8b       	std	Y+17, r24	; 0x11
    6208:	89 89       	ldd	r24, Y+17	; 0x11
    620a:	9a 89       	ldd	r25, Y+18	; 0x12
    620c:	01 97       	sbiw	r24, 0x01	; 1
    620e:	f1 f7       	brne	.-4      	; 0x620c <ESP01_init+0x2e2>
    6210:	9a 8b       	std	Y+18, r25	; 0x12
    6212:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6214:	8b 89       	ldd	r24, Y+19	; 0x13
    6216:	9c 89       	ldd	r25, Y+20	; 0x14
    6218:	01 97       	sbiw	r24, 0x01	; 1
    621a:	9c 8b       	std	Y+20, r25	; 0x14
    621c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    621e:	8b 89       	ldd	r24, Y+19	; 0x13
    6220:	9c 89       	ldd	r25, Y+20	; 0x14
    6222:	00 97       	sbiw	r24, 0x00	; 0
    6224:	69 f7       	brne	.-38     	; 0x6200 <ESP01_init+0x2d6>
    6226:	14 c0       	rjmp	.+40     	; 0x6250 <ESP01_init+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6228:	6d 89       	ldd	r22, Y+21	; 0x15
    622a:	7e 89       	ldd	r23, Y+22	; 0x16
    622c:	8f 89       	ldd	r24, Y+23	; 0x17
    622e:	98 8d       	ldd	r25, Y+24	; 0x18
    6230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6234:	dc 01       	movw	r26, r24
    6236:	cb 01       	movw	r24, r22
    6238:	9c 8b       	std	Y+20, r25	; 0x14
    623a:	8b 8b       	std	Y+19, r24	; 0x13
    623c:	8b 89       	ldd	r24, Y+19	; 0x13
    623e:	9c 89       	ldd	r25, Y+20	; 0x14
    6240:	98 8b       	std	Y+16, r25	; 0x10
    6242:	8f 87       	std	Y+15, r24	; 0x0f
    6244:	8f 85       	ldd	r24, Y+15	; 0x0f
    6246:	98 89       	ldd	r25, Y+16	; 0x10
    6248:	01 97       	sbiw	r24, 0x01	; 1
    624a:	f1 f7       	brne	.-4      	; 0x6248 <ESP01_init+0x31e>
    624c:	98 8b       	std	Y+16, r25	; 0x10
    624e:	8f 87       	std	Y+15, r24	; 0x0f
    6250:	80 e0       	ldi	r24, 0x00	; 0
    6252:	90 e0       	ldi	r25, 0x00	; 0
    6254:	aa e7       	ldi	r26, 0x7A	; 122
    6256:	b4 e4       	ldi	r27, 0x44	; 68
    6258:	8b 87       	std	Y+11, r24	; 0x0b
    625a:	9c 87       	std	Y+12, r25	; 0x0c
    625c:	ad 87       	std	Y+13, r26	; 0x0d
    625e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6260:	6b 85       	ldd	r22, Y+11	; 0x0b
    6262:	7c 85       	ldd	r23, Y+12	; 0x0c
    6264:	8d 85       	ldd	r24, Y+13	; 0x0d
    6266:	9e 85       	ldd	r25, Y+14	; 0x0e
    6268:	20 e0       	ldi	r18, 0x00	; 0
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	4a e7       	ldi	r20, 0x7A	; 122
    626e:	55 e4       	ldi	r21, 0x45	; 69
    6270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6274:	dc 01       	movw	r26, r24
    6276:	cb 01       	movw	r24, r22
    6278:	8f 83       	std	Y+7, r24	; 0x07
    627a:	98 87       	std	Y+8, r25	; 0x08
    627c:	a9 87       	std	Y+9, r26	; 0x09
    627e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6280:	6f 81       	ldd	r22, Y+7	; 0x07
    6282:	78 85       	ldd	r23, Y+8	; 0x08
    6284:	89 85       	ldd	r24, Y+9	; 0x09
    6286:	9a 85       	ldd	r25, Y+10	; 0x0a
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	40 e8       	ldi	r20, 0x80	; 128
    628e:	5f e3       	ldi	r21, 0x3F	; 63
    6290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6294:	88 23       	and	r24, r24
    6296:	2c f4       	brge	.+10     	; 0x62a2 <ESP01_init+0x378>
		__ticks = 1;
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	9e 83       	std	Y+6, r25	; 0x06
    629e:	8d 83       	std	Y+5, r24	; 0x05
    62a0:	3f c0       	rjmp	.+126    	; 0x6320 <ESP01_init+0x3f6>
	else if (__tmp > 65535)
    62a2:	6f 81       	ldd	r22, Y+7	; 0x07
    62a4:	78 85       	ldd	r23, Y+8	; 0x08
    62a6:	89 85       	ldd	r24, Y+9	; 0x09
    62a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    62aa:	20 e0       	ldi	r18, 0x00	; 0
    62ac:	3f ef       	ldi	r19, 0xFF	; 255
    62ae:	4f e7       	ldi	r20, 0x7F	; 127
    62b0:	57 e4       	ldi	r21, 0x47	; 71
    62b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62b6:	18 16       	cp	r1, r24
    62b8:	4c f5       	brge	.+82     	; 0x630c <ESP01_init+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    62bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    62be:	8d 85       	ldd	r24, Y+13	; 0x0d
    62c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    62c2:	20 e0       	ldi	r18, 0x00	; 0
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	40 e2       	ldi	r20, 0x20	; 32
    62c8:	51 e4       	ldi	r21, 0x41	; 65
    62ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62ce:	dc 01       	movw	r26, r24
    62d0:	cb 01       	movw	r24, r22
    62d2:	bc 01       	movw	r22, r24
    62d4:	cd 01       	movw	r24, r26
    62d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62da:	dc 01       	movw	r26, r24
    62dc:	cb 01       	movw	r24, r22
    62de:	9e 83       	std	Y+6, r25	; 0x06
    62e0:	8d 83       	std	Y+5, r24	; 0x05
    62e2:	0f c0       	rjmp	.+30     	; 0x6302 <ESP01_init+0x3d8>
    62e4:	80 e9       	ldi	r24, 0x90	; 144
    62e6:	91 e0       	ldi	r25, 0x01	; 1
    62e8:	9c 83       	std	Y+4, r25	; 0x04
    62ea:	8b 83       	std	Y+3, r24	; 0x03
    62ec:	8b 81       	ldd	r24, Y+3	; 0x03
    62ee:	9c 81       	ldd	r25, Y+4	; 0x04
    62f0:	01 97       	sbiw	r24, 0x01	; 1
    62f2:	f1 f7       	brne	.-4      	; 0x62f0 <ESP01_init+0x3c6>
    62f4:	9c 83       	std	Y+4, r25	; 0x04
    62f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62f8:	8d 81       	ldd	r24, Y+5	; 0x05
    62fa:	9e 81       	ldd	r25, Y+6	; 0x06
    62fc:	01 97       	sbiw	r24, 0x01	; 1
    62fe:	9e 83       	std	Y+6, r25	; 0x06
    6300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6302:	8d 81       	ldd	r24, Y+5	; 0x05
    6304:	9e 81       	ldd	r25, Y+6	; 0x06
    6306:	00 97       	sbiw	r24, 0x00	; 0
    6308:	69 f7       	brne	.-38     	; 0x62e4 <ESP01_init+0x3ba>
    630a:	14 c0       	rjmp	.+40     	; 0x6334 <ESP01_init+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    630c:	6f 81       	ldd	r22, Y+7	; 0x07
    630e:	78 85       	ldd	r23, Y+8	; 0x08
    6310:	89 85       	ldd	r24, Y+9	; 0x09
    6312:	9a 85       	ldd	r25, Y+10	; 0x0a
    6314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6318:	dc 01       	movw	r26, r24
    631a:	cb 01       	movw	r24, r22
    631c:	9e 83       	std	Y+6, r25	; 0x06
    631e:	8d 83       	std	Y+5, r24	; 0x05
    6320:	8d 81       	ldd	r24, Y+5	; 0x05
    6322:	9e 81       	ldd	r25, Y+6	; 0x06
    6324:	9a 83       	std	Y+2, r25	; 0x02
    6326:	89 83       	std	Y+1, r24	; 0x01
    6328:	89 81       	ldd	r24, Y+1	; 0x01
    632a:	9a 81       	ldd	r25, Y+2	; 0x02
    632c:	01 97       	sbiw	r24, 0x01	; 1
    632e:	f1 f7       	brne	.-4      	; 0x632c <ESP01_init+0x402>
    6330:	9a 83       	std	Y+2, r25	; 0x02
    6332:	89 83       	std	Y+1, r24	; 0x01
//	_delay_ms(1000);

//
	//H_ESP8266_void_sendSubscribe("OPENLABPRO");
	_delay_ms(1000);
}
    6334:	e8 96       	adiw	r28, 0x38	; 56
    6336:	0f b6       	in	r0, 0x3f	; 63
    6338:	f8 94       	cli
    633a:	de bf       	out	0x3e, r29	; 62
    633c:	0f be       	out	0x3f, r0	; 63
    633e:	cd bf       	out	0x3d, r28	; 61
    6340:	cf 91       	pop	r28
    6342:	df 91       	pop	r29
    6344:	08 95       	ret

00006346 <main>:
#include "app.h"
#include"UART_int.h"

extern const UART_ConfigType UART_Config;
int main(void)
{
    6346:	df 93       	push	r29
    6348:	cf 93       	push	r28
    634a:	cd b7       	in	r28, 0x3d	; 61
    634c:	de b7       	in	r29, 0x3e	; 62
	UART_Init(&UART_Config);
    634e:	86 e7       	ldi	r24, 0x76	; 118
    6350:	93 e0       	ldi	r25, 0x03	; 3
    6352:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>

    /* Replace with your application code */

   app_init();
    6356:	0e 94 95 2c 	call	0x592a	; 0x592a <app_init>
   app_start();
    635a:	0e 94 b4 2c 	call	0x5968	; 0x5968 <app_start>
    635e:	80 e0       	ldi	r24, 0x00	; 0
    6360:	90 e0       	ldi	r25, 0x00	; 0

}
    6362:	cf 91       	pop	r28
    6364:	df 91       	pop	r29
    6366:	08 95       	ret

00006368 <__mulsi3>:
    6368:	62 9f       	mul	r22, r18
    636a:	d0 01       	movw	r26, r0
    636c:	73 9f       	mul	r23, r19
    636e:	f0 01       	movw	r30, r0
    6370:	82 9f       	mul	r24, r18
    6372:	e0 0d       	add	r30, r0
    6374:	f1 1d       	adc	r31, r1
    6376:	64 9f       	mul	r22, r20
    6378:	e0 0d       	add	r30, r0
    637a:	f1 1d       	adc	r31, r1
    637c:	92 9f       	mul	r25, r18
    637e:	f0 0d       	add	r31, r0
    6380:	83 9f       	mul	r24, r19
    6382:	f0 0d       	add	r31, r0
    6384:	74 9f       	mul	r23, r20
    6386:	f0 0d       	add	r31, r0
    6388:	65 9f       	mul	r22, r21
    638a:	f0 0d       	add	r31, r0
    638c:	99 27       	eor	r25, r25
    638e:	72 9f       	mul	r23, r18
    6390:	b0 0d       	add	r27, r0
    6392:	e1 1d       	adc	r30, r1
    6394:	f9 1f       	adc	r31, r25
    6396:	63 9f       	mul	r22, r19
    6398:	b0 0d       	add	r27, r0
    639a:	e1 1d       	adc	r30, r1
    639c:	f9 1f       	adc	r31, r25
    639e:	bd 01       	movw	r22, r26
    63a0:	cf 01       	movw	r24, r30
    63a2:	11 24       	eor	r1, r1
    63a4:	08 95       	ret

000063a6 <__udivmodqi4>:
    63a6:	99 1b       	sub	r25, r25
    63a8:	79 e0       	ldi	r23, 0x09	; 9
    63aa:	04 c0       	rjmp	.+8      	; 0x63b4 <__udivmodqi4_ep>

000063ac <__udivmodqi4_loop>:
    63ac:	99 1f       	adc	r25, r25
    63ae:	96 17       	cp	r25, r22
    63b0:	08 f0       	brcs	.+2      	; 0x63b4 <__udivmodqi4_ep>
    63b2:	96 1b       	sub	r25, r22

000063b4 <__udivmodqi4_ep>:
    63b4:	88 1f       	adc	r24, r24
    63b6:	7a 95       	dec	r23
    63b8:	c9 f7       	brne	.-14     	; 0x63ac <__udivmodqi4_loop>
    63ba:	80 95       	com	r24
    63bc:	08 95       	ret

000063be <__udivmodhi4>:
    63be:	aa 1b       	sub	r26, r26
    63c0:	bb 1b       	sub	r27, r27
    63c2:	51 e1       	ldi	r21, 0x11	; 17
    63c4:	07 c0       	rjmp	.+14     	; 0x63d4 <__udivmodhi4_ep>

000063c6 <__udivmodhi4_loop>:
    63c6:	aa 1f       	adc	r26, r26
    63c8:	bb 1f       	adc	r27, r27
    63ca:	a6 17       	cp	r26, r22
    63cc:	b7 07       	cpc	r27, r23
    63ce:	10 f0       	brcs	.+4      	; 0x63d4 <__udivmodhi4_ep>
    63d0:	a6 1b       	sub	r26, r22
    63d2:	b7 0b       	sbc	r27, r23

000063d4 <__udivmodhi4_ep>:
    63d4:	88 1f       	adc	r24, r24
    63d6:	99 1f       	adc	r25, r25
    63d8:	5a 95       	dec	r21
    63da:	a9 f7       	brne	.-22     	; 0x63c6 <__udivmodhi4_loop>
    63dc:	80 95       	com	r24
    63de:	90 95       	com	r25
    63e0:	bc 01       	movw	r22, r24
    63e2:	cd 01       	movw	r24, r26
    63e4:	08 95       	ret

000063e6 <__divmodhi4>:
    63e6:	97 fb       	bst	r25, 7
    63e8:	09 2e       	mov	r0, r25
    63ea:	07 26       	eor	r0, r23
    63ec:	0a d0       	rcall	.+20     	; 0x6402 <__divmodhi4_neg1>
    63ee:	77 fd       	sbrc	r23, 7
    63f0:	04 d0       	rcall	.+8      	; 0x63fa <__divmodhi4_neg2>
    63f2:	e5 df       	rcall	.-54     	; 0x63be <__udivmodhi4>
    63f4:	06 d0       	rcall	.+12     	; 0x6402 <__divmodhi4_neg1>
    63f6:	00 20       	and	r0, r0
    63f8:	1a f4       	brpl	.+6      	; 0x6400 <__divmodhi4_exit>

000063fa <__divmodhi4_neg2>:
    63fa:	70 95       	com	r23
    63fc:	61 95       	neg	r22
    63fe:	7f 4f       	sbci	r23, 0xFF	; 255

00006400 <__divmodhi4_exit>:
    6400:	08 95       	ret

00006402 <__divmodhi4_neg1>:
    6402:	f6 f7       	brtc	.-4      	; 0x6400 <__divmodhi4_exit>
    6404:	90 95       	com	r25
    6406:	81 95       	neg	r24
    6408:	9f 4f       	sbci	r25, 0xFF	; 255
    640a:	08 95       	ret

0000640c <__udivmodsi4>:
    640c:	a1 e2       	ldi	r26, 0x21	; 33
    640e:	1a 2e       	mov	r1, r26
    6410:	aa 1b       	sub	r26, r26
    6412:	bb 1b       	sub	r27, r27
    6414:	fd 01       	movw	r30, r26
    6416:	0d c0       	rjmp	.+26     	; 0x6432 <__udivmodsi4_ep>

00006418 <__udivmodsi4_loop>:
    6418:	aa 1f       	adc	r26, r26
    641a:	bb 1f       	adc	r27, r27
    641c:	ee 1f       	adc	r30, r30
    641e:	ff 1f       	adc	r31, r31
    6420:	a2 17       	cp	r26, r18
    6422:	b3 07       	cpc	r27, r19
    6424:	e4 07       	cpc	r30, r20
    6426:	f5 07       	cpc	r31, r21
    6428:	20 f0       	brcs	.+8      	; 0x6432 <__udivmodsi4_ep>
    642a:	a2 1b       	sub	r26, r18
    642c:	b3 0b       	sbc	r27, r19
    642e:	e4 0b       	sbc	r30, r20
    6430:	f5 0b       	sbc	r31, r21

00006432 <__udivmodsi4_ep>:
    6432:	66 1f       	adc	r22, r22
    6434:	77 1f       	adc	r23, r23
    6436:	88 1f       	adc	r24, r24
    6438:	99 1f       	adc	r25, r25
    643a:	1a 94       	dec	r1
    643c:	69 f7       	brne	.-38     	; 0x6418 <__udivmodsi4_loop>
    643e:	60 95       	com	r22
    6440:	70 95       	com	r23
    6442:	80 95       	com	r24
    6444:	90 95       	com	r25
    6446:	9b 01       	movw	r18, r22
    6448:	ac 01       	movw	r20, r24
    644a:	bd 01       	movw	r22, r26
    644c:	cf 01       	movw	r24, r30
    644e:	08 95       	ret

00006450 <__divmodsi4>:
    6450:	97 fb       	bst	r25, 7
    6452:	09 2e       	mov	r0, r25
    6454:	05 26       	eor	r0, r21
    6456:	0e d0       	rcall	.+28     	; 0x6474 <__divmodsi4_neg1>
    6458:	57 fd       	sbrc	r21, 7
    645a:	04 d0       	rcall	.+8      	; 0x6464 <__divmodsi4_neg2>
    645c:	d7 df       	rcall	.-82     	; 0x640c <__udivmodsi4>
    645e:	0a d0       	rcall	.+20     	; 0x6474 <__divmodsi4_neg1>
    6460:	00 1c       	adc	r0, r0
    6462:	38 f4       	brcc	.+14     	; 0x6472 <__divmodsi4_exit>

00006464 <__divmodsi4_neg2>:
    6464:	50 95       	com	r21
    6466:	40 95       	com	r20
    6468:	30 95       	com	r19
    646a:	21 95       	neg	r18
    646c:	3f 4f       	sbci	r19, 0xFF	; 255
    646e:	4f 4f       	sbci	r20, 0xFF	; 255
    6470:	5f 4f       	sbci	r21, 0xFF	; 255

00006472 <__divmodsi4_exit>:
    6472:	08 95       	ret

00006474 <__divmodsi4_neg1>:
    6474:	f6 f7       	brtc	.-4      	; 0x6472 <__divmodsi4_exit>
    6476:	90 95       	com	r25
    6478:	80 95       	com	r24
    647a:	70 95       	com	r23
    647c:	61 95       	neg	r22
    647e:	7f 4f       	sbci	r23, 0xFF	; 255
    6480:	8f 4f       	sbci	r24, 0xFF	; 255
    6482:	9f 4f       	sbci	r25, 0xFF	; 255
    6484:	08 95       	ret

00006486 <__prologue_saves__>:
    6486:	2f 92       	push	r2
    6488:	3f 92       	push	r3
    648a:	4f 92       	push	r4
    648c:	5f 92       	push	r5
    648e:	6f 92       	push	r6
    6490:	7f 92       	push	r7
    6492:	8f 92       	push	r8
    6494:	9f 92       	push	r9
    6496:	af 92       	push	r10
    6498:	bf 92       	push	r11
    649a:	cf 92       	push	r12
    649c:	df 92       	push	r13
    649e:	ef 92       	push	r14
    64a0:	ff 92       	push	r15
    64a2:	0f 93       	push	r16
    64a4:	1f 93       	push	r17
    64a6:	cf 93       	push	r28
    64a8:	df 93       	push	r29
    64aa:	cd b7       	in	r28, 0x3d	; 61
    64ac:	de b7       	in	r29, 0x3e	; 62
    64ae:	ca 1b       	sub	r28, r26
    64b0:	db 0b       	sbc	r29, r27
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	f8 94       	cli
    64b6:	de bf       	out	0x3e, r29	; 62
    64b8:	0f be       	out	0x3f, r0	; 63
    64ba:	cd bf       	out	0x3d, r28	; 61
    64bc:	09 94       	ijmp

000064be <__epilogue_restores__>:
    64be:	2a 88       	ldd	r2, Y+18	; 0x12
    64c0:	39 88       	ldd	r3, Y+17	; 0x11
    64c2:	48 88       	ldd	r4, Y+16	; 0x10
    64c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    64c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    64c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    64ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    64cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    64ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    64d0:	b9 84       	ldd	r11, Y+9	; 0x09
    64d2:	c8 84       	ldd	r12, Y+8	; 0x08
    64d4:	df 80       	ldd	r13, Y+7	; 0x07
    64d6:	ee 80       	ldd	r14, Y+6	; 0x06
    64d8:	fd 80       	ldd	r15, Y+5	; 0x05
    64da:	0c 81       	ldd	r16, Y+4	; 0x04
    64dc:	1b 81       	ldd	r17, Y+3	; 0x03
    64de:	aa 81       	ldd	r26, Y+2	; 0x02
    64e0:	b9 81       	ldd	r27, Y+1	; 0x01
    64e2:	ce 0f       	add	r28, r30
    64e4:	d1 1d       	adc	r29, r1
    64e6:	0f b6       	in	r0, 0x3f	; 63
    64e8:	f8 94       	cli
    64ea:	de bf       	out	0x3e, r29	; 62
    64ec:	0f be       	out	0x3f, r0	; 63
    64ee:	cd bf       	out	0x3d, r28	; 61
    64f0:	ed 01       	movw	r28, r26
    64f2:	08 95       	ret

000064f4 <memset>:
    64f4:	dc 01       	movw	r26, r24
    64f6:	01 c0       	rjmp	.+2      	; 0x64fa <memset+0x6>
    64f8:	6d 93       	st	X+, r22
    64fa:	41 50       	subi	r20, 0x01	; 1
    64fc:	50 40       	sbci	r21, 0x00	; 0
    64fe:	e0 f7       	brcc	.-8      	; 0x64f8 <memset+0x4>
    6500:	08 95       	ret

00006502 <strcpy>:
    6502:	fb 01       	movw	r30, r22
    6504:	dc 01       	movw	r26, r24
    6506:	01 90       	ld	r0, Z+
    6508:	0d 92       	st	X+, r0
    650a:	00 20       	and	r0, r0
    650c:	e1 f7       	brne	.-8      	; 0x6506 <strcpy+0x4>
    650e:	08 95       	ret

00006510 <strlen>:
    6510:	fc 01       	movw	r30, r24
    6512:	01 90       	ld	r0, Z+
    6514:	00 20       	and	r0, r0
    6516:	e9 f7       	brne	.-6      	; 0x6512 <strlen+0x2>
    6518:	80 95       	com	r24
    651a:	90 95       	com	r25
    651c:	8e 0f       	add	r24, r30
    651e:	9f 1f       	adc	r25, r31
    6520:	08 95       	ret

00006522 <strstr>:
    6522:	fb 01       	movw	r30, r22
    6524:	51 91       	ld	r21, Z+
    6526:	55 23       	and	r21, r21
    6528:	a9 f0       	breq	.+42     	; 0x6554 <strstr+0x32>
    652a:	bf 01       	movw	r22, r30
    652c:	dc 01       	movw	r26, r24
    652e:	4d 91       	ld	r20, X+
    6530:	45 17       	cp	r20, r21
    6532:	41 11       	cpse	r20, r1
    6534:	e1 f7       	brne	.-8      	; 0x652e <strstr+0xc>
    6536:	59 f4       	brne	.+22     	; 0x654e <strstr+0x2c>
    6538:	cd 01       	movw	r24, r26
    653a:	01 90       	ld	r0, Z+
    653c:	00 20       	and	r0, r0
    653e:	49 f0       	breq	.+18     	; 0x6552 <strstr+0x30>
    6540:	4d 91       	ld	r20, X+
    6542:	40 15       	cp	r20, r0
    6544:	41 11       	cpse	r20, r1
    6546:	c9 f3       	breq	.-14     	; 0x653a <strstr+0x18>
    6548:	fb 01       	movw	r30, r22
    654a:	41 11       	cpse	r20, r1
    654c:	ef cf       	rjmp	.-34     	; 0x652c <strstr+0xa>
    654e:	81 e0       	ldi	r24, 0x01	; 1
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	01 97       	sbiw	r24, 0x01	; 1
    6554:	08 95       	ret

00006556 <itoa>:
    6556:	fb 01       	movw	r30, r22
    6558:	9f 01       	movw	r18, r30
    655a:	e8 94       	clt
    655c:	42 30       	cpi	r20, 0x02	; 2
    655e:	c4 f0       	brlt	.+48     	; 0x6590 <itoa+0x3a>
    6560:	45 32       	cpi	r20, 0x25	; 37
    6562:	b4 f4       	brge	.+44     	; 0x6590 <itoa+0x3a>
    6564:	4a 30       	cpi	r20, 0x0A	; 10
    6566:	29 f4       	brne	.+10     	; 0x6572 <itoa+0x1c>
    6568:	97 fb       	bst	r25, 7
    656a:	1e f4       	brtc	.+6      	; 0x6572 <itoa+0x1c>
    656c:	90 95       	com	r25
    656e:	81 95       	neg	r24
    6570:	9f 4f       	sbci	r25, 0xFF	; 255
    6572:	64 2f       	mov	r22, r20
    6574:	77 27       	eor	r23, r23
    6576:	0e 94 df 31 	call	0x63be	; 0x63be <__udivmodhi4>
    657a:	80 5d       	subi	r24, 0xD0	; 208
    657c:	8a 33       	cpi	r24, 0x3A	; 58
    657e:	0c f0       	brlt	.+2      	; 0x6582 <itoa+0x2c>
    6580:	89 5d       	subi	r24, 0xD9	; 217
    6582:	81 93       	st	Z+, r24
    6584:	cb 01       	movw	r24, r22
    6586:	00 97       	sbiw	r24, 0x00	; 0
    6588:	a1 f7       	brne	.-24     	; 0x6572 <itoa+0x1c>
    658a:	16 f4       	brtc	.+4      	; 0x6590 <itoa+0x3a>
    658c:	5d e2       	ldi	r21, 0x2D	; 45
    658e:	51 93       	st	Z+, r21
    6590:	10 82       	st	Z, r1
    6592:	c9 01       	movw	r24, r18
    6594:	0c 94 e3 34 	jmp	0x69c6	; 0x69c6 <strrev>

00006598 <sprintf>:
    6598:	ae e0       	ldi	r26, 0x0E	; 14
    659a:	b0 e0       	ldi	r27, 0x00	; 0
    659c:	e2 ed       	ldi	r30, 0xD2	; 210
    659e:	f2 e3       	ldi	r31, 0x32	; 50
    65a0:	0c 94 51 32 	jmp	0x64a2	; 0x64a2 <__prologue_saves__+0x1c>
    65a4:	0d 89       	ldd	r16, Y+21	; 0x15
    65a6:	1e 89       	ldd	r17, Y+22	; 0x16
    65a8:	86 e0       	ldi	r24, 0x06	; 6
    65aa:	8c 83       	std	Y+4, r24	; 0x04
    65ac:	1a 83       	std	Y+2, r17	; 0x02
    65ae:	09 83       	std	Y+1, r16	; 0x01
    65b0:	8f ef       	ldi	r24, 0xFF	; 255
    65b2:	9f e7       	ldi	r25, 0x7F	; 127
    65b4:	9e 83       	std	Y+6, r25	; 0x06
    65b6:	8d 83       	std	Y+5, r24	; 0x05
    65b8:	9e 01       	movw	r18, r28
    65ba:	27 5e       	subi	r18, 0xE7	; 231
    65bc:	3f 4f       	sbci	r19, 0xFF	; 255
    65be:	ce 01       	movw	r24, r28
    65c0:	01 96       	adiw	r24, 0x01	; 1
    65c2:	6f 89       	ldd	r22, Y+23	; 0x17
    65c4:	78 8d       	ldd	r23, Y+24	; 0x18
    65c6:	a9 01       	movw	r20, r18
    65c8:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <vfprintf>
    65cc:	2f 81       	ldd	r18, Y+7	; 0x07
    65ce:	38 85       	ldd	r19, Y+8	; 0x08
    65d0:	02 0f       	add	r16, r18
    65d2:	13 1f       	adc	r17, r19
    65d4:	f8 01       	movw	r30, r16
    65d6:	10 82       	st	Z, r1
    65d8:	2e 96       	adiw	r28, 0x0e	; 14
    65da:	e4 e0       	ldi	r30, 0x04	; 4
    65dc:	0c 94 6d 32 	jmp	0x64da	; 0x64da <__epilogue_restores__+0x1c>

000065e0 <vfprintf>:
    65e0:	ab e0       	ldi	r26, 0x0B	; 11
    65e2:	b0 e0       	ldi	r27, 0x00	; 0
    65e4:	e6 ef       	ldi	r30, 0xF6	; 246
    65e6:	f2 e3       	ldi	r31, 0x32	; 50
    65e8:	0c 94 43 32 	jmp	0x6486	; 0x6486 <__prologue_saves__>
    65ec:	3c 01       	movw	r6, r24
    65ee:	2b 01       	movw	r4, r22
    65f0:	5a 01       	movw	r10, r20
    65f2:	fc 01       	movw	r30, r24
    65f4:	17 82       	std	Z+7, r1	; 0x07
    65f6:	16 82       	std	Z+6, r1	; 0x06
    65f8:	83 81       	ldd	r24, Z+3	; 0x03
    65fa:	81 fd       	sbrc	r24, 1
    65fc:	03 c0       	rjmp	.+6      	; 0x6604 <vfprintf+0x24>
    65fe:	6f ef       	ldi	r22, 0xFF	; 255
    6600:	7f ef       	ldi	r23, 0xFF	; 255
    6602:	c6 c1       	rjmp	.+908    	; 0x6990 <vfprintf+0x3b0>
    6604:	9a e0       	ldi	r25, 0x0A	; 10
    6606:	89 2e       	mov	r8, r25
    6608:	1e 01       	movw	r2, r28
    660a:	08 94       	sec
    660c:	21 1c       	adc	r2, r1
    660e:	31 1c       	adc	r3, r1
    6610:	f3 01       	movw	r30, r6
    6612:	23 81       	ldd	r18, Z+3	; 0x03
    6614:	f2 01       	movw	r30, r4
    6616:	23 fd       	sbrc	r18, 3
    6618:	85 91       	lpm	r24, Z+
    661a:	23 ff       	sbrs	r18, 3
    661c:	81 91       	ld	r24, Z+
    661e:	2f 01       	movw	r4, r30
    6620:	88 23       	and	r24, r24
    6622:	09 f4       	brne	.+2      	; 0x6626 <vfprintf+0x46>
    6624:	b2 c1       	rjmp	.+868    	; 0x698a <vfprintf+0x3aa>
    6626:	85 32       	cpi	r24, 0x25	; 37
    6628:	39 f4       	brne	.+14     	; 0x6638 <vfprintf+0x58>
    662a:	23 fd       	sbrc	r18, 3
    662c:	85 91       	lpm	r24, Z+
    662e:	23 ff       	sbrs	r18, 3
    6630:	81 91       	ld	r24, Z+
    6632:	2f 01       	movw	r4, r30
    6634:	85 32       	cpi	r24, 0x25	; 37
    6636:	29 f4       	brne	.+10     	; 0x6642 <vfprintf+0x62>
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	b3 01       	movw	r22, r6
    663c:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    6640:	e7 cf       	rjmp	.-50     	; 0x6610 <vfprintf+0x30>
    6642:	98 2f       	mov	r25, r24
    6644:	ff 24       	eor	r15, r15
    6646:	ee 24       	eor	r14, r14
    6648:	99 24       	eor	r9, r9
    664a:	ff e1       	ldi	r31, 0x1F	; 31
    664c:	ff 15       	cp	r31, r15
    664e:	d0 f0       	brcs	.+52     	; 0x6684 <vfprintf+0xa4>
    6650:	9b 32       	cpi	r25, 0x2B	; 43
    6652:	69 f0       	breq	.+26     	; 0x666e <vfprintf+0x8e>
    6654:	9c 32       	cpi	r25, 0x2C	; 44
    6656:	28 f4       	brcc	.+10     	; 0x6662 <vfprintf+0x82>
    6658:	90 32       	cpi	r25, 0x20	; 32
    665a:	59 f0       	breq	.+22     	; 0x6672 <vfprintf+0x92>
    665c:	93 32       	cpi	r25, 0x23	; 35
    665e:	91 f4       	brne	.+36     	; 0x6684 <vfprintf+0xa4>
    6660:	0e c0       	rjmp	.+28     	; 0x667e <vfprintf+0x9e>
    6662:	9d 32       	cpi	r25, 0x2D	; 45
    6664:	49 f0       	breq	.+18     	; 0x6678 <vfprintf+0x98>
    6666:	90 33       	cpi	r25, 0x30	; 48
    6668:	69 f4       	brne	.+26     	; 0x6684 <vfprintf+0xa4>
    666a:	41 e0       	ldi	r20, 0x01	; 1
    666c:	24 c0       	rjmp	.+72     	; 0x66b6 <vfprintf+0xd6>
    666e:	52 e0       	ldi	r21, 0x02	; 2
    6670:	f5 2a       	or	r15, r21
    6672:	84 e0       	ldi	r24, 0x04	; 4
    6674:	f8 2a       	or	r15, r24
    6676:	28 c0       	rjmp	.+80     	; 0x66c8 <vfprintf+0xe8>
    6678:	98 e0       	ldi	r25, 0x08	; 8
    667a:	f9 2a       	or	r15, r25
    667c:	25 c0       	rjmp	.+74     	; 0x66c8 <vfprintf+0xe8>
    667e:	e0 e1       	ldi	r30, 0x10	; 16
    6680:	fe 2a       	or	r15, r30
    6682:	22 c0       	rjmp	.+68     	; 0x66c8 <vfprintf+0xe8>
    6684:	f7 fc       	sbrc	r15, 7
    6686:	29 c0       	rjmp	.+82     	; 0x66da <vfprintf+0xfa>
    6688:	89 2f       	mov	r24, r25
    668a:	80 53       	subi	r24, 0x30	; 48
    668c:	8a 30       	cpi	r24, 0x0A	; 10
    668e:	70 f4       	brcc	.+28     	; 0x66ac <vfprintf+0xcc>
    6690:	f6 fe       	sbrs	r15, 6
    6692:	05 c0       	rjmp	.+10     	; 0x669e <vfprintf+0xbe>
    6694:	98 9c       	mul	r9, r8
    6696:	90 2c       	mov	r9, r0
    6698:	11 24       	eor	r1, r1
    669a:	98 0e       	add	r9, r24
    669c:	15 c0       	rjmp	.+42     	; 0x66c8 <vfprintf+0xe8>
    669e:	e8 9c       	mul	r14, r8
    66a0:	e0 2c       	mov	r14, r0
    66a2:	11 24       	eor	r1, r1
    66a4:	e8 0e       	add	r14, r24
    66a6:	f0 e2       	ldi	r31, 0x20	; 32
    66a8:	ff 2a       	or	r15, r31
    66aa:	0e c0       	rjmp	.+28     	; 0x66c8 <vfprintf+0xe8>
    66ac:	9e 32       	cpi	r25, 0x2E	; 46
    66ae:	29 f4       	brne	.+10     	; 0x66ba <vfprintf+0xda>
    66b0:	f6 fc       	sbrc	r15, 6
    66b2:	6b c1       	rjmp	.+726    	; 0x698a <vfprintf+0x3aa>
    66b4:	40 e4       	ldi	r20, 0x40	; 64
    66b6:	f4 2a       	or	r15, r20
    66b8:	07 c0       	rjmp	.+14     	; 0x66c8 <vfprintf+0xe8>
    66ba:	9c 36       	cpi	r25, 0x6C	; 108
    66bc:	19 f4       	brne	.+6      	; 0x66c4 <vfprintf+0xe4>
    66be:	50 e8       	ldi	r21, 0x80	; 128
    66c0:	f5 2a       	or	r15, r21
    66c2:	02 c0       	rjmp	.+4      	; 0x66c8 <vfprintf+0xe8>
    66c4:	98 36       	cpi	r25, 0x68	; 104
    66c6:	49 f4       	brne	.+18     	; 0x66da <vfprintf+0xfa>
    66c8:	f2 01       	movw	r30, r4
    66ca:	23 fd       	sbrc	r18, 3
    66cc:	95 91       	lpm	r25, Z+
    66ce:	23 ff       	sbrs	r18, 3
    66d0:	91 91       	ld	r25, Z+
    66d2:	2f 01       	movw	r4, r30
    66d4:	99 23       	and	r25, r25
    66d6:	09 f0       	breq	.+2      	; 0x66da <vfprintf+0xfa>
    66d8:	b8 cf       	rjmp	.-144    	; 0x664a <vfprintf+0x6a>
    66da:	89 2f       	mov	r24, r25
    66dc:	85 54       	subi	r24, 0x45	; 69
    66de:	83 30       	cpi	r24, 0x03	; 3
    66e0:	18 f0       	brcs	.+6      	; 0x66e8 <vfprintf+0x108>
    66e2:	80 52       	subi	r24, 0x20	; 32
    66e4:	83 30       	cpi	r24, 0x03	; 3
    66e6:	38 f4       	brcc	.+14     	; 0x66f6 <vfprintf+0x116>
    66e8:	44 e0       	ldi	r20, 0x04	; 4
    66ea:	50 e0       	ldi	r21, 0x00	; 0
    66ec:	a4 0e       	add	r10, r20
    66ee:	b5 1e       	adc	r11, r21
    66f0:	5f e3       	ldi	r21, 0x3F	; 63
    66f2:	59 83       	std	Y+1, r21	; 0x01
    66f4:	0f c0       	rjmp	.+30     	; 0x6714 <vfprintf+0x134>
    66f6:	93 36       	cpi	r25, 0x63	; 99
    66f8:	31 f0       	breq	.+12     	; 0x6706 <vfprintf+0x126>
    66fa:	93 37       	cpi	r25, 0x73	; 115
    66fc:	79 f0       	breq	.+30     	; 0x671c <vfprintf+0x13c>
    66fe:	93 35       	cpi	r25, 0x53	; 83
    6700:	09 f0       	breq	.+2      	; 0x6704 <vfprintf+0x124>
    6702:	56 c0       	rjmp	.+172    	; 0x67b0 <vfprintf+0x1d0>
    6704:	20 c0       	rjmp	.+64     	; 0x6746 <vfprintf+0x166>
    6706:	f5 01       	movw	r30, r10
    6708:	80 81       	ld	r24, Z
    670a:	89 83       	std	Y+1, r24	; 0x01
    670c:	42 e0       	ldi	r20, 0x02	; 2
    670e:	50 e0       	ldi	r21, 0x00	; 0
    6710:	a4 0e       	add	r10, r20
    6712:	b5 1e       	adc	r11, r21
    6714:	61 01       	movw	r12, r2
    6716:	01 e0       	ldi	r16, 0x01	; 1
    6718:	10 e0       	ldi	r17, 0x00	; 0
    671a:	12 c0       	rjmp	.+36     	; 0x6740 <vfprintf+0x160>
    671c:	f5 01       	movw	r30, r10
    671e:	c0 80       	ld	r12, Z
    6720:	d1 80       	ldd	r13, Z+1	; 0x01
    6722:	f6 fc       	sbrc	r15, 6
    6724:	03 c0       	rjmp	.+6      	; 0x672c <vfprintf+0x14c>
    6726:	6f ef       	ldi	r22, 0xFF	; 255
    6728:	7f ef       	ldi	r23, 0xFF	; 255
    672a:	02 c0       	rjmp	.+4      	; 0x6730 <vfprintf+0x150>
    672c:	69 2d       	mov	r22, r9
    672e:	70 e0       	ldi	r23, 0x00	; 0
    6730:	42 e0       	ldi	r20, 0x02	; 2
    6732:	50 e0       	ldi	r21, 0x00	; 0
    6734:	a4 0e       	add	r10, r20
    6736:	b5 1e       	adc	r11, r21
    6738:	c6 01       	movw	r24, r12
    673a:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <strnlen>
    673e:	8c 01       	movw	r16, r24
    6740:	5f e7       	ldi	r21, 0x7F	; 127
    6742:	f5 22       	and	r15, r21
    6744:	14 c0       	rjmp	.+40     	; 0x676e <vfprintf+0x18e>
    6746:	f5 01       	movw	r30, r10
    6748:	c0 80       	ld	r12, Z
    674a:	d1 80       	ldd	r13, Z+1	; 0x01
    674c:	f6 fc       	sbrc	r15, 6
    674e:	03 c0       	rjmp	.+6      	; 0x6756 <vfprintf+0x176>
    6750:	6f ef       	ldi	r22, 0xFF	; 255
    6752:	7f ef       	ldi	r23, 0xFF	; 255
    6754:	02 c0       	rjmp	.+4      	; 0x675a <vfprintf+0x17a>
    6756:	69 2d       	mov	r22, r9
    6758:	70 e0       	ldi	r23, 0x00	; 0
    675a:	42 e0       	ldi	r20, 0x02	; 2
    675c:	50 e0       	ldi	r21, 0x00	; 0
    675e:	a4 0e       	add	r10, r20
    6760:	b5 1e       	adc	r11, r21
    6762:	c6 01       	movw	r24, r12
    6764:	0e 94 cd 34 	call	0x699a	; 0x699a <strnlen_P>
    6768:	8c 01       	movw	r16, r24
    676a:	50 e8       	ldi	r21, 0x80	; 128
    676c:	f5 2a       	or	r15, r21
    676e:	f3 fe       	sbrs	r15, 3
    6770:	07 c0       	rjmp	.+14     	; 0x6780 <vfprintf+0x1a0>
    6772:	1a c0       	rjmp	.+52     	; 0x67a8 <vfprintf+0x1c8>
    6774:	80 e2       	ldi	r24, 0x20	; 32
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	b3 01       	movw	r22, r6
    677a:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    677e:	ea 94       	dec	r14
    6780:	8e 2d       	mov	r24, r14
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	08 17       	cp	r16, r24
    6786:	19 07       	cpc	r17, r25
    6788:	a8 f3       	brcs	.-22     	; 0x6774 <vfprintf+0x194>
    678a:	0e c0       	rjmp	.+28     	; 0x67a8 <vfprintf+0x1c8>
    678c:	f6 01       	movw	r30, r12
    678e:	f7 fc       	sbrc	r15, 7
    6790:	85 91       	lpm	r24, Z+
    6792:	f7 fe       	sbrs	r15, 7
    6794:	81 91       	ld	r24, Z+
    6796:	6f 01       	movw	r12, r30
    6798:	90 e0       	ldi	r25, 0x00	; 0
    679a:	b3 01       	movw	r22, r6
    679c:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    67a0:	e1 10       	cpse	r14, r1
    67a2:	ea 94       	dec	r14
    67a4:	01 50       	subi	r16, 0x01	; 1
    67a6:	10 40       	sbci	r17, 0x00	; 0
    67a8:	01 15       	cp	r16, r1
    67aa:	11 05       	cpc	r17, r1
    67ac:	79 f7       	brne	.-34     	; 0x678c <vfprintf+0x1ac>
    67ae:	ea c0       	rjmp	.+468    	; 0x6984 <vfprintf+0x3a4>
    67b0:	94 36       	cpi	r25, 0x64	; 100
    67b2:	11 f0       	breq	.+4      	; 0x67b8 <vfprintf+0x1d8>
    67b4:	99 36       	cpi	r25, 0x69	; 105
    67b6:	69 f5       	brne	.+90     	; 0x6812 <vfprintf+0x232>
    67b8:	f7 fe       	sbrs	r15, 7
    67ba:	08 c0       	rjmp	.+16     	; 0x67cc <vfprintf+0x1ec>
    67bc:	f5 01       	movw	r30, r10
    67be:	20 81       	ld	r18, Z
    67c0:	31 81       	ldd	r19, Z+1	; 0x01
    67c2:	42 81       	ldd	r20, Z+2	; 0x02
    67c4:	53 81       	ldd	r21, Z+3	; 0x03
    67c6:	84 e0       	ldi	r24, 0x04	; 4
    67c8:	90 e0       	ldi	r25, 0x00	; 0
    67ca:	0a c0       	rjmp	.+20     	; 0x67e0 <vfprintf+0x200>
    67cc:	f5 01       	movw	r30, r10
    67ce:	80 81       	ld	r24, Z
    67d0:	91 81       	ldd	r25, Z+1	; 0x01
    67d2:	9c 01       	movw	r18, r24
    67d4:	44 27       	eor	r20, r20
    67d6:	37 fd       	sbrc	r19, 7
    67d8:	40 95       	com	r20
    67da:	54 2f       	mov	r21, r20
    67dc:	82 e0       	ldi	r24, 0x02	; 2
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	a8 0e       	add	r10, r24
    67e2:	b9 1e       	adc	r11, r25
    67e4:	9f e6       	ldi	r25, 0x6F	; 111
    67e6:	f9 22       	and	r15, r25
    67e8:	57 ff       	sbrs	r21, 7
    67ea:	09 c0       	rjmp	.+18     	; 0x67fe <vfprintf+0x21e>
    67ec:	50 95       	com	r21
    67ee:	40 95       	com	r20
    67f0:	30 95       	com	r19
    67f2:	21 95       	neg	r18
    67f4:	3f 4f       	sbci	r19, 0xFF	; 255
    67f6:	4f 4f       	sbci	r20, 0xFF	; 255
    67f8:	5f 4f       	sbci	r21, 0xFF	; 255
    67fa:	e0 e8       	ldi	r30, 0x80	; 128
    67fc:	fe 2a       	or	r15, r30
    67fe:	ca 01       	movw	r24, r20
    6800:	b9 01       	movw	r22, r18
    6802:	a1 01       	movw	r20, r2
    6804:	2a e0       	ldi	r18, 0x0A	; 10
    6806:	30 e0       	ldi	r19, 0x00	; 0
    6808:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__ultoa_invert>
    680c:	d8 2e       	mov	r13, r24
    680e:	d2 18       	sub	r13, r2
    6810:	40 c0       	rjmp	.+128    	; 0x6892 <vfprintf+0x2b2>
    6812:	95 37       	cpi	r25, 0x75	; 117
    6814:	29 f4       	brne	.+10     	; 0x6820 <vfprintf+0x240>
    6816:	1f 2d       	mov	r17, r15
    6818:	1f 7e       	andi	r17, 0xEF	; 239
    681a:	2a e0       	ldi	r18, 0x0A	; 10
    681c:	30 e0       	ldi	r19, 0x00	; 0
    681e:	1d c0       	rjmp	.+58     	; 0x685a <vfprintf+0x27a>
    6820:	1f 2d       	mov	r17, r15
    6822:	19 7f       	andi	r17, 0xF9	; 249
    6824:	9f 36       	cpi	r25, 0x6F	; 111
    6826:	61 f0       	breq	.+24     	; 0x6840 <vfprintf+0x260>
    6828:	90 37       	cpi	r25, 0x70	; 112
    682a:	20 f4       	brcc	.+8      	; 0x6834 <vfprintf+0x254>
    682c:	98 35       	cpi	r25, 0x58	; 88
    682e:	09 f0       	breq	.+2      	; 0x6832 <vfprintf+0x252>
    6830:	ac c0       	rjmp	.+344    	; 0x698a <vfprintf+0x3aa>
    6832:	0f c0       	rjmp	.+30     	; 0x6852 <vfprintf+0x272>
    6834:	90 37       	cpi	r25, 0x70	; 112
    6836:	39 f0       	breq	.+14     	; 0x6846 <vfprintf+0x266>
    6838:	98 37       	cpi	r25, 0x78	; 120
    683a:	09 f0       	breq	.+2      	; 0x683e <vfprintf+0x25e>
    683c:	a6 c0       	rjmp	.+332    	; 0x698a <vfprintf+0x3aa>
    683e:	04 c0       	rjmp	.+8      	; 0x6848 <vfprintf+0x268>
    6840:	28 e0       	ldi	r18, 0x08	; 8
    6842:	30 e0       	ldi	r19, 0x00	; 0
    6844:	0a c0       	rjmp	.+20     	; 0x685a <vfprintf+0x27a>
    6846:	10 61       	ori	r17, 0x10	; 16
    6848:	14 fd       	sbrc	r17, 4
    684a:	14 60       	ori	r17, 0x04	; 4
    684c:	20 e1       	ldi	r18, 0x10	; 16
    684e:	30 e0       	ldi	r19, 0x00	; 0
    6850:	04 c0       	rjmp	.+8      	; 0x685a <vfprintf+0x27a>
    6852:	14 fd       	sbrc	r17, 4
    6854:	16 60       	ori	r17, 0x06	; 6
    6856:	20 e1       	ldi	r18, 0x10	; 16
    6858:	32 e0       	ldi	r19, 0x02	; 2
    685a:	17 ff       	sbrs	r17, 7
    685c:	08 c0       	rjmp	.+16     	; 0x686e <vfprintf+0x28e>
    685e:	f5 01       	movw	r30, r10
    6860:	60 81       	ld	r22, Z
    6862:	71 81       	ldd	r23, Z+1	; 0x01
    6864:	82 81       	ldd	r24, Z+2	; 0x02
    6866:	93 81       	ldd	r25, Z+3	; 0x03
    6868:	44 e0       	ldi	r20, 0x04	; 4
    686a:	50 e0       	ldi	r21, 0x00	; 0
    686c:	08 c0       	rjmp	.+16     	; 0x687e <vfprintf+0x29e>
    686e:	f5 01       	movw	r30, r10
    6870:	80 81       	ld	r24, Z
    6872:	91 81       	ldd	r25, Z+1	; 0x01
    6874:	bc 01       	movw	r22, r24
    6876:	80 e0       	ldi	r24, 0x00	; 0
    6878:	90 e0       	ldi	r25, 0x00	; 0
    687a:	42 e0       	ldi	r20, 0x02	; 2
    687c:	50 e0       	ldi	r21, 0x00	; 0
    687e:	a4 0e       	add	r10, r20
    6880:	b5 1e       	adc	r11, r21
    6882:	a1 01       	movw	r20, r2
    6884:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <__ultoa_invert>
    6888:	d8 2e       	mov	r13, r24
    688a:	d2 18       	sub	r13, r2
    688c:	8f e7       	ldi	r24, 0x7F	; 127
    688e:	f8 2e       	mov	r15, r24
    6890:	f1 22       	and	r15, r17
    6892:	f6 fe       	sbrs	r15, 6
    6894:	0b c0       	rjmp	.+22     	; 0x68ac <vfprintf+0x2cc>
    6896:	5e ef       	ldi	r21, 0xFE	; 254
    6898:	f5 22       	and	r15, r21
    689a:	d9 14       	cp	r13, r9
    689c:	38 f4       	brcc	.+14     	; 0x68ac <vfprintf+0x2cc>
    689e:	f4 fe       	sbrs	r15, 4
    68a0:	07 c0       	rjmp	.+14     	; 0x68b0 <vfprintf+0x2d0>
    68a2:	f2 fc       	sbrc	r15, 2
    68a4:	05 c0       	rjmp	.+10     	; 0x68b0 <vfprintf+0x2d0>
    68a6:	8f ee       	ldi	r24, 0xEF	; 239
    68a8:	f8 22       	and	r15, r24
    68aa:	02 c0       	rjmp	.+4      	; 0x68b0 <vfprintf+0x2d0>
    68ac:	1d 2d       	mov	r17, r13
    68ae:	01 c0       	rjmp	.+2      	; 0x68b2 <vfprintf+0x2d2>
    68b0:	19 2d       	mov	r17, r9
    68b2:	f4 fe       	sbrs	r15, 4
    68b4:	0d c0       	rjmp	.+26     	; 0x68d0 <vfprintf+0x2f0>
    68b6:	fe 01       	movw	r30, r28
    68b8:	ed 0d       	add	r30, r13
    68ba:	f1 1d       	adc	r31, r1
    68bc:	80 81       	ld	r24, Z
    68be:	80 33       	cpi	r24, 0x30	; 48
    68c0:	19 f4       	brne	.+6      	; 0x68c8 <vfprintf+0x2e8>
    68c2:	99 ee       	ldi	r25, 0xE9	; 233
    68c4:	f9 22       	and	r15, r25
    68c6:	08 c0       	rjmp	.+16     	; 0x68d8 <vfprintf+0x2f8>
    68c8:	1f 5f       	subi	r17, 0xFF	; 255
    68ca:	f2 fe       	sbrs	r15, 2
    68cc:	05 c0       	rjmp	.+10     	; 0x68d8 <vfprintf+0x2f8>
    68ce:	03 c0       	rjmp	.+6      	; 0x68d6 <vfprintf+0x2f6>
    68d0:	8f 2d       	mov	r24, r15
    68d2:	86 78       	andi	r24, 0x86	; 134
    68d4:	09 f0       	breq	.+2      	; 0x68d8 <vfprintf+0x2f8>
    68d6:	1f 5f       	subi	r17, 0xFF	; 255
    68d8:	0f 2d       	mov	r16, r15
    68da:	f3 fc       	sbrc	r15, 3
    68dc:	14 c0       	rjmp	.+40     	; 0x6906 <vfprintf+0x326>
    68de:	f0 fe       	sbrs	r15, 0
    68e0:	0f c0       	rjmp	.+30     	; 0x6900 <vfprintf+0x320>
    68e2:	1e 15       	cp	r17, r14
    68e4:	10 f0       	brcs	.+4      	; 0x68ea <vfprintf+0x30a>
    68e6:	9d 2c       	mov	r9, r13
    68e8:	0b c0       	rjmp	.+22     	; 0x6900 <vfprintf+0x320>
    68ea:	9d 2c       	mov	r9, r13
    68ec:	9e 0c       	add	r9, r14
    68ee:	91 1a       	sub	r9, r17
    68f0:	1e 2d       	mov	r17, r14
    68f2:	06 c0       	rjmp	.+12     	; 0x6900 <vfprintf+0x320>
    68f4:	80 e2       	ldi	r24, 0x20	; 32
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	b3 01       	movw	r22, r6
    68fa:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    68fe:	1f 5f       	subi	r17, 0xFF	; 255
    6900:	1e 15       	cp	r17, r14
    6902:	c0 f3       	brcs	.-16     	; 0x68f4 <vfprintf+0x314>
    6904:	04 c0       	rjmp	.+8      	; 0x690e <vfprintf+0x32e>
    6906:	1e 15       	cp	r17, r14
    6908:	10 f4       	brcc	.+4      	; 0x690e <vfprintf+0x32e>
    690a:	e1 1a       	sub	r14, r17
    690c:	01 c0       	rjmp	.+2      	; 0x6910 <vfprintf+0x330>
    690e:	ee 24       	eor	r14, r14
    6910:	04 ff       	sbrs	r16, 4
    6912:	0f c0       	rjmp	.+30     	; 0x6932 <vfprintf+0x352>
    6914:	80 e3       	ldi	r24, 0x30	; 48
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	b3 01       	movw	r22, r6
    691a:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    691e:	02 ff       	sbrs	r16, 2
    6920:	1d c0       	rjmp	.+58     	; 0x695c <vfprintf+0x37c>
    6922:	01 fd       	sbrc	r16, 1
    6924:	03 c0       	rjmp	.+6      	; 0x692c <vfprintf+0x34c>
    6926:	88 e7       	ldi	r24, 0x78	; 120
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	0e c0       	rjmp	.+28     	; 0x6948 <vfprintf+0x368>
    692c:	88 e5       	ldi	r24, 0x58	; 88
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	0b c0       	rjmp	.+22     	; 0x6948 <vfprintf+0x368>
    6932:	80 2f       	mov	r24, r16
    6934:	86 78       	andi	r24, 0x86	; 134
    6936:	91 f0       	breq	.+36     	; 0x695c <vfprintf+0x37c>
    6938:	01 ff       	sbrs	r16, 1
    693a:	02 c0       	rjmp	.+4      	; 0x6940 <vfprintf+0x360>
    693c:	8b e2       	ldi	r24, 0x2B	; 43
    693e:	01 c0       	rjmp	.+2      	; 0x6942 <vfprintf+0x362>
    6940:	80 e2       	ldi	r24, 0x20	; 32
    6942:	f7 fc       	sbrc	r15, 7
    6944:	8d e2       	ldi	r24, 0x2D	; 45
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	b3 01       	movw	r22, r6
    694a:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    694e:	06 c0       	rjmp	.+12     	; 0x695c <vfprintf+0x37c>
    6950:	80 e3       	ldi	r24, 0x30	; 48
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	b3 01       	movw	r22, r6
    6956:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    695a:	9a 94       	dec	r9
    695c:	d9 14       	cp	r13, r9
    695e:	c0 f3       	brcs	.-16     	; 0x6950 <vfprintf+0x370>
    6960:	da 94       	dec	r13
    6962:	f1 01       	movw	r30, r2
    6964:	ed 0d       	add	r30, r13
    6966:	f1 1d       	adc	r31, r1
    6968:	80 81       	ld	r24, Z
    696a:	90 e0       	ldi	r25, 0x00	; 0
    696c:	b3 01       	movw	r22, r6
    696e:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    6972:	dd 20       	and	r13, r13
    6974:	a9 f7       	brne	.-22     	; 0x6960 <vfprintf+0x380>
    6976:	06 c0       	rjmp	.+12     	; 0x6984 <vfprintf+0x3a4>
    6978:	80 e2       	ldi	r24, 0x20	; 32
    697a:	90 e0       	ldi	r25, 0x00	; 0
    697c:	b3 01       	movw	r22, r6
    697e:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <fputc>
    6982:	ea 94       	dec	r14
    6984:	ee 20       	and	r14, r14
    6986:	c1 f7       	brne	.-16     	; 0x6978 <vfprintf+0x398>
    6988:	43 ce       	rjmp	.-890    	; 0x6610 <vfprintf+0x30>
    698a:	f3 01       	movw	r30, r6
    698c:	66 81       	ldd	r22, Z+6	; 0x06
    698e:	77 81       	ldd	r23, Z+7	; 0x07
    6990:	cb 01       	movw	r24, r22
    6992:	2b 96       	adiw	r28, 0x0b	; 11
    6994:	e2 e1       	ldi	r30, 0x12	; 18
    6996:	0c 94 5f 32 	jmp	0x64be	; 0x64be <__epilogue_restores__>

0000699a <strnlen_P>:
    699a:	fc 01       	movw	r30, r24
    699c:	05 90       	lpm	r0, Z+
    699e:	61 50       	subi	r22, 0x01	; 1
    69a0:	70 40       	sbci	r23, 0x00	; 0
    69a2:	01 10       	cpse	r0, r1
    69a4:	d8 f7       	brcc	.-10     	; 0x699c <strnlen_P+0x2>
    69a6:	80 95       	com	r24
    69a8:	90 95       	com	r25
    69aa:	8e 0f       	add	r24, r30
    69ac:	9f 1f       	adc	r25, r31
    69ae:	08 95       	ret

000069b0 <strnlen>:
    69b0:	fc 01       	movw	r30, r24
    69b2:	61 50       	subi	r22, 0x01	; 1
    69b4:	70 40       	sbci	r23, 0x00	; 0
    69b6:	01 90       	ld	r0, Z+
    69b8:	01 10       	cpse	r0, r1
    69ba:	d8 f7       	brcc	.-10     	; 0x69b2 <strnlen+0x2>
    69bc:	80 95       	com	r24
    69be:	90 95       	com	r25
    69c0:	8e 0f       	add	r24, r30
    69c2:	9f 1f       	adc	r25, r31
    69c4:	08 95       	ret

000069c6 <strrev>:
    69c6:	dc 01       	movw	r26, r24
    69c8:	fc 01       	movw	r30, r24
    69ca:	67 2f       	mov	r22, r23
    69cc:	71 91       	ld	r23, Z+
    69ce:	77 23       	and	r23, r23
    69d0:	e1 f7       	brne	.-8      	; 0x69ca <strrev+0x4>
    69d2:	32 97       	sbiw	r30, 0x02	; 2
    69d4:	04 c0       	rjmp	.+8      	; 0x69de <strrev+0x18>
    69d6:	7c 91       	ld	r23, X
    69d8:	6d 93       	st	X+, r22
    69da:	70 83       	st	Z, r23
    69dc:	62 91       	ld	r22, -Z
    69de:	ae 17       	cp	r26, r30
    69e0:	bf 07       	cpc	r27, r31
    69e2:	c8 f3       	brcs	.-14     	; 0x69d6 <strrev+0x10>
    69e4:	08 95       	ret

000069e6 <fputc>:
    69e6:	0f 93       	push	r16
    69e8:	1f 93       	push	r17
    69ea:	cf 93       	push	r28
    69ec:	df 93       	push	r29
    69ee:	8c 01       	movw	r16, r24
    69f0:	eb 01       	movw	r28, r22
    69f2:	8b 81       	ldd	r24, Y+3	; 0x03
    69f4:	81 ff       	sbrs	r24, 1
    69f6:	1b c0       	rjmp	.+54     	; 0x6a2e <fputc+0x48>
    69f8:	82 ff       	sbrs	r24, 2
    69fa:	0d c0       	rjmp	.+26     	; 0x6a16 <fputc+0x30>
    69fc:	2e 81       	ldd	r18, Y+6	; 0x06
    69fe:	3f 81       	ldd	r19, Y+7	; 0x07
    6a00:	8c 81       	ldd	r24, Y+4	; 0x04
    6a02:	9d 81       	ldd	r25, Y+5	; 0x05
    6a04:	28 17       	cp	r18, r24
    6a06:	39 07       	cpc	r19, r25
    6a08:	64 f4       	brge	.+24     	; 0x6a22 <fputc+0x3c>
    6a0a:	e8 81       	ld	r30, Y
    6a0c:	f9 81       	ldd	r31, Y+1	; 0x01
    6a0e:	01 93       	st	Z+, r16
    6a10:	f9 83       	std	Y+1, r31	; 0x01
    6a12:	e8 83       	st	Y, r30
    6a14:	06 c0       	rjmp	.+12     	; 0x6a22 <fputc+0x3c>
    6a16:	e8 85       	ldd	r30, Y+8	; 0x08
    6a18:	f9 85       	ldd	r31, Y+9	; 0x09
    6a1a:	80 2f       	mov	r24, r16
    6a1c:	09 95       	icall
    6a1e:	89 2b       	or	r24, r25
    6a20:	31 f4       	brne	.+12     	; 0x6a2e <fputc+0x48>
    6a22:	8e 81       	ldd	r24, Y+6	; 0x06
    6a24:	9f 81       	ldd	r25, Y+7	; 0x07
    6a26:	01 96       	adiw	r24, 0x01	; 1
    6a28:	9f 83       	std	Y+7, r25	; 0x07
    6a2a:	8e 83       	std	Y+6, r24	; 0x06
    6a2c:	02 c0       	rjmp	.+4      	; 0x6a32 <fputc+0x4c>
    6a2e:	0f ef       	ldi	r16, 0xFF	; 255
    6a30:	1f ef       	ldi	r17, 0xFF	; 255
    6a32:	c8 01       	movw	r24, r16
    6a34:	df 91       	pop	r29
    6a36:	cf 91       	pop	r28
    6a38:	1f 91       	pop	r17
    6a3a:	0f 91       	pop	r16
    6a3c:	08 95       	ret

00006a3e <__ultoa_invert>:
    6a3e:	fa 01       	movw	r30, r20
    6a40:	aa 27       	eor	r26, r26
    6a42:	28 30       	cpi	r18, 0x08	; 8
    6a44:	51 f1       	breq	.+84     	; 0x6a9a <__ultoa_invert+0x5c>
    6a46:	20 31       	cpi	r18, 0x10	; 16
    6a48:	81 f1       	breq	.+96     	; 0x6aaa <__ultoa_invert+0x6c>
    6a4a:	e8 94       	clt
    6a4c:	6f 93       	push	r22
    6a4e:	6e 7f       	andi	r22, 0xFE	; 254
    6a50:	6e 5f       	subi	r22, 0xFE	; 254
    6a52:	7f 4f       	sbci	r23, 0xFF	; 255
    6a54:	8f 4f       	sbci	r24, 0xFF	; 255
    6a56:	9f 4f       	sbci	r25, 0xFF	; 255
    6a58:	af 4f       	sbci	r26, 0xFF	; 255
    6a5a:	b1 e0       	ldi	r27, 0x01	; 1
    6a5c:	3e d0       	rcall	.+124    	; 0x6ada <__ultoa_invert+0x9c>
    6a5e:	b4 e0       	ldi	r27, 0x04	; 4
    6a60:	3c d0       	rcall	.+120    	; 0x6ada <__ultoa_invert+0x9c>
    6a62:	67 0f       	add	r22, r23
    6a64:	78 1f       	adc	r23, r24
    6a66:	89 1f       	adc	r24, r25
    6a68:	9a 1f       	adc	r25, r26
    6a6a:	a1 1d       	adc	r26, r1
    6a6c:	68 0f       	add	r22, r24
    6a6e:	79 1f       	adc	r23, r25
    6a70:	8a 1f       	adc	r24, r26
    6a72:	91 1d       	adc	r25, r1
    6a74:	a1 1d       	adc	r26, r1
    6a76:	6a 0f       	add	r22, r26
    6a78:	71 1d       	adc	r23, r1
    6a7a:	81 1d       	adc	r24, r1
    6a7c:	91 1d       	adc	r25, r1
    6a7e:	a1 1d       	adc	r26, r1
    6a80:	20 d0       	rcall	.+64     	; 0x6ac2 <__ultoa_invert+0x84>
    6a82:	09 f4       	brne	.+2      	; 0x6a86 <__ultoa_invert+0x48>
    6a84:	68 94       	set
    6a86:	3f 91       	pop	r19
    6a88:	2a e0       	ldi	r18, 0x0A	; 10
    6a8a:	26 9f       	mul	r18, r22
    6a8c:	11 24       	eor	r1, r1
    6a8e:	30 19       	sub	r19, r0
    6a90:	30 5d       	subi	r19, 0xD0	; 208
    6a92:	31 93       	st	Z+, r19
    6a94:	de f6       	brtc	.-74     	; 0x6a4c <__ultoa_invert+0xe>
    6a96:	cf 01       	movw	r24, r30
    6a98:	08 95       	ret
    6a9a:	46 2f       	mov	r20, r22
    6a9c:	47 70       	andi	r20, 0x07	; 7
    6a9e:	40 5d       	subi	r20, 0xD0	; 208
    6aa0:	41 93       	st	Z+, r20
    6aa2:	b3 e0       	ldi	r27, 0x03	; 3
    6aa4:	0f d0       	rcall	.+30     	; 0x6ac4 <__ultoa_invert+0x86>
    6aa6:	c9 f7       	brne	.-14     	; 0x6a9a <__ultoa_invert+0x5c>
    6aa8:	f6 cf       	rjmp	.-20     	; 0x6a96 <__ultoa_invert+0x58>
    6aaa:	46 2f       	mov	r20, r22
    6aac:	4f 70       	andi	r20, 0x0F	; 15
    6aae:	40 5d       	subi	r20, 0xD0	; 208
    6ab0:	4a 33       	cpi	r20, 0x3A	; 58
    6ab2:	18 f0       	brcs	.+6      	; 0x6aba <__ultoa_invert+0x7c>
    6ab4:	49 5d       	subi	r20, 0xD9	; 217
    6ab6:	31 fd       	sbrc	r19, 1
    6ab8:	40 52       	subi	r20, 0x20	; 32
    6aba:	41 93       	st	Z+, r20
    6abc:	02 d0       	rcall	.+4      	; 0x6ac2 <__ultoa_invert+0x84>
    6abe:	a9 f7       	brne	.-22     	; 0x6aaa <__ultoa_invert+0x6c>
    6ac0:	ea cf       	rjmp	.-44     	; 0x6a96 <__ultoa_invert+0x58>
    6ac2:	b4 e0       	ldi	r27, 0x04	; 4
    6ac4:	a6 95       	lsr	r26
    6ac6:	97 95       	ror	r25
    6ac8:	87 95       	ror	r24
    6aca:	77 95       	ror	r23
    6acc:	67 95       	ror	r22
    6ace:	ba 95       	dec	r27
    6ad0:	c9 f7       	brne	.-14     	; 0x6ac4 <__ultoa_invert+0x86>
    6ad2:	00 97       	sbiw	r24, 0x00	; 0
    6ad4:	61 05       	cpc	r22, r1
    6ad6:	71 05       	cpc	r23, r1
    6ad8:	08 95       	ret
    6ada:	9b 01       	movw	r18, r22
    6adc:	ac 01       	movw	r20, r24
    6ade:	0a 2e       	mov	r0, r26
    6ae0:	06 94       	lsr	r0
    6ae2:	57 95       	ror	r21
    6ae4:	47 95       	ror	r20
    6ae6:	37 95       	ror	r19
    6ae8:	27 95       	ror	r18
    6aea:	ba 95       	dec	r27
    6aec:	c9 f7       	brne	.-14     	; 0x6ae0 <__ultoa_invert+0xa2>
    6aee:	62 0f       	add	r22, r18
    6af0:	73 1f       	adc	r23, r19
    6af2:	84 1f       	adc	r24, r20
    6af4:	95 1f       	adc	r25, r21
    6af6:	a0 1d       	adc	r26, r0
    6af8:	08 95       	ret

00006afa <_exit>:
    6afa:	f8 94       	cli

00006afc <__stop_program>:
    6afc:	ff cf       	rjmp	.-2      	; 0x6afc <__stop_program>
